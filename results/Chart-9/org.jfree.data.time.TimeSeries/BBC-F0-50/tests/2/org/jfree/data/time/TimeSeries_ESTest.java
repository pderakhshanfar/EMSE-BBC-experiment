/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:53:01 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Container;
import java.math.BigInteger;
import java.sql.Connection;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayer;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.synth.SynthSpinnerUI;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Second second0 = new Second();
      MockDate mockDate0 = new MockDate(59, 59, 0, 59, 59, 0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, (String) null, (String) null, class0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      timeSeries0.getTimePeriodClass();
      timeSeries1.getDataItem((RegularTimePeriod) second0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Vector<Month> vector0 = new Vector<Month>();
      MockDate mockDate0 = new MockDate(1, (-2923), 53, 53, 53, (-2923));
      Month month0 = new Month(mockDate0, week0.DEFAULT_TIME_ZONE);
      vector0.add(month0);
      timeSeries0.data = (List) vector0;
      try { 
        timeSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.getItems();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) bigInteger0);
      timeSeries0.getTimePeriods();
      timeSeries0.getValue((RegularTimePeriod) second0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      Stack<Object> stack0 = new Stack<Object>();
      timeSeries0.data = (List) stack0;
      stack0.add((Object) week1);
      stack0.add((Object) timeSeries0.data);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Stack cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.isEmpty();
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.setMaximumItemAge(53);
      timeSeries0.removeAgedItems(true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      Vector<TimeSeriesDataItem> vector0 = new Vector<TimeSeriesDataItem>();
      JList<TimeSeriesDataItem> jList0 = new JList<TimeSeriesDataItem>(vector0);
      List<TimeSeriesDataItem> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Second second0 = new Second();
      Second second1 = new Second();
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries(second1, class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Second second0 = new Second();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "org.jfree.data.xy.DefaultHighLowDataset", "Null 'minute' argument.", class0);
      ArrayList<RegularTimePeriod> arrayList0 = new ArrayList<RegularTimePeriod>();
      arrayList0.add((RegularTimePeriod) second0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Second cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 1);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      Stack<Object> stack0 = new Stack<Object>();
      timeSeries0.data = (List) stack0;
      stack0.add((Object) week1);
      timeSeries0.setMaximumItemAge(1);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Week cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Second second0 = new Second();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1221), 2, (-1221), 59, 59);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      TimeSeries timeSeries0 = new TimeSeries(second0, (Class) null);
      timeSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
      MockDate mockDate1 = new MockDate(59);
      mockDate1.toInstant();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      day0.previous();
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
      timeSeries0.getTimePeriodClass();
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 1);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      timeSeries0.setMaximumItemAge(53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.getDataItem(0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.data = null;
      timeSeries1.getNotify();
      // Undeclared exception!
      try { 
        timeSeries1.getDataItem(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 1);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      timeSeries0.setMaximumItemAge(0L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, (Class) null);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (Number) 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 1);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      timeSeries0.setMaximumItemAge(1L);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      week0.getEnd();
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Stack<TimeSeriesDataItem> stack0 = new Stack<TimeSeriesDataItem>();
      timeSeries0.data = (List) stack0;
      timeSeries0.getDataItem((RegularTimePeriod) second0);
      stack0.add((TimeSeriesDataItem) null);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 23, (-3441), (-1647), 1);
      week0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      Week week1 = new Week(53, 1);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot add null series.");
      TimeSeries timeSeries0 = new TimeSeries(week1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.setMaximumItemAge(0);
      timeSeries1.getMaximumItemAge();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(0, (Integer) 59);
      vector0.add((Integer) 0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((long) 0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.getItems();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) bigInteger0);
      timeSeries0.getTimePeriods();
      timeSeries0.getValue((RegularTimePeriod) second0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 0, 59, 59, 59, 59);
      timeSeries0.setMaximumItemCount(0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      day0.toString();
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
      Day day1 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 0, 59, 59, 59, 59);
      mockDate0.clone();
      timeSeries0.data = null;
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 0, 59, 59, 59, 59);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
      Day day1 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (double) 59);
      timeSeries0.createCopy(0, 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.getIndex(week0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 0, 59, 59, 59, 59);
      mockDate0.getTime();
      timeSeries0.setMaximumItemAge(0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      mockDate0.clone();
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemAge(1464L);
      timeSeries0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      ArrayList<Hour> arrayList0 = new ArrayList<Hour>();
      Hour hour0 = new Hour();
      arrayList0.add(hour0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Hour cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
      linkedList0.addFirst((Object) null);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.equals(object0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(0, 59, 59, 59, 0, 0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      Day day1 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      int int0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Week week0 = new Week();
      week0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.addOrUpdate((RegularTimePeriod) week0, 0.0);
      timeSeries0.equals(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 59, 0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      timeSeries1.addAndOrUpdate(timeSeries0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemAge(1464L);
      timeSeries0.equals(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      timeSeries1.getItemCount();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      timeSeries1.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.equals(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Week week0 = new Week();
      Class<Quarter> class0 = Quarter.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "", class0);
      timeSeries0.getDomainDescription();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 59, 0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      mockDate0.clone();
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.setMaximumItemCount(1);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Week week0 = new Week();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.setMaximumItemAge(951L);
      timeSeries0.removeAgedItems((-660L), false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      week0.compareTo(timeSeries0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      timeSeries1.createCopy(423, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 59, 0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.hashCode();
      timeSeries0.setMaximumItemCount(0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Week week0 = new Week();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.setMaximumItemAge(60L);
      timeSeries0.removeAgedItems(1761L, true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 59, 0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      MockInstant.now();
      Day day1 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod0);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries1 = new TimeSeries(timeSeriesDataItem0, class0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 59, 0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      MockInstant.now();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.update((RegularTimePeriod) day0, (Number) bigInteger0);
      timeSeries0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Month month0 = new Month(mockDate0);
      Class<RowSorterEvent.Type> class0 = RowSorterEvent.Type.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(29, 29, 386, 53, 59, 59);
      month0.peg(mockGregorianCalendar0);
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(month0.DEFAULT_TIME_ZONE, locale0);
      month0.getMiddleMillisecond((Calendar) mockGregorianCalendar1);
      TimeSeries timeSeries0 = new TimeSeries(month0, class0);
      timeSeries0.getTimePeriodClass();
      timeSeries0.getTimePeriods();
      timeSeries0.getTimePeriods();
      timeSeries0.clear();
      Random.setNextRandom((-5435));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = (-2482L);
      long long1 = 1L;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2482L), 1L);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      Object object0 = timeSeries0.clone();
      timeSeries0.equals(object0);
      timeSeries0.isEmpty();
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.getDataItem(0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemCount(93);
      timeSeries0.equals(timeSeries1);
      timeSeries1.hashCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      assertEquals(1, timeSeries0.getItemCount());
      
      MockInstant.now();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) day0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.getDataItem(0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.equals(timeSeries1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      MockDate mockDate1 = new MockDate(0, 59, 59, 59, 59);
      day0.getMonth();
      MockInstant.now();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
      timeSeries0.removeAgedItems(true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, true);
      MockDate mockDate1 = new MockDate(59);
      mockDate1.toInstant();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.equals(mockDate1);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      timeSeries0.getValue(0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.getDataItem((RegularTimePeriod) second0);
      Object object0 = timeSeries0.clone();
      timeSeries0.equals(object0);
      timeSeries0.getDataItem((RegularTimePeriod) second0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
      MockDate mockDate1 = new MockDate(59);
      mockDate1.toInstant();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
      timeSeries0.getTimePeriodClass();
      timeSeries0.getMaximumItemAge();
      timeSeries0.delete((RegularTimePeriod) day0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
      MockDate mockDate1 = new MockDate(59);
      mockDate1.toInstant();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
      timeSeries0.getTimePeriodClass();
      TimeSeries timeSeries1 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      timeSeries1.add((RegularTimePeriod) day0, (Number) 59, true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 59, false);
      MockDate mockDate1 = new MockDate(59);
      mockDate0.toInstant();
      mockDate1.toInstant();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.addAndOrUpdate(timeSeries0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-4742.82363364), false);
      MockDate mockDate1 = new MockDate(59);
      mockDate1.toInstant();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.hashCode();
      timeSeries0.getTimePeriodClass();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Second.parseSecond("Yw]|a>!^E:TD");
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      // Undeclared exception!
      try { 
        timeSeries1.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      day0.getMiddleMillisecond();
      day0.getDayOfMonth();
      JLayer<Container> jLayer0 = new JLayer<Container>();
      timeSeries0.addPropertyChangeListener(jLayer0);
      timeSeries0.setMaximumItemCount(4462);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, Integer.MAX_VALUE, (-954), (-954), Integer.MAX_VALUE, 22);
      day0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      timeSeries0.hashCode();
      Collection collection0 = timeSeries0.getTimePeriods();
      TimeSeries timeSeries1 = timeSeries0.createCopy(1085, 1085);
      timeSeries1.add((RegularTimePeriod) day0, (double) Integer.MAX_VALUE, false);
      timeSeries0.equals(collection0);
      timeSeries0.getDomainDescription();
      Hour.parseHour("Time");
      timeSeries0.equals((Object) null);
      // Undeclared exception!
      try { 
        timeSeries1.add((RegularTimePeriod) null, (Number) 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 59, 0, 59, 0);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 0, false);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4179L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries1 = new TimeSeries(regularTimePeriod0, (String) null, (String) null, class0);
      timeSeries1.getTimePeriods();
      timeSeries1.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-4742.82363364), false);
      MockDate mockDate1 = new MockDate((-3693L));
      mockDate1.toInstant();
      timeSeries0.hashCode();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.removeAgedItems((long) 59, true);
      timeSeries0.removeAgedItems(0L, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.setDomainDescription((String) null);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      timeSeries0.getValue((RegularTimePeriod) week0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-4742.82363364), false);
      MockDate mockDate1 = new MockDate((-3693L));
      mockDate1.toInstant();
      timeSeries0.hashCode();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      timeSeries0.createCopy((RegularTimePeriod) week0, regularTimePeriod1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-4742.82363364), false);
      MockDate mockDate1 = new MockDate((-3693L));
      mockDate1.toInstant();
      timeSeries0.hashCode();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      timeSeries0.add(regularTimePeriod0, (-1146.59762229), false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Second second0 = new Second();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, "I4a~>Izn,_~6H", "I4a~>Izn,_~6H", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Stack<Quarter> stack0 = new Stack<Quarter>();
      timeSeries0.data = (List) stack0;
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(53, 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 53
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(53);
      Day day0 = new Day(mockDate0, week0.DEFAULT_TIME_ZONE);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "+", (String) null, class0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 53, false);
      mockDate0.toInstant();
      timeSeries0.hashCode();
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(240);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 240, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 0, false);
      mockDate0.toInstant();
      timeSeries0.hashCode();
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getIndex(second0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) bigInteger0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      MockDate mockDate0 = new MockDate();
      Integer integer0 = new Integer(53);
      timeSeries0.equals(timeSeries0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      SerialDate serialDate1 = SerialDate.createInstance(805);
      serialDate0.compare(serialDate1);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      timeSeries0.clear();
      TimeSeries timeSeries1 = new TimeSeries(serialDate0, class0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
      
      timeSeries0.getDomainDescription();
      Date date0 = serialDate1.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.delete((RegularTimePeriod) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 0);
      timeSeries0.getDataItem(0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-3123), (Number) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      TimeSeries timeSeries2 = new TimeSeries(second0);
      timeSeries2.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      Calendar calendar0 = MockCalendar.getInstance(second0.DEFAULT_TIME_ZONE);
      second0.getFirstMillisecond(calendar0);
      timeSeries0.delete(0, 0);
      Integer integer0 = new Integer(59);
      // Undeclared exception!
      try { 
        timeSeries1.add((RegularTimePeriod) second0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.getIndex(week0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      timeSeries0.getTimePeriods();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.clear();
      TimeSeries timeSeries1 = new TimeSeries(second0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      timeSeries0.getDomainDescription();
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(59);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      System.setCurrentTimeMillis(59);
      timeSeries0.fireSeriesChanged();
      timeSeries0.getValue((RegularTimePeriod) second0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.delete((RegularTimePeriod) second0);
      Long long0 = new Long(59);
      timeSeries0.getMaximumItemCount();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Class<String> class0 = String.class;
      TimeSeries timeSeries1 = new TimeSeries(second0, class0);
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      timeSeries2.getTimePeriods();
      second0.getSerialIndex();
      Minute.parseMinute("");
      timeSeries1.removeAgedItems(false);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      Instant instant0 = MockInstant.ofEpochSecond(0L, 7L);
      Date date0 = Date.from(instant0);
      Day day0 = new Day(date0, week0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) day0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      Week week1 = new Week(1, 1);
      timeSeries1.clear();
      timeSeries0.hashCode();
      timeSeries0.equals(timeSeries1);
      timeSeries1.getDataItem((RegularTimePeriod) week0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      MockInstant.ofEpochSecond((long) 0, (-2301L));
      MockDate mockDate1 = new MockDate(59, 0, 0, 0, 59);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(59);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      System.setCurrentTimeMillis(59);
      timeSeries0.getValue((RegularTimePeriod) second0);
      timeSeries0.setMaximumItemCount(0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(59, 1073741824);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Week week0 = new Week();
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "org.jfree.data.gantt.Task", "org.jfree.data.gantt.Task", class0);
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      System.setCurrentTimeMillis(1);
      timeSeries0.getValue((RegularTimePeriod) week0);
      timeSeries0.setMaximumItemCount(1);
      // Undeclared exception!
      try { 
        timeSeries0.delete(1, 375);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.setNotify(false);
      timeSeries0.getRangeDescription();
      timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.delete((RegularTimePeriod) week0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(2, 53);
      // Undeclared exception!
      try { 
        timeSeries1.delete(53, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      System.setCurrentTimeMillis(1);
      timeSeries0.getValue((RegularTimePeriod) week0);
      timeSeries0.setMaximumItemCount(1);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2908), 375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Second second0 = new Second();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(second0.DEFAULT_TIME_ZONE);
      second0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (double) 0, true);
      mockDate0.toInstant();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      Class<Integer> class0 = Integer.class;
      RegularTimePeriod.downsize(class0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      Integer integer0 = new Integer(59);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      Instant instant0 = MockInstant.ofEpochSecond(0L, 7L);
      Date date0 = Date.from(instant0);
      Day day0 = new Day(date0, week0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) day0);
      timeSeries1.isEmpty();
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      Week week1 = new Week(1, 1);
      timeSeries0.getItems();
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) week1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (1) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      Minute minute0 = new Minute();
      Second second0 = new Second(1, minute0);
      second0.peg(mockGregorianCalendar0);
      Class<String> class0 = String.class;
      TimeSeries timeSeries1 = new TimeSeries(minute0, class0);
      timeSeries0.addAndOrUpdate(timeSeries1);
      Second second1 = new Second(0, minute0);
      timeSeries1.addOrUpdate((RegularTimePeriod) second0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries1.getTimePeriod((-324));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      Instant instant0 = MockInstant.ofEpochSecond(7L, 2837L);
      Date date0 = Date.from(instant0);
      Day day0 = new Day(date0, week0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      Week week1 = new Week(3242, 3242);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week1, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries1.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      System.setCurrentTimeMillis((-1L));
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "Requires start on or before end.", "Fq", class0);
      timeSeries0.hashCode();
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2241, "Requires start on or before end.", (-1613), 0, (-1613), (-1613), (-1), (-1613), 0, (-1613));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      Class<TimeSeries> class0 = TimeSeries.class;
      RegularTimePeriod.downsize(class0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 0, true);
      mockDate0.toInstant();
      timeSeries0.hashCode();
      timeSeries0.getDataItem((RegularTimePeriod) second0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-867), 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries(regularTimePeriod0, class0);
      TimeSeries timeSeries2 = timeSeries1.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) week0);
      timeSeries2.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries1.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, week0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) day0);
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      week0.peg(mockGregorianCalendar0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) day0);
      // Undeclared exception!
      try { 
        timeSeries1.getValue((-3319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      Class<Hour> class0 = Hour.class;
      RegularTimePeriod.createInstance(class0, mockDate0, day0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-2439.46), true);
      second0.next();
      timeSeries0.getTimePeriod(0);
      timeSeries0.getNextTimePeriod();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(405, 405);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 405, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, week0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries2 = new TimeSeries(mockDate0);
      TimeSeries timeSeries3 = (TimeSeries)timeSeries0.clone();
      timeSeries0.equals(timeSeries3);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 53);
      timeSeries3.add(timeSeriesDataItem0);
      timeSeries1.getValue((RegularTimePeriod) day0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      System.setCurrentTimeMillis(1);
      timeSeries0.getValue((RegularTimePeriod) week0);
      timeSeries0.setMaximumItemCount(1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, week0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries2 = new TimeSeries(mockDate0);
      TimeSeries timeSeries3 = (TimeSeries)timeSeries0.clone();
      timeSeries3.setRangeDescription("org.jfree.data.xy.XIntervalSeries");
      timeSeries0.equals(timeSeries3);
      timeSeries2.createCopy(1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Second second0 = new Second();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(second0.DEFAULT_TIME_ZONE);
      second0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.equals(second0);
      System.setCurrentTimeMillis(0);
      timeSeries0.getValue((RegularTimePeriod) second0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.setNotify(false);
      timeSeries0.getRangeDescription();
      timeSeries0.update((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.removeAgedItems(false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeries timeSeries1 = new TimeSeries(second0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries2 = new TimeSeries(second0, "4cMQ)", "", class0);
      timeSeries2.equals(timeSeries1);
      timeSeries0.getValue((RegularTimePeriod) second0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      MockDate mockDate1 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Day day0 = new Day(mockDate1, timeZone0);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries(day0, "tBHo '@", "tBHo '@", class0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      timeSeries1.getMaximumItemCount();
      mockDate0.setTime((-16115L));
      MockRandom mockRandom0 = new MockRandom((-2072L));
      BigInteger bigInteger0 = new BigInteger(Integer.MAX_VALUE, mockRandom0);
      Day day1 = new Day(mockDate1, day0.DEFAULT_TIME_ZONE);
      Double double0 = new Double(291.0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (Number) double0);
      timeSeries0.add(timeSeriesDataItem0, true);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, week0.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries2 = new TimeSeries(mockDate0);
      Object object0 = timeSeries0.clone();
      timeSeries0.equals(object0);
      timeSeries2.getMaximumItemCount();
      // Undeclared exception!
      try { 
        timeSeries2.createCopy(1073741824, (-299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      MockDate mockDate1 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Day day0 = new Day(mockDate1, timeZone0);
      timeSeries0.add((RegularTimePeriod) day0, 291.0, true);
      Instant instant0 = mockDate0.toInstant();
      timeSeries0.hashCode();
      assertEquals(1, timeSeries0.getItemCount());
      
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries1 = new TimeSeries(instant0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", class0);
      timeSeries0.getNextTimePeriod();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      second0.next();
      TimeSeries timeSeries1 = timeSeries0.createCopy(400, 400);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-248), (-248));
      xYSeries1.addOrUpdate(59, 59);
      TimeSeries timeSeries1 = null;
      try {
        timeSeries1 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-2439.46), true);
      second0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(400, 400);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 400, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneId zoneId0 = zoneOffset0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Day day0 = new Day(mockDate0, timeZone0);
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      timeSeries0.getMaximumItemCount();
      mockDate0.setTime(0);
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      BigInteger bigInteger0 = new BigInteger(59, mockRandom0);
      Day day1 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (Number) 0);
      timeSeries1.add(timeSeriesDataItem0, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      MockDate mockDate1 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Day day0 = new Day(mockDate1, timeZone0);
      timeSeries0.add((RegularTimePeriod) day0, 291.0, true);
      mockDate0.toInstant();
      timeSeries0.hashCode();
      timeSeries0.removeAgedItems(2145L, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, 291.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      MockDate mockDate1 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Day day0 = new Day(mockDate1, timeZone0);
      timeSeries0.add((RegularTimePeriod) day0, 291.0, true);
      mockDate1.toInstant();
      timeSeries0.hashCode();
      Integer integer0 = new Integer(2075);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.next();
      day0.getMiddleMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Float float0 = new Float((-1.0F));
      timeSeries0.add((RegularTimePeriod) day0, (Number) float0);
      regularTimePeriod0.getStart();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.update(regularTimePeriod0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockDate mockDate0 = new MockDate(399L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      RegularTimePeriod.downsize(class0);
      Class<FixedMillisecond> class1 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "D-()t32^", class1);
      timeSeries0.getMaximumItemAge();
      regularTimePeriod0.getEnd();
      fixedMillisecond0.previous();
      regularTimePeriod0.getFirstMillisecond((Calendar) null);
      int int0 = 31;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      // Undeclared exception!
      try { 
        vectorSeriesCollection0.getY(31, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308), false);
      Second second1 = new Second();
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.clear();
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.clear();
      timeSeries0.getMaximumItemCount();
      timeSeries0.createCopy(3142, 3142);
      year0.previous();
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(538, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.setNotify(true);
      timeSeries0.addOrUpdate(regularTimePeriod0, (-175.0));
      timeSeries0.getRangeDescription();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      // Undeclared exception!
      try { 
        jDBCXYDataset0.getX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.getIndex(week0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      mockGregorianCalendar0.after(week0);
      int int0 = 400;
      Second second0 = null;
      try {
        second0 = new Second(400, (Minute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'minute' argument.
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries("~I.)0.e,JM$V", "~I.)0.e,JM$V", "~I.)0.e,JM$V", class0);
      timeSeries0.clear();
      // Undeclared exception!
      try { 
        timeSeries1.setMaximumItemAge((-2482L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      second0.peg(calendar0);
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries1 = new TimeSeries(second0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.clear();
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries(year0, class1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      Class<String> class2 = String.class;
      RegularTimePeriod.downsize(class2);
      RegularTimePeriod.downsize(class1);
      Short short0 = new Short((short) (-1457));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) short0);
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      Millisecond millisecond0 = new Millisecond(mockDate0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      timeSeries1.equals(timeSeries0);
      timeSeries0.setMaximumItemCount(999);
      TimeSeries timeSeries3 = new TimeSeries("", class0);
      timeSeries3.hashCode();
      timeSeries2.getMaximumItemCount();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Second second0 = new Second();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries1 = new TimeSeries(second0, "", ",McT8FAX`&CgqE", class0);
      timeSeries1.setDomainDescription(",McT8FAX`&CgqE");
      timeSeries1.removeAgedItems(true);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      mockGregorianCalendar0.after(week0);
      Minute minute0 = new Minute();
      Second second0 = new Second(53, minute0);
      second0.peg(mockGregorianCalendar0);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries1 = new TimeSeries(week0, class0);
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      timeSeries2.hashCode();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      timeSeries0.getIndex(week0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      mockGregorianCalendar0.after(week0);
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-2439.46), true);
      second0.next();
      timeSeries0.getMaximumItemCount();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 3142);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.clear();
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries(year0, class1);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      // Undeclared exception!
      try { 
        timeSeries1.add(regularTimePeriod0, (Number) integer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-2439.46), true);
      RegularTimePeriod regularTimePeriod0 = second0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (-2439.46));
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.getItems();
      timeSeries0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate(59, 305, 680);
      Week week0 = new Week(mockDate0);
      Year year0 = new Year(mockDate0);
      Week week1 = new Week(305, year0);
      week1.next();
      timeSeries0.getDataItem((RegularTimePeriod) second0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(2, 5);
      timeSeries0.setRangeDescription((String) null);
      serialDate0.getMonth();
      timeSeries0.setNotify(true);
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1, hour0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      timeSeries1.addOrUpdate(regularTimePeriod0, (double) 1900);
      timeSeries0.getRangeDescription();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setNotify(false);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
      timeSeries0.getRangeDescription();
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) day0, (-2439.46), true);
      second0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(3, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.clear();
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries(year0, class1);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.clear();
      Class<DefaultTableModel> class2 = DefaultTableModel.class;
      TimeSeries timeSeries2 = new TimeSeries(year0, class2);
      timeSeries2.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      timeSeries0.getMaximumItemCount();
      mockDate0.setTime(Integer.MAX_VALUE);
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      BigInteger bigInteger0 = new BigInteger(Integer.MAX_VALUE, mockRandom0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, bigInteger0);
      // Undeclared exception!
      try { 
        timeSeries1.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      String string0 = "";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.clear();
      timeSeries0.setRangeDescription("");
      int int0 = (-976);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.clear();
      Class<DefaultTableModel> class1 = DefaultTableModel.class;
      TimeSeries timeSeries1 = new TimeSeries(year0, class1);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      timeSeries0.getMaximumItemCount();
      timeSeries1.createCopy(3142, 3142);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      timeSeries0.getIndex(week0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      mockGregorianCalendar0.after(week0);
      MockDate mockDate0 = new MockDate(100, 53, (-1));
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      timeSeries0.add((RegularTimePeriod) day0, 701.5720474811, true);
      mockDate0.toInstant();
      timeSeries0.hashCode();
      assertEquals("~I.)0.e,JM$V", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      MockDate mockDate1 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Minute minute0 = new Minute();
      Second second0 = new Second(59, minute0);
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 0, 0, 0, 59, 59);
      second0.peg(mockGregorianCalendar0);
      second0.next();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      Class<Day> class0 = Day.class;
      RegularTimePeriod.downsize(class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 59);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      timeSeries0.getIndex(week0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      mockGregorianCalendar0.after(week0);
      Minute minute0 = new Minute();
      Second second0 = new Second(53, minute0);
      second0.peg(mockGregorianCalendar0);
      second0.next();
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries1 = new TimeSeries(week0, class0);
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      timeSeries2.equals(timeSeries1);
      timeSeries1.setMaximumItemCount(1005);
      timeSeries2.hashCode();
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("~I.)0.e,JM$V", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      SerialDate serialDate1 = SerialDate.createInstance(805);
      serialDate0.compare(serialDate1);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      SerialDate.getFollowingDayOfWeek(4, serialDate0);
      String string0 = "k0+ o&>w=e;";
      Second.parseSecond("k0+ o&>w=e;");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.clear();
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries(year0, class1);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.clear();
      Class<DefaultTableModel> class2 = DefaultTableModel.class;
      TimeSeries timeSeries2 = new TimeSeries(year0, class2);
      timeSeries2.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      timeSeries0.getMaximumItemCount();
      // Undeclared exception!
      try { 
        timeSeries1.createCopy(Integer.MAX_VALUE, 3142);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, 0.0);
      timeSeries1.getTimePeriodClass();
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      System.setCurrentTimeMillis(0);
      timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(805);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      timeSeries0.getIndex(week0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-1), 1);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-391), (-1430));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      SerialDate serialDate1 = SerialDate.createInstance(805);
      SerialDate.addDays((-320), serialDate1);
      serialDate0.compare(serialDate1);
      Millisecond millisecond0 = new Millisecond();
      Class<Container> class0 = Container.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate1, class0);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      SerialDate serialDate1 = SerialDate.createInstance(805);
      serialDate1.toString();
      serialDate0.compare(serialDate1);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      timeSeries0.clear();
      timeSeries0.equals(class0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      fixedMillisecond0.next();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(2, 5);
      timeSeries0.setRangeDescription((String) null);
      serialDate0.getMonth();
      MockDate mockDate0 = new MockDate(1073741824, (-1125), 305);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.getDataItem(regularTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries1.delete((-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(646);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries1 = new TimeSeries(serialDate0, class0);
      timeSeries1.equals(serialDate0);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        timeSeries1.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      boolean boolean0 = timeSeries0.equals(second0);
      assertFalse(boolean0);
      
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries1 = new TimeSeries(second0, "Negative 'maximum' argument.", "", class0);
      timeSeries1.clear();
      Class<Object> class1 = Object.class;
      TimeSeries timeSeries2 = new TimeSeries("Negative 'maximum' argument.", class1);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries2);
      int int0 = timeSeries1.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals("Negative 'maximum' argument.", timeSeries1.getDomainDescription());
      
      TimeSeries timeSeries3 = new TimeSeries("Negative 'maximum' argument.");
      TimeSeries timeSeries4 = timeSeries3.createCopy(0, Integer.MAX_VALUE);
      assertEquals(9223372036854775807L, timeSeries4.getMaximumItemAge());
      assertNotSame(timeSeries4, timeSeries3);
      assertTrue(timeSeries4.equals((Object)timeSeries3));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      SerialDate serialDate1 = SerialDate.createInstance(805);
      serialDate0.compare(serialDate1);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      timeSeries0.clear();
      TimeSeries timeSeries1 = new TimeSeries(serialDate0, class0);
      Day.parseDay("1Q4Qvlwa&f5*NlS5f*");
      // Undeclared exception!
      try { 
        timeSeries1.update((RegularTimePeriod) null, (Number) 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      timeSeries0.getIndex(week0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      mockGregorianCalendar0.after(week0);
      Minute minute0 = new Minute();
      Second second0 = new Second(53, minute0);
      second0.peg(mockGregorianCalendar0);
      second0.next();
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries1 = new TimeSeries(week0, class0);
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals("~I.)0.e,JM$V", timeSeries0.getDomainDescription());
      
      timeSeries1.setMaximumItemCount(1005);
      assertNotSame(timeSeries1, timeSeries2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      SerialDate serialDate1 = SerialDate.createInstance(805);
      serialDate0.compare(serialDate1);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      Month month0 = new Month();
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      TimeSeries timeSeries1 = new TimeSeries(serialDate1);
      timeSeries1.equals(serialDate0);
      Class<Object> class1 = Object.class;
      TimeSeries timeSeries2 = new TimeSeries(serialDate1, class1);
      // Undeclared exception!
      try { 
        timeSeries1.delete(3, 252);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      timeSeries0.getIndex(week0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      mockGregorianCalendar0.after(week0);
      Minute minute0 = new Minute();
      Second second0 = new Second(53, minute0);
      second0.peg(mockGregorianCalendar0);
      second0.next();
      Class<Object> class0 = Object.class;
      Class<Quarter> class1 = Quarter.class;
      TimeSeries timeSeries1 = new TimeSeries(week0, class1);
      timeSeries0.addAndOrUpdate(timeSeries1);
      // Undeclared exception!
      try { 
        timeSeries1.setMaximumItemCount((-2643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) month0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      boolean boolean0 = timeSeries0.equals(second0);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(0);
      timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      int int0 = (-1718);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year1);
      int int0 = 90;
      String string0 = "zJ-;nu";
      Integer.getInteger("zJ-;nu");
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries("zJ-;nu", "zJ-;nu", "zJ-;nu", class0);
      timeSeries0.clear();
      TimeSeries timeSeries2 = null;
      try {
        timeSeries2 = new TimeSeries((Comparable) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      SerialDate serialDate1 = SerialDate.createInstance(805);
      serialDate0.compare(serialDate1);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      timeSeries0.clear();
      TimeSeries timeSeries1 = new TimeSeries(serialDate0, class0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      timeSeries0.getMaximumItemCount();
      Day day0 = new Day(serialDate0);
      timeSeries1.add((RegularTimePeriod) day0, 109.767108048331);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
      timeSeries0.createCopy(2, 5);
      timeSeries0.setRangeDescription((String) null);
      serialDate0.getMonth();
      MockDate mockDate0 = new MockDate(1073741824, (-1125), 305);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.getDataItem(regularTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.createCopy((RegularTimePeriod) year0, regularTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      Class<TimeSeriesDataItem> class1 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries("", class1);
      timeSeries1.getItemCount();
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond((-1400), 1731, (-1400), 0, 1731, 3, (-473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1709), 2640);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      year0.next();
      Second second0 = new Second(mockDate0);
      RegularTimePeriod regularTimePeriod0 = second0.next();
      second0.getSerialIndex();
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
      timeSeries0.setMaximumItemAge(3601570881L);
      regularTimePeriod0.next();
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      timeSeries0.equals(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.next();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(minute0, "*LBiiN72<.@ ,rF", "*LBiiN72<.@ ,rF", class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(0L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      MockDate mockDate0 = new MockDate(1893, 11, 1);
      Minute minute0 = new Minute(mockDate0);
      minute0.next();
      Class<String> class0 = String.class;
      TimeSeries timeSeries1 = null;
      try {
        timeSeries1 = new TimeSeries((Comparable) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      boolean boolean0 = false;
      timeSeries0.removeAgedItems(false);
      Class<Month> class0 = Month.class;
      String string0 = "";
      TimeSeries timeSeries1 = null;
      try {
        timeSeries1 = new TimeSeries((Comparable) null, "~I.)0.e,JM$V", "", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      int int0 = 90;
      String string0 = "zJ-;nu";
      Integer.getInteger("zJ-;nu");
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries1 = new TimeSeries(year0, "Negative 'periods' argument.", "A[yi8QFpU^$pCUvLR:", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries1.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      Class<Day> class0 = Day.class;
      SerialDate serialDate1 = SerialDate.createInstance(805);
      serialDate0.compare(serialDate1);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null, class0);
      timeSeries0.clear();
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) millisecond0, (Number) 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year1);
      Integer.getInteger("zJ-;nu");
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timeSeries0.setRangeDescription("zJ-;nu");
      SerialDate serialDate0 = null;
      try {
        serialDate0 = new SpreadsheetDate(90, 90, 90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Integer.getInteger("");
      Minute minute0 = new Minute();
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) null);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timeSeries0.removePropertyChangeListener(synthSpinnerUI0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, (-3108), (-886), 973, 1, 0);
      mockGregorianCalendar0.setFirstDayOfWeek((-2392));
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      minute0.getFirstMillisecond((Calendar) gregorianCalendar0);
      timeSeries0.update(0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2028, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0, week0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        timeSeries1.add((RegularTimePeriod) week0, 1.7976931348623157E308, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.removeAgedItems((-2727L), false);
      // Undeclared exception!
      try { 
        timeSeries0.add(regularTimePeriod0, 1.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(646);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      Integer.getInteger("zJ-;nu");
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      int int0 = (-886);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timeSeries0.removePropertyChangeListener(synthSpinnerUI0);
      int int1 = 3523;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, 90, (-886), (-886), 973, 3523);
      mockGregorianCalendar0.setFirstDayOfWeek(2028);
      regularTimePeriod0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        timeSeries0.update(90, (Number) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      String string0 = "~I.)0.e,JM$V";
      timeSeries0.setDomainDescription("~I.)0.e,JM$V");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.removeAgedItems(false);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate(";lw4q&K[ 6[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }
}
