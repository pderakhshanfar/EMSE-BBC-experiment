/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 16:42:21 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Window;
import java.math.BigInteger;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      timeSeries0.setMaximumItemAge(10);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.removeAgedItems((long) 23, true);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(10L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemCount(59);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(59, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null, class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.setMaximumItemAge(1231L);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1231L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.add(regularTimePeriod0, (double) 23, true);
      timeSeries0.createCopy((RegularTimePeriod) hour0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      timeSeries0.add(regularTimePeriod0, (-600.0), true);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "an_Lh\rQ", "A%s4+fU7 7X,Yu#xz", class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.POSITIVE_INFINITY);
      Long long0 = new Long(0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) long0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      timeSeries0.add(regularTimePeriod0, (double) 23, true);
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 29);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 23, false);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 2829L, true);
      timeSeries0.update(regularTimePeriod0, (Number) hour0.FIRST_HOUR_IN_DAY);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) hour0, 3102.52793726, true);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.add(regularTimePeriod0, (double) 23, true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 519);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) hour0, 3102.52793726, true);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Hour hour1 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour1, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) hour0, 3102.52793726, true);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.setRangeDescription("");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "n", class0);
      assertEquals("", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription("n");
      assertEquals("n", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.getValue(0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update(0, (Number) 59);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-2345.583), (-2345.583));
      Class<Window.Type> class0 = Window.Type.class;
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, (String) null, "", class0);
      timeSeries0.getTimePeriodClass();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.getTimePeriod(0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null, class0);
      String string0 = timeSeries0.getRangeDescription();
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.getNextTimePeriod();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      timeSeries0.getItemCount();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.getIndex(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.add(regularTimePeriod0, (double) 23, true);
      int int0 = timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(74L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("7Xmm7HF&LpnVXWH7DY");
      Minute minute0 = new Minute(date0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      timeSeries0.data = (List) stack0;
      stack0.setSize(59);
      timeSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate(555, 0, 0, 29, 0);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      timeSeries0.getDataItem(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(1221, 1221);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 29);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Second second0 = new Second();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null, class0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Second second0 = new Second();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-1823), (Number) hour0.LAST_HOUR_IN_DAY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("MEo>qLGpPq8W:@\u0005X3z", "MEo>qLGpPq8W:@\u0005X3z", "MEo>qLGpPq8W:@\u0005X3z", class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Second second0 = new Second();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries(second0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((long) 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      timeSeries0.data = (List) stack0;
      stack0.setSize(3460);
      Millisecond millisecond0 = new Millisecond(565, second0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue(23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      timeSeries0.data = (List) stack0;
      stack0.add(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      timeSeries0.data = (List) stack0;
      stack0.add(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(555);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 555, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(44);
      Date date0 = spreadsheetDate0.toDate();
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries(date0, "Null 'values' argument.", "Null 'values' argument.", class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      timeSeries0.data = (List) stack0;
      stack0.add(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-873));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries(hour0, class0);
      // Undeclared exception!
      try { 
        timeSeries0.equals(timeSeries1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("8");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(29, 1307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1823), year0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "org.jfree.data.ComparableObjectSeries", class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1823), 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(29, 346);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(integer0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 2111692253);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(44);
      Date date0 = spreadsheetDate0.toDate();
      Day day0 = new Day(date0, second0.DEFAULT_TIME_ZONE);
      Hour hour0 = new Hour((-1), day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "TimeSeries.update(TimePeriod, Number):  period does not exist.", "TimeSeries.update(TimePeriod, Number):  period does not exist.", (Class) null);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 23, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 1.0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Nov 11 05:38:15 GMT 1910 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-703.82570669), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      MockDate mockDate0 = new MockDate((-526L));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) (-526L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "|R%MS|l*", (String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) timeSeries0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeries cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(74L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("7Xmm7HF&LpnVXWH7DY");
      Minute minute0 = new Minute(date0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(219, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(29, 1307);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.delete((-572), Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) hour0, 3102.52793726, true);
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.removeAgedItems(false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      Hour hour0 = new Hour();
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(555, 10, 29);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Nov 10 10:10:00 GMT 1910 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.getIndex(second0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null, class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(9223372036854775807L, long0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null, class0);
      String string0 = timeSeries0.getDomainDescription();
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "n", class0);
      timeSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("n", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      timeSeries0.add(regularTimePeriod1, 763.1, true);
      timeSeries0.hashCode();
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      timeSeries0.add(regularTimePeriod0, (double) 23, true);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Vector<FixedMillisecond> vector0 = new Vector<FixedMillisecond>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      vector0.add(fixedMillisecond0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "org.jfree.chart.util.SortOrder", (String) null, class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries("Week 46, 1910", (String) null, "s0C/s`|", class0);
      timeSeries0.hashCode();
      assertEquals("s0C/s`|", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertTrue(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals("", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.addOrUpdate((RegularTimePeriod) second0, (-2334.552402333201));
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeries timeSeries1 = new TimeSeries(second0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemAge(59);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(59L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setRangeDescription("");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      TimeSeries timeSeries1 = new TimeSeries("", "/P}qBc.Lh4Xlq`", (String) null, class0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("/P}qBc.Lh4Xlq`", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      boolean boolean0 = timeSeries0.equals(class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "n", class0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals("n", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "3", "org.jfree.data.xy.XYSeriesCollection", class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "java.lang.Class", class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 23, true);
      timeSeries0.add((RegularTimePeriod) hour0, (-2.147483648E9), true);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1823), year0);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1823), 117);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1823), year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(1, (-1823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (-600.0), true);
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.delete((RegularTimePeriod) second0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 519, 10, 19, 0);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "org.jfree.data.time.Day", "org.jfree.data.time.Day", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(53L);
      timeSeries0.removeAgedItems((long) 23, false);
      assertEquals("org.jfree.data.time.Day", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.removeAgedItems((long) 0, true);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.removeAgedItems(405L, true);
      timeSeries0.removeAgedItems(405L, true);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      MockDate mockDate1 = new MockDate(10, 934, (-3742), 10, 92, 3479);
      Hour hour1 = new Hour(mockDate1);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "t(EJu$", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
      RegularTimePeriod regularTimePeriod0 = hour1.next();
      timeSeries0.add(regularTimePeriod0, (-2136.7020761786507), false);
      timeSeries0.setMaximumItemAge(518438L);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "", class0);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 1137, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Week week0 = new Week(2145740560, (-880));
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (-3357.94767153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      timeSeries0.setMaximumItemAge(10);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.removeAgedItems((long) 23, true);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(10L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY);
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null, class0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) 1);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(960);
      Date date0 = spreadsheetDate0.toDate();
      Day day0 = new Day(date0, month0.DEFAULT_TIME_ZONE);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.getValue((RegularTimePeriod) hour0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      timeSeries0.data = (List) stack0;
      stack0.setSize(3460);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.getTimePeriods();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDate mockDate0 = new MockDate(555, 0, 0, 29, 0);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      Week week0 = new Week(mockDate0, hour0.DEFAULT_TIME_ZONE);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1137);
      Date date0 = spreadsheetDate0.toDate();
      Day day0 = new Day(date0);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries(day0, class0);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2859L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(23, 23);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10, 10);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      timeSeries0.add(regularTimePeriod0, (Number) 0, true);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries("", class0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 29, 29, 555);
      Hour hour0 = new Hour(mockDate0);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Mon Jan 01 05:38:15 GMT 1900 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries("", "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null, class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1940);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1940, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1941L), (-1941L));
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0, "Requires start on or before end.", "Requires start on or before end.", class0);
      Class class1 = timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Requires start on or before end.", timeSeries0.getDomainDescription());
      assertNotNull(class1);
      assertEquals("Requires start on or before end.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(integer0, class0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "", class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }
}
