/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:01:52 GMT 2021
 */

package com.google.javascript.jscomp.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.TemplateType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClosureReverseAbstractInterpreter_ESTest extends ClosureReverseAbstractInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(37);
      Node node1 = new Node((-25), (-3133), 1);
      node0.addChildrenToFront(node1);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Dkb2:V1=ZS;#,2]$|Q", node0, templateType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[0] = (JSType) enumType1;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.addChildToFront(node2);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(37);
      Node node1 = Node.newString("H'T@$8;.dX1sR!<");
      node0.addChildrenToFront(node1);
      node0.addChildToFront(node0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter1.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      boolean boolean0 = true;
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      Node node2 = null;
      try {
        node2 = new Node(53, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = null;
      try {
        closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter((CodingConvention) null, jSTypeRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      boolean boolean0 = false;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = null;
      FlowScope flowScope0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome((Node) null, (FlowScope) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(37, 37, 37);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, false);
      FlowScope flowScope2 = semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope1, false);
      FlowScope flowScope3 = closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, flowScope2, false);
      FlowScope flowScope4 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope3, false);
      FlowScope flowScope5 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope4, true);
      assertSame(flowScope4, flowScope5);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(37, 681, (-2961));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node1 = Node.newNumber(0.0, 0, 40);
      closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString("Object#Element");
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, flowScope0, true);
      FlowScope flowScope2 = semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope1, true);
      FlowScope flowScope3 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope2, true);
      FlowScope flowScope4 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope3, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope4, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope3, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope1, true);
      FlowScope flowScope5 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope2, true);
      FlowScope flowScope6 = closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, flowScope2, false);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope6, false);
      FlowScope flowScope7 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope1, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope7, false);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope2, false);
      Node node1 = new Node(2);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, flowScope6, false);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope2, false);
      FlowScope flowScope8 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope5, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope8, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, flowScope4, true);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      closureCodingConvention0.isValidEnumKey("~/m[G");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(0, "~/m[G");
      Node node1 = Node.newNumber((double) 39);
      Node node2 = new Node(28, node0, node1, 56, 0);
      closureCodingConvention0.isValidEnumKey("Object#Key");
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node2, (FlowScope) null, true);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("7Is9{/COu8OUtye3TSZ", "", 0, 1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber(1.0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node1 = new Node(1, node0, (-2535), 32);
      Node node2 = null;
      try {
        node2 = new Node(46, node0, node1, node1, (-8), 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
