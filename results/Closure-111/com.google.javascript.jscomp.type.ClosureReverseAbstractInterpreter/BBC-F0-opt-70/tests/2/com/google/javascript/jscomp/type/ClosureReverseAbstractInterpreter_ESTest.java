/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:20:17 GMT 2021
 */

package com.google.javascript.jscomp.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSlot;
import com.google.javascript.rhino.jstype.StringType;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClosureReverseAbstractInterpreter_ESTest extends ClosureReverseAbstractInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node(33);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString(37, "upe");
      node2.addChildToFront(node0);
      Node node3 = Node.newString(38, "upe");
      node2.addChildrenAfter(node3, node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      node0.addChildToFront(node2);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn((StaticSlot) null).when(flowScope0).getSlot(anyString());
      doReturn("upe").when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node2, flowScope0, true);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
      Node node0 = new Node(33, 33, 33);
      Node node1 = Node.newString(37, "m`j/|p*K/dS@mHe");
      node1.addChildToFront(node0);
      node1.addChildrenAfter(node1, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<StringType> arrayList0 = new ArrayList<StringType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.addChildToBack(node2);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
      Node node0 = new Node(33);
      Node node1 = Node.newString(37, "upTe;V");
      node1.addChildToFront(node0);
      Node node2 = new Node(38, 36, 40);
      node1.addChildrenAfter(node2, node0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 36 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = null;
      try {
        closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) null, (JSTypeRegistry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node(33);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString(37, "upe");
      node2.addChildToFront(node0);
      Node node3 = Node.newString(38, "upe");
      node2.addChildrenAfter(node3, node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn((StaticSlot) null).when(flowScope0).getSlot(anyString());
      doReturn("upe").when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node2, flowScope0, true);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = Node.newString(37, "upe");
      node1.addChildToFront(node0);
      Node node2 = Node.newString(38, "upe");
      node1.addChildrenAfter(node2, node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn((StaticSlot) null).when(flowScope0).getSlot(anyString());
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, flowScope0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
      Node node0 = new Node(12);
      Node node1 = Node.newString(37, "");
      node1.addChildToFront(node0);
      Node node2 = Node.newString("", 0, 52);
      node1.addChildrenAfter(node2, node0);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = Node.newString(37, "upe");
      node1.addChildToFront(node0);
      node1.addChildrenAfter(node1, node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn("upe").when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, flowScope0, true);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = Node.newString(37, "upe");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn("upe").when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope0, true);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node(33);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn("upe").when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope0, true);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      Node node0 = Node.newString(":Cw&^^GiKDxU", 1, (-670));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      FlowScope flowScope0 = mock(FlowScope.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(flowScope0).toString();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, false);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      semanticReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope1, true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
