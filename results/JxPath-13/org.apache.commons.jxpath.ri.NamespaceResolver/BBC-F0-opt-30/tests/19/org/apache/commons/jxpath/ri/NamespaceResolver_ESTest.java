/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 00:36:00 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      namespaceResolver0.registerNamespace("<;{l#sx", "JXPath: found  ");
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getPrefix("JXPath: found  ");
      assertNotNull(string0);
      assertEquals("<;{l#sx", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("", "Cannot register namespaces on a sealed NamespaceResolver");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("");
      Locale locale0 = new Locale("", "", "");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      namespaceResolver1.namespaceMap = hashMap0;
      AbstractMap.SimpleEntry<Object, NamespaceResolver> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, NamespaceResolver>(nodePointer0, namespaceResolver1);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      hashMap0.put((Integer) null, abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(namespaceResolver1, namespaceResolver1.namespaceMap);
      hashMap0.put((Integer) Integer.MIN_VALUE, abstractMap_SimpleImmutableEntry1);
      namespaceResolver1.setNamespaceContextPointer(nodePointer0);
      // Undeclared exception!
      namespaceResolver1.getPrefix("<<unknown namespace>>");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("");
      Locale locale0 = new Locale("", "", "");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      namespaceResolver1.namespaceMap = hashMap0;
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(namespaceResolver1, namespaceResolver1.namespaceMap);
      hashMap0.put((Integer) Integer.MIN_VALUE, abstractMap_SimpleImmutableEntry0);
      namespaceResolver1.setNamespaceContextPointer(nodePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver1.getPrefix("<<unknown namespace>>");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespaceResolver0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("')");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("lmFM-`85Jw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '')'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      namespaceResolver0.reverseMap = hashMap0;
      hashMap0.put("", namespaceResolver0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      namespaceResolver0.namespaceMap = hashMap0;
      Object object0 = new Object();
      hashMap0.putIfAbsent((Integer) null, object0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.seal();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      String string0 = "\\u";
      QName qName0 = new QName(string0, string0);
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "HCf0`'3`D", locale0);
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.setNamespaceContextPointer(nodePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver1.getPrefix("HCf0`'3`D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "");
      Locale locale0 = new Locale("preceding-sibling::", "preceding-sibling::", "preceding-sibling::");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.registerNamespace("", "");
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "");
      Locale locale0 = new Locale("preceding-sibling::", "preceding-sibling::", "preceding-sibling::");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.registerNamespace("", "");
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getPrefix("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "");
      Locale locale0 = new Locale("preceding-sibling::", "preceding-sibling::", "preceding-sibling::");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "bV*].7'ccybR&");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("bV*].7'ccybR&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace((String) null, "<<unknown namespace>>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot register namespaces on a sealed NamespaceResolver
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespaceResolver0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("')");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      VariablePointer variablePointer1 = (VariablePointer)namespaceResolver0.getNamespaceContextPointer();
      assertFalse(variablePointer1.isNode());
  }
}
