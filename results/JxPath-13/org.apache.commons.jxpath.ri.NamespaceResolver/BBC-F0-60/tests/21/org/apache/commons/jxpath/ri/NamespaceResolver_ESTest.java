/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 04:05:10 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("Empty expression context");
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "Empty expression context", locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.registerNamespace("#g=8kG5", "org.apache.commons.jxpath.ri.NamespaceResolver");
      String string0 = namespaceResolver0.getPrefix("org.apache.commons.jxpath.ri.NamespaceResolver");
      assertEquals("#g=8kG5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver1.registerNamespace((String) null, "Factory could not create a child node for path: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Object, AbstractMap.SimpleEntry<Object, Locale>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Locale>>();
      namespaceResolver0.namespaceMap = hashMap0;
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      Locale locale0 = Locale.CANADA;
      AbstractMap.SimpleEntry<Object, Locale> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Locale>(hashMap0, locale0);
      hashMap0.put((Object) null, abstractMap_SimpleEntry0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("<<unknown namespace>>");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespaceResolver0);
      QName qName0 = new QName("", "4}i1Me!8");
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("=1,7^<SdWG3Y4\"t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ':4}i1Me!8'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<List<String>, NamespaceResolver> hashMap0 = new HashMap<List<String>, NamespaceResolver>();
      namespaceResolver0.reverseMap = hashMap0;
      hashMap0.put((List<String>) null, namespaceResolver0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver1.getNamespaceURI("org.apache.commons.jxpath.ri.NamespaceResolver");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      namespaceResolver0.namespaceMap = hashMap0;
      Integer integer0 = new Integer((-506));
      hashMap0.put("", integer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespaceResolver0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) namespaceResolver0);
      QName qName0 = new QName("", "4}i1Me!8");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceResolver0, locale0);
      JXPathContext jXPathContext2 = jXPathContext1.getRelativeContext(nodePointer0);
      assertNotSame(jXPathContext1, jXPathContext2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      namespaceResolver1.reverseMap = hashMap0;
      // Undeclared exception!
      try { 
        namespaceResolver1.getPrefix("D^&+o=evf61");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("", (Integer) null);
      namespaceResolver0.namespaceMap = hashMap0;
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("@", "");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variablePointer0);
      Object object0 = new Object();
      variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, object0);
      BeanPointer beanPointer0 = (BeanPointer)variablePointer0.getImmediateValuePointer();
      namespaceResolver1.pointer = (NodePointer) beanPointer0;
      String string0 = namespaceResolver1.getPrefix((String) null);
      assertNotNull(string0);
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertFalse(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("@", "");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variablePointer0);
      Object object0 = new Object();
      variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, object0);
      BeanPointer beanPointer0 = (BeanPointer)variablePointer0.getImmediateValuePointer();
      namespaceResolver1.pointer = (NodePointer) beanPointer0;
      namespaceResolver1.getPrefix((String) null);
      namespaceResolver1.getPrefix((String) null);
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertFalse(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("DocType");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      String string0 = namespaceResolver0.getNamespaceURI(":\"D");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, namespaceResolver0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      BeanPointer beanPointer0 = (BeanPointer)namespaceResolver0.getNamespaceContextPointer();
      assertEquals(1, beanPointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("..8QEZDiZC", "..8QEZDiZC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot register namespaces on a sealed NamespaceResolver
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      namespaceResolver0.registerNamespace("", "?nTe!M72b");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertNotNull(string0);
      assertEquals("?nTe!M72b", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertNotNull(namespaceResolver1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("@", "");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variablePointer0);
      Object object0 = new Object();
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, object0);
      BeanPointer beanPointer0 = (BeanPointer)variablePointer1.getImmediateValuePointer();
      namespaceResolver1.pointer = (NodePointer) beanPointer0;
      String string0 = namespaceResolver1.getNamespaceURI(":\"D");
      assertNull(string0);
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertFalse(namespaceResolver1.isSealed());
  }
}
