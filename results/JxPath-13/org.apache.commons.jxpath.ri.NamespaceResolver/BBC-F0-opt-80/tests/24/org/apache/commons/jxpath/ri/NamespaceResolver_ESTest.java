/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 05:42:50 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("TnD{#?", "TnD{#?");
      String string0 = namespaceResolver0.getNamespaceURI("TnD{#?");
      assertEquals("TnD{#?", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("%annot register nmespacs#ona sealed NamespaceResolver", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      namespaceResolver0.namespaceMap = hashMap0;
      hashMap0.put("Cannot register namespaces on a sealed NamespaceResolver", namespaceResolver0.namespaceMap);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("<<unknown namespace>>");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) fileSystemHandling0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("org.jdom.DocType");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("org.jdom.DocType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'org.jdom.DocType'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Object, NamespaceResolver> hashMap0 = new HashMap<Object, NamespaceResolver>();
      namespaceResolver0.reverseMap = hashMap0;
      hashMap0.put((Object) null, namespaceResolver0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      namespaceResolver0.namespaceMap = hashMap0;
      hashMap0.put("Cannot register namespaces on a sealed NamespaceResolve", namespaceResolver0.namespaceMap);
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("Cannot register namespaces on a sealed NamespaceResolve");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.seal();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("JXPath: found java.home property ");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver1.getPrefix("wcl'y:my=9!unB()s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      QName qName0 = new QName("tF<Y", "_*ib");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      namespaceResolver0.getPrefix((String) null);
      String string0 = namespaceResolver0.getPrefix("\"mod\"");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("`Dw;JH?n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("E}d%I'e");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace((String) null, "");
      String string0 = namespaceResolver0.getNamespaceURI((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("", "processing-instruction");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot register namespaces on a sealed NamespaceResolver
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("?BneGVX#SF", (String) null);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      String string0 = namespaceResolver0.getPrefix((String) null);
      assertEquals("?BneGVX#SF", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("E}d%I'e");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      VariablePointer variablePointer1 = (VariablePointer)namespaceResolver0.getNamespaceContextPointer();
      assertNull(variablePointer1.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertFalse(namespaceResolver1.isSealed());
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertNotNull(namespaceResolver1);
  }
}
