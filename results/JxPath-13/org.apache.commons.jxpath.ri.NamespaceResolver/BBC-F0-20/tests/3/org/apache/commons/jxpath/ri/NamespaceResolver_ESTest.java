/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:56:45 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dynamic.DynamicPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.registerNamespace("cL)&CqJDZHB:!hM", "<<unknown namespace>>");
      String string0 = namespaceResolver0.getPrefix("<<unknown namespace>>");
      assertNotNull(string0);
      assertEquals("cL)&CqJDZHB:!hM", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("Cannot invoke extension function ", "Cannot invoke extension function ");
      String string0 = namespaceResolver0.getNamespaceURI("Cannot invoke extension function ");
      assertEquals("Cannot invoke extension function ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("LH{qe]'b@0ZfCXx", "G(b[2ZC2c>DZ`bG1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>(hashMap0);
      namespaceResolver0.namespaceMap = hashMap1;
      HashMap<Integer, NamespaceResolver> hashMap2 = new HashMap<Integer, NamespaceResolver>();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>(hashMap2);
      namespaceResolver0.namespaceMap = hashMap3;
      Integer integer0 = new Integer(3273);
      hashMap3.put(integer0, namespaceResolver0.namespaceMap);
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      hashMap3.put((Integer) nodePointer0.WHOLE_COLLECTION, nodePointer0);
      // Undeclared exception!
      namespaceResolver0.getPrefix("\u65E5\u6587");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>(hashMap0);
      namespaceResolver0.namespaceMap = hashMap1;
      HashMap<Integer, NamespaceResolver> hashMap2 = new HashMap<Integer, NamespaceResolver>();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>(hashMap2);
      namespaceResolver0.namespaceMap = hashMap3;
      Integer integer0 = new Integer(3273);
      hashMap3.put(integer0, namespaceResolver0.namespaceMap);
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("\u65E5\u6587");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "/");
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("<<unknown namespace>>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '/'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>(hashMap0);
      namespaceResolver0.namespaceMap = hashMap1;
      HashMap<Integer, NamespaceResolver> hashMap2 = new HashMap<Integer, NamespaceResolver>();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>(hashMap2);
      namespaceResolver0.namespaceMap = hashMap3;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      hashMap3.put((Integer) Integer.MIN_VALUE, "\u65E5\u6587");
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("\u65E5\u6587");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("<<unknown namespace>>", (Integer) Integer.MIN_VALUE);
      namespaceResolver0.namespaceMap = hashMap0;
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("<<unknown namespace>>");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.seal();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, "$<R+gX,|", locale0);
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.setNamespaceContextPointer(nodePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver1.getPrefix(")54S2@'k}jMmw$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, hashMap0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.registerNamespace("", "VHOl=R%@`");
      String string0 = namespaceResolver0.getPrefix("VHOl=R%@`");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, hashMap0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getPrefix("VHOl=R%@`");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      namespaceResolver0.reverseMap = hashMap0;
      String string0 = namespaceResolver0.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      String string0 = namespaceResolver0.getNamespaceURI("node");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, hashMap0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      DynamicPointer dynamicPointer0 = (DynamicPointer)namespaceResolver0.getNamespaceContextPointer();
      assertTrue(dynamicPointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("C%,Slrrh$tr^(.]($K", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot register namespaces on a sealed NamespaceResolver
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      String string0 = namespaceResolver0.getNamespaceURI("\u65E5\u6587");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertNotNull(namespaceResolver1);
      assertFalse(namespaceResolver1.isSealed());
      assertNotSame(namespaceResolver1, namespaceResolver0);
  }
}
