/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 00:21:16 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.function.BiFunction;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.setNamespaceContextPointer((NodePointer) null);
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("=-<ZT", "=-<ZT");
      Integer integer0 = new Integer(57);
      Object object0 = new Object();
      namespaceResolver0.registerNamespace("", "=-<ZT");
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      Locale locale0 = jXPathContext0.getLocale();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      namespaceResolver0.pointer = nodePointer0;
      String string0 = namespaceResolver0.getPrefix("=-<ZT");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace((String) null, "d+R1g!#.*v;v.s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<NamespaceResolver, Integer> hashMap1 = new HashMap<NamespaceResolver, Integer>();
      namespaceResolver0.namespaceMap = hashMap1;
      namespaceResolver0.namespaceMap = hashMap0;
      Integer integer0 = new Integer(45);
      Object object0 = hashMap0.put(integer0, namespaceResolver0);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)hashMap0.put(integer0, integer0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl");
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, object0, (Locale) null);
      namespaceResolver1.pointer = (NodePointer) nullPointer0;
      BiFunction<Object, Object, Locale.LanguageRange> biFunction0 = (BiFunction<Object, Object, Locale.LanguageRange>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Integer) null, namespaceResolver1.pointer, biFunction0);
      hashMap0.put((Integer) Integer.MIN_VALUE, namespaceResolver0.namespaceMap);
      // Undeclared exception!
      namespaceResolver0.getPrefix(" is of unrecognized type and cannot be added");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<NamespaceResolver, Integer> hashMap1 = new HashMap<NamespaceResolver, Integer>();
      namespaceResolver0.namespaceMap = hashMap1;
      namespaceResolver0.namespaceMap = hashMap0;
      Integer integer0 = new Integer(45);
      Object object0 = hashMap0.put(integer0, namespaceResolver0);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)hashMap0.put(integer0, integer0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl");
      hashMap0.put(integer0, namespaceResolver0.namespaceMap);
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, object0, (Locale) null);
      namespaceResolver1.pointer = (NodePointer) nullPointer0;
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix((String) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Object object0 = new Object();
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("The entity reference\"", "The entity reference\"");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      namespaceResolver0.pointer = (NodePointer) variablePointer0;
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("The entity reference\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'The entity reference\":The entity reference\"'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, NamespaceResolver> hashMap0 = new HashMap<String, NamespaceResolver>();
      namespaceResolver0.reverseMap = hashMap0;
      hashMap0.put("<EOF>", namespaceResolver0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("<EOF>");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("7f4Qg!d<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      namespaceResolver0.namespaceMap = hashMap0;
      hashMap0.put((AbstractMap.SimpleEntry<Object, String>) null, namespaceResolver0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.NamespaceResolver cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      // Undeclared exception!
      try { 
        namespaceResolver0.namespaceMap.clone();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.seal();
      assertTrue(namespaceResolver1.isSealed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, NamespaceResolver>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, NamespaceResolver>>();
      namespaceResolver0.reverseMap = hashMap0;
      namespaceResolver1.reverseMap = namespaceResolver0.reverseMap;
      String string0 = namespaceResolver1.getPrefix("e@t!");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("+-<ZT");
      Integer integer0 = new Integer(57);
      Object object0 = new Object();
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      Locale locale0 = jXPathContext0.getLocale();
      namespaceResolver0.registerNamespace(" (", "+-<ZT");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      namespaceResolver0.pointer = nodePointer0;
      String string0 = namespaceResolver0.getPrefix("+-<ZT");
      assertNotNull(string0);
      assertEquals(" (", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<NamespaceResolver, Integer> hashMap1 = new HashMap<NamespaceResolver, Integer>();
      namespaceResolver0.namespaceMap = hashMap1;
      namespaceResolver0.namespaceMap = hashMap0;
      Integer integer0 = new Integer(45);
      Object object0 = hashMap0.put(integer0, namespaceResolver0);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)hashMap0.put(integer0, integer0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl");
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, object0, (Locale) null);
      namespaceResolver1.pointer = (NodePointer) nullPointer0;
      String string0 = namespaceResolver0.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("e@t!");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(45);
      Object object0 = hashMap0.put(integer0, namespaceResolver0);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)hashMap0.put(integer0, integer0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl");
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, object0, (Locale) null);
      namespaceResolver1.pointer = (NodePointer) nullPointer0;
      String string0 = namespaceResolver0.getNamespaceURI("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "=-<ZT");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertNotNull(string0);
      assertEquals("=-<ZT", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(45);
      Object object0 = hashMap0.put(integer0, namespaceResolver0);
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)hashMap0.put(integer0, integer0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl");
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, object0, (Locale) null);
      namespaceResolver1.pointer = (NodePointer) nullPointer0;
      NullPointer nullPointer1 = (NullPointer)namespaceResolver0.getNamespaceContextPointer();
      assertFalse(nullPointer1.isActual());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("<<unknown namespace>>", "<<unknown namespace>>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot register namespaces on a sealed NamespaceResolver
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertFalse(namespaceResolver1.isSealed());
      assertNotNull(namespaceResolver1);
      assertNotSame(namespaceResolver1, namespaceResolver0);
  }
}
