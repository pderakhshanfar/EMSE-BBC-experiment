/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:42:47 GMT 2021
 */

package org.apache.commons.jxpath.ri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.seal();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      namespaceResolver0.reverseMap = hashMap0;
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace("", "org.apache.commons.jxpath.ri.NamespaceResolver");
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertEquals("org.apache.commons.jxpath.ri.NamespaceResolver", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace(")$1\", }", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      HashMap<NamespaceResolver, Object> hashMap0 = new HashMap<NamespaceResolver, Object>();
      namespaceResolver1.namespaceMap = hashMap0;
      namespaceResolver1.setNamespaceContextPointer(variablePointer0);
      hashMap0.put(namespaceResolver0, namespaceResolver1.namespaceMap);
      // Undeclared exception!
      try { 
        namespaceResolver1.getPrefix("<<unknown namespace>>");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("]", "]");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("-m^Dn)8*r4GvG1aor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ']:]'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      namespaceResolver0.reverseMap = hashMap0;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("wRkZ%", "Cannot change locale using the 'lang' attribute");
      hashMap0.put("Ch`a{b,SS/O4,f9Q", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("Ch`a{b,SS/O4,f9Q");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.namespaceMap = null;
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      namespaceResolver0.namespaceMap = hashMap0;
      Integer integer0 = new Integer(30);
      hashMap0.put("", integer0);
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      boolean boolean0 = namespaceResolver0.isSealed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.NamespaceResolver", "U;;T=\"giHwj&D[4");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "DocType");
      JXPathContext jXPathContext1 = jXPathContext0.getRelativeContext(nodePointer0);
      JXPathContext jXPathContext2 = JXPathContext.newContext(jXPathContext1, (Object) "Expression context [");
      assertNotSame(jXPathContext2, jXPathContext1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Integer integer0 = new Integer(1);
      QName qName0 = new QName("*Hb^0}(]?VGSdS");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      namespaceResolver1.setNamespaceContextPointer(nodePointer0);
      // Undeclared exception!
      try { 
        namespaceResolver1.getPrefix("<<unknown namespace>>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("", "VwmF");
      Locale locale0 = Locale.KOREAN;
      Integer integer0 = new Integer(1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.registerNamespace("<<unknown namespace>>", "");
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("<<unknown namespace>>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("Cannot register namespaces on a sealed NamespaceResolver", "");
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      namespaceResolver0.getPrefix("");
      String string0 = namespaceResolver0.getPrefix("g");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      String string0 = namespaceResolver1.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("]", "]");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      namespaceResolver0.setNamespaceContextPointer(variablePointer0);
      String string0 = namespaceResolver0.getNamespaceURI("CS_8+iyRsJHUq");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      Pointer pointer0 = namespaceResolver1.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      QName qName0 = new QName("1l");
      Locale locale0 = new Locale("1l", "1l", "1l");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      namespaceResolver0.setNamespaceContextPointer(nodePointer0);
      BeanPointer beanPointer0 = (BeanPointer)namespaceResolver0.getNamespaceContextPointer();
      assertNull(beanPointer0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      namespaceResolver0.seal();
      // Undeclared exception!
      try { 
        namespaceResolver0.registerNamespace("Cannot determine the length of the indexed property ", "\"K39\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot register namespaces on a sealed NamespaceResolver
         //
         verifyException("org.apache.commons.jxpath.ri.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.registerNamespace((String) null, "");
      String string0 = namespaceResolver0.getNamespaceURI((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = (NamespaceResolver)namespaceResolver0.clone();
      assertNotSame(namespaceResolver1, namespaceResolver0);
      assertFalse(namespaceResolver1.isSealed());
      assertNotNull(namespaceResolver1);
  }
}
