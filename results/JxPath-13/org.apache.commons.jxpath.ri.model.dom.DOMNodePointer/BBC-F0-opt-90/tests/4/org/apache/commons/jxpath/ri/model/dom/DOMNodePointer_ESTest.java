/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 06:34:35 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAreaElementImpl;
import org.apache.html.dom.HTMLBaseFontElementImpl;
import org.apache.html.dom.HTMLButtonElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFieldSetElementImpl;
import org.apache.html.dom.HTMLLabelElementImpl;
import org.apache.html.dom.HTMLLinkElementImpl;
import org.apache.html.dom.HTMLMetaElementImpl;
import org.apache.html.dom.HTMLParamElementImpl;
import org.apache.html.dom.HTMLSelectElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLTableRowElementImpl;
import org.apache.html.dom.HTMLTitleElementImpl;
import org.apache.html.dom.HTMLUListElementImpl;
import org.apache.wml.dom.WMLBrElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLEmElementImpl;
import org.apache.wml.dom.WMLImgElementImpl;
import org.apache.wml.dom.WMLInputElementImpl;
import org.apache.wml.dom.WMLNoopElementImpl;
import org.apache.wml.dom.WMLOptgroupElementImpl;
import org.apache.wml.dom.WMLPrevElementImpl;
import org.apache.wml.dom.WMLUElementImpl;
import org.apache.wml.dom.WMLWmlElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CDATASectionImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DOMInputSourceImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.ElementDefinitionImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.PSVIAttrNSImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.apache.xerces.parsers.DOMASBuilderImpl;
import org.apache.xerces.parsers.XMLGrammarCachingConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.EntityReference;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLCollection;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "rules", "rules", "rules");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl(documentTypeImpl0);
      assertNotNull(pSVIDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLInputElementImpl wMLInputElementImpl0 = new WMLInputElementImpl(wMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNotNull(wMLInputElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, wMLInputElementImpl0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertEquals(1, nodePointer0.getLength());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, ",aA?gTnAS-1'PLc");
      assertNotNull(hTMLLabelElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "b,leP4");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(",AA?GTNAS-1'PLC", qName0.getName());
      assertEquals(",AA?GTNAS-1'PLC", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      assertNotNull(attrNSImpl0);
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer1, qName0, attrNSImpl0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(",AA?GTNAS-1'PLC", qName0.getName());
      assertEquals(",AA?GTNAS-1'PLC", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      
      int int0 = dOMNodePointer0.compareChildNodePointers(nodePointer0, dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(",AA?GTNAS-1'PLC", qName0.getName());
      assertEquals(",AA?GTNAS-1'PLC", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(nodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer1);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DocumentFragment documentFragment0 = hTMLDocumentImpl0.createDocumentFragment();
      assertNotNull(documentFragment0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragment0, (Locale) null);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) documentFragment0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, "/processing-instruction('");
      assertNotNull(nullPointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLUListElementImpl hTMLUListElementImpl0 = new HTMLUListElementImpl(hTMLDocumentImpl0, ":#]Bv_~OI");
      assertNotNull(hTMLUListElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLUListElementImpl0, locale0, (String) null);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("", qName0.getPrefix());
      assertEquals("#]BV_~OI", qName0.getName());
      assertEquals(":#]BV_~OI", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "Z?'/[");
      assertNotNull(hTMLLabelElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "Z?'/[");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLLabelElementImpl0);
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLOptgroupElementImpl wMLOptgroupElementImpl0 = new WMLOptgroupElementImpl(wMLDocumentImpl0, "\"substring-after\"");
      assertNotNull(wMLOptgroupElementImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, wMLOptgroupElementImpl0);
      assertNotNull(dOMNodePointer2);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      
      String string0 = dOMNodePointer2.toString();
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isRoot());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertEquals("id('Z?&apos;/[')/Z?'/[[1]/\"substring-after\"[1]", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLCollection hTMLCollection0 = hTMLDocumentImpl0.getForms();
      assertNotNull(hTMLCollection0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("o", "o", "<<unknown namespace>>");
      assertNotNull(documentType0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentType0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(wMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(2);
      assertNotNull(symbolTable0);
      
      XMLGrammarCachingConfiguration xMLGrammarCachingConfiguration0 = new XMLGrammarCachingConfiguration(symbolTable0);
      assertNotNull(xMLGrammarCachingConfiguration0);
      
      DOMASBuilderImpl dOMASBuilderImpl0 = new DOMASBuilderImpl(xMLGrammarCachingConfiguration0);
      assertNotNull(dOMASBuilderImpl0);
      
      Document document0 = dOMASBuilderImpl0.parseURI("http://www.w3.org/XML/1998/namespace");
      assertNotNull(document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(document0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(dOMNodePointer0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl(hTMLDocumentImpl0, "BIOb&#=");
      assertNotNull(hTMLParamElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      dOMNodePointer0.setValue(hTMLParamElementImpl0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      assertNotNull(hTMLTitleElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("\u0001X[/5,HC+\"", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\u0001X[/5,HC+\"", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("\u0001X[/5,HC+\"", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\u0001X[/5,HC+\"", qName0.getName());
      assertEquals("\u0001X[/5,HC+\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("\u0001X[/5,HC+\"", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\u0001X[/5,HC+\"", qName0.getName());
      assertEquals("\u0001X[/5,HC+\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "xml:space");
      assertNotNull(dOMNodePointer0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = dOMNodePointer0.isLanguage("");
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "qRk", "HTMLFrameSetElementImpl", "BASE");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) pSVIElementNSImpl0);
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("qRk", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      Element element0 = pSVIDocumentImpl0.createElementNS("OBJECT", "OBJECT");
      assertNotNull(element0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("OBJECT", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      WMLPrevElementImpl wMLPrevElementImpl0 = new WMLPrevElementImpl(wMLDocumentImpl0, "");
      assertNotNull(wMLPrevElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string0 = DOMNodePointer.getLocalName(wMLPrevElementImpl0);
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getLanguage();
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "Unknown namespace prefix: ");
      assertNotNull(dOMNodePointer0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertNull(object0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      assertNotNull(documentImpl0);
      
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~ny");
      assertNotNull(cDATASection0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      assertNotNull(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertNotNull(object0);
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertSame(cDATASection0, object0);
      assertSame(object0, cDATASection0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getBaseValue();
      assertNull(object0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(nodeNameTest0, true, dOMNodePointer0);
      assertNotNull(nodeIterator0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertNotNull(processingInstructionTest0);
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) processingInstructionTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      assertNotNull(hTMLTitleElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, (String) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.NodeNameTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      assertNotNull(documentImpl0);
      
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~n-y");
      assertNotNull(cDATASection0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      assertNotNull(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: <<unknown namespace>>
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      HTMLUListElementImpl hTMLUListElementImpl0 = new HTMLUListElementImpl(hTMLDocumentImpl0, "@j}QyEO#wo;5o");
      assertNotNull(hTMLUListElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLUListElementImpl0, locale0, "^s3[z04?w");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals("@J}QYEO#WO;5O", qName0.getName());
      assertEquals("@J}QYEO#WO;5O", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals("@J}QYEO#WO;5O", qName0.getName());
      assertEquals("@J}QYEO#WO;5O", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '@J}QYEO#WO;5O'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(documentImpl0, "&`9veaqC*AgveXP");
      assertNotNull(elementDefinitionImpl0);
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue("]2>P=?hDr8;B>J,3Z7");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "%g!4)");
      assertNotNull(dOMNodePointer0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      hTMLDocumentImpl0.setReadOnly(true, false);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "xml:space");
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "@J}QYEO#WO;5O");
      assertNotNull(dOMNodePointer0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage("org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000014");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "xml:space");
      assertNotNull(dOMNodePointer0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      WMLEmElementImpl wMLEmElementImpl0 = new WMLEmElementImpl((WMLDocumentImpl) null, "Factory could not create a child node for path: ");
      assertNotNull(wMLEmElementImpl0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix(wMLEmElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      hTMLDocumentImpl0.setReadOnly(true, true);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) deferredDocumentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      hTMLDocumentImpl0.setReadOnly(true, true);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("vpm");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "xml:space");
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      int int0 = deferredDocumentImpl0.setDeferredAttribute(3, "{jl&0$N QbI", "after: '", "{jl&0$N QbI", true, false, (Object) "after: '");
      assertEquals(0, int0);
      
      Locale locale0 = new Locale("F}qfdJ+'<yg", "{jl&0$N QbI");
      assertNotNull(locale0);
      assertEquals("{JL&0$N QBI", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("f}qfdj+'<yg", locale0.getLanguage());
      assertEquals("f}qfdj+'<yg_{JL&0$N QBI", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "after: '");
      assertNotNull(dOMNodePointer0);
      assertEquals("{JL&0$N QBI", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("f}qfdj+'<yg", locale0.getLanguage());
      assertEquals("f}qfdj+'<yg_{JL&0$N QBI", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("&quot;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type: 20
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      int int0 = deferredDocumentImpl0.setDeferredAttribute(3, "{jl&0$N QbI", "after: '", "{jl&0$N QbI", true, true, (Object) "after: '");
      assertEquals(0, int0);
      
      Locale locale0 = new Locale("F}qfdJ+'<yg", "{jl&0$N QbI");
      assertNotNull(locale0);
      assertEquals("f}qfdj+'<yg", locale0.getLanguage());
      assertEquals("f}qfdj+'<yg_{JL&0$N QBI", locale0.toString());
      assertEquals("{JL&0$N QBI", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "after: '");
      assertNotNull(dOMNodePointer0);
      assertEquals("f}qfdj+'<yg", locale0.getLanguage());
      assertEquals("f}qfdj+'<yg_{JL&0$N QBI", locale0.toString());
      assertEquals("{JL&0$N QBI", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("{jl&0$N QbI");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DeferredDocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      hTMLDocumentImpl0.setReadOnly(true, true);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      QName qName0 = new QName(")42c&,],");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals(")42c&,],", qName0.toString());
      assertEquals(")42c&,],", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals(")42c&,],", qName0.toString());
      assertEquals(")42c&,],", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, (Node) null);
      assertNotNull(dOMNodePointer0);
      assertNull(qName0.getPrefix());
      assertEquals(")42c&,],", qName0.toString());
      assertEquals(")42c&,],", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("IK5n6", "IK5n6", "U~B]@:n_R\"");
      assertNotNull(documentType0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentType0, locale0, "IK5n6");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentTypeImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "Unknown namespace prefix: ");
      assertNotNull(dOMNodePointer0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getLocalName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      hTMLDocumentImpl0.setReadOnly(true, true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "xml:space");
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      WMLUElementImpl wMLUElementImpl0 = new WMLUElementImpl((WMLDocumentImpl) null, "Y<CMGg1Q56ILALMbTp");
      assertNotNull(wMLUElementImpl0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.findEnclosingAttribute(wMLUElementImpl0, "HcQ9<;yVadf3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      assertNotNull(documentImpl0);
      
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~ny");
      assertNotNull(cDATASection0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      assertNotNull(dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("<<unknown namespace>>:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.util.TypeUtils");
      assertNotNull(hTMLLabelElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "org.apache.commons.jxpath.util.TypeUtils");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("ORG.APACHE.COMMONS.JXPATH.UTIL.TYPEUTILS", qName0.getName());
      assertEquals("ORG.APACHE.COMMONS.JXPATH.UTIL.TYPEUTILS", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "", "org.apache.commons.jxpath.util.TypeUtils");
      assertNotNull(pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) pSVIElementNSImpl0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(pSVIElementNSImpl0, locale0, (String) null);
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.Parser");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.Parser", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.Parser", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("org.apache.commons.jxpath.ri.Parser", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.Parser", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Text text0 = hTMLDocumentImpl0.createTextNode("Gq-/sy");
      assertNotNull(text0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, text0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("org.apache.commons.jxpath.ri.Parser", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.Parser", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: org.apache.commons.jxpath.ri.Parser
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "qRk");
      assertNotNull(hTMLTitleElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = new Locale("U-{,|Cc", "U-{,|Cc", "qRk");
      assertNotNull(locale0);
      assertEquals("U-{,|CC", locale0.getCountry());
      assertEquals("u-{,|cc_U-{,|CC_qRk", locale0.toString());
      assertEquals("qRk", locale0.getVariant());
      assertEquals("u-{,|cc", locale0.getLanguage());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("qRk");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("qRk", qName0.toString());
      assertEquals("qRk", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("qRk", qName0.toString());
      assertEquals("qRk", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0, "U-{,|Cc");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("U-{,|CC", locale0.getCountry());
      assertEquals("u-{,|cc_U-{,|CC_qRk", locale0.toString());
      assertEquals("qRk", locale0.getVariant());
      assertEquals("u-{,|cc", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'qRk'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QName qName0 = new QName(") D$j|I7:");
      assertNotNull(qName0);
      assertEquals(") D$j|I7", qName0.getPrefix());
      assertEquals(") D$j|I7:", qName0.toString());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, ") D$j|I7:", locale0);
      assertNotNull(beanPointer0);
      assertEquals(") D$j|I7", qName0.getPrefix());
      assertEquals(") D$j|I7:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      assertNotNull(coreDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "/", "<<unknown namespace>>", "<<unknown namespace>>");
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      WMLNoopElementImpl wMLNoopElementImpl0 = new WMLNoopElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
      assertNotNull(wMLNoopElementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, wMLNoopElementImpl0);
      assertNotNull(dOMNodePointer0);
      assertEquals(") D$j|I7", qName0.getPrefix());
      assertEquals(") D$j|I7:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(beanPointer0, dOMNodePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      assertNotNull(hTMLTitleElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("\u0001X[/5,HC+\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\u0001X[/5,HC+\"", qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("\u0001X[/5,HC+\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\u0001X[/5,HC+\"", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator((NodeTest) null, true, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: \u0001X[/5,HC+\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1453555988));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1453555988), nodeTypeTest0.getNodeType());
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertNotNull(variablePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeTypeTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      QName qName0 = new QName("noshade");
      assertNotNull(qName0);
      assertEquals("noshade", qName0.getName());
      assertEquals("noshade", qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "noshade", locale0);
      assertNotNull(beanPointer0);
      assertEquals("noshade", qName0.getName());
      assertEquals("noshade", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      XMLGrammarCachingConfiguration xMLGrammarCachingConfiguration0 = new XMLGrammarCachingConfiguration();
      assertNotNull(xMLGrammarCachingConfiguration0);
      
      DOMASBuilderImpl dOMASBuilderImpl0 = new DOMASBuilderImpl(xMLGrammarCachingConfiguration0);
      assertNotNull(dOMASBuilderImpl0);
      
      DOMInputSourceImpl dOMInputSourceImpl0 = new DOMInputSourceImpl("<<unknown namespace>>", "<<unknown namespace>>", (String) null, "noshade", "noshade");
      assertNotNull(dOMInputSourceImpl0);
      
      DocumentImpl documentImpl0 = (DocumentImpl)dOMASBuilderImpl0.parse(dOMInputSourceImpl0);
      assertNotNull(documentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, documentImpl0);
      assertNotNull(dOMNodePointer0);
      assertEquals("noshade", qName0.getName());
      assertEquals("noshade", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot remove root DOM node");
      assertNotNull(processingInstructionTest0);
      assertEquals("Cannot remove root DOM node", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, false, beanPointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
      assertNotNull(dOMNodePointer0);
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.attributeIterator(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "R^");
      assertNotNull(hTMLTitleElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("R_", "R^");
      assertNotNull(qName0);
      assertEquals("R_", qName0.getPrefix());
      assertEquals("R^", qName0.getName());
      assertEquals("R_:R^", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("R_", qName0.getPrefix());
      assertEquals("R^", qName0.getName());
      assertEquals("R_:R^", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      variablePointer0.setIndex(1149);
      assertEquals("R_", qName0.getPrefix());
      assertEquals("R^", qName0.getName());
      assertEquals("R_:R^", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(1149, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLTitleElementImpl0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("R_", qName0.getPrefix());
      assertEquals("R^", qName0.getName());
      assertEquals("R_:R^", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(1149, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.asPath();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'R_:R^'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, (String) null);
      assertNotNull(commentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNotNull(object0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      assertNotNull(hTMLLabelElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "xmlns");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("XMLNS", qName0.getName());
      assertEquals("XMLNS", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertNotNull(dOMAttributePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("XMLNS", qName0.getName());
      assertEquals("XMLNS", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(dOMAttributePointer0.isActual());
      assertTrue(dOMAttributePointer0.isNode());
      assertFalse(dOMAttributePointer0.isRoot());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertFalse(dOMAttributePointer0.isCollection());
      assertFalse(dOMAttributePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLLabelElementImpl0);
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNotNull(hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLAreaElementImpl0);
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(documentImpl0, "xml");
      assertNotNull(elementDefinitionImpl0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) elementDefinitionImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.ElementDefinitionImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "lB3gcW:N");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      String string0 = DOMNodePointer.getLocalName(documentTypeImpl0);
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      Attr attr0 = pSVIDocumentImpl0.createAttributeNS("/", "/", "/");
      assertNotNull(attr0);
      
      String string0 = DOMNodePointer.getLocalName(attr0);
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "Y");
      assertNotNull(hTMLAreaElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      String string0 = DOMNodePointer.getPrefix(hTMLAreaElementImpl0);
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      Element element0 = pSVIDocumentImpl0.createElementNS("^|:IHdaN", "^|:IHdaN", "");
      assertNotNull(element0);
      
      String string0 = DOMNodePointer.getPrefix(element0);
      assertNotNull(string0);
      assertEquals("^|", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLLinkElementImpl hTMLLinkElementImpl0 = new HTMLLinkElementImpl(hTMLDocumentImpl0, ":w$lWJc%]Ls8dm/");
      assertNotNull(hTMLLinkElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      String string0 = DOMNodePointer.getPrefix(hTMLLinkElementImpl0);
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DocumentFragment documentFragment0 = hTMLDocumentImpl0.createDocumentFragment();
      assertNotNull(documentFragment0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragment0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.toString();
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      assertNotNull(pSVIDocumentImpl0);
      
      EntityImpl entityImpl0 = new EntityImpl(pSVIDocumentImpl0, "]2>P=?hDr8;B>J,3Z7");
      assertNotNull(entityImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, entityImpl0);
      assertNotNull(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.toString();
      assertNotNull(string0);
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Attr attr0 = hTMLDocumentImpl0.createAttribute("org.apache.wml.dom.WMLOptgroupElementImpl");
      assertNotNull(attr0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.toString();
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "xml:space");
      assertNotNull(dOMNodePointer0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.toString();
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("id('xml:space')", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "\u0001x[/5,hc+\"");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "Z?'/[");
      assertNotNull(hTMLLabelElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("IK5n6", "IK5n6", "U~B]@:n_R\"");
      assertNotNull(documentType0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentType0, locale0, (String) null);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("xmlns");
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "Z?'/[");
      assertNotNull(hTMLLabelElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "Z?'/[");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = dOMNodePointer0.getNamespaceURI("xml");
      assertNotNull(string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      assertNotNull(documentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(documentImpl0, "~ny");
      assertNotNull(documentTypeImpl0);
      
      QName qName0 = new QName("<<unknown namespace>>");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "x C");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("x C", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      Element element0 = wMLDocumentImpl0.createElementNS((String) null, "http://www.w3.org/XML/1998/namespace", "jb+%");
      assertNotNull(element0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) element0, (NodeTest) nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("<<unknown namespace>>", nodeNameTest0.toString());
      assertEquals("x C", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      assertNotNull(documentImpl0);
      
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~ny");
      assertNotNull(cDATASection0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      assertNotNull(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = new QName("<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:http://www.w3.org/XML/1998/namespace", qName0.toString());
      
      NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
      assertNotNull(nodeIterator0);
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Text text0 = deferredDocumentImpl0.createTextNode("e[");
      assertNotNull(text0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getBaseValue();
      assertNotNull(object0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertSame(text0, object0);
      assertSame(object0, text0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      assertNotNull(hTMLTitleElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      hTMLTitleElementImpl0.setTextContent("^s3[z04?w");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "r,_iUq3]CvB#QBs:{");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentTypeImpl0);
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "rules", "rules", "rules");
      assertNotNull(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl(documentTypeImpl0);
      assertNotNull(pSVIDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, documentTypeImpl0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      
      int int0 = dOMNodePointer0.compareChildNodePointers(nodePointer0, dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Jm$}8");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      assertNotNull(attrNSImpl0);
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, attrNSImpl0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, ",aA?gTnAS-1'PLc");
      assertNotNull(hTMLLabelElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "b,leP4");
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNotNull(qName0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertEquals(",AA?GTNAS-1'PLC", qName0.toString());
      assertEquals(",AA?GTNAS-1'PLC", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      assertNotNull(attrNSImpl0);
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, attrNSImpl0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertEquals(",AA?GTNAS-1'PLC", qName0.toString());
      assertEquals(",AA?GTNAS-1'PLC", qName0.getName());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      
      int int0 = dOMNodePointer0.compareChildNodePointers(nodePointer0, dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertEquals(",AA?GTNAS-1'PLC", qName0.toString());
      assertEquals(",AA?GTNAS-1'PLC", qName0.getName());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isRoot());
      assertTrue(nodePointer0.isActual());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      assertNotNull(attrNSImpl0);
      
      QName qName0 = new QName(".uUB\"rzn|D}>n");
      assertNotNull(qName0);
      assertEquals(".uUB\"rzn|D}>n", qName0.toString());
      assertEquals(".uUB\"rzn|D}>n", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(".uUB\"rzn|D}>n", qName0.toString());
      assertEquals(".uUB\"rzn|D}>n", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "vpm", (String) null, "Z#`NpFTiA)b.\"vb");
      assertNotNull(pSVIAttrNSImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, pSVIAttrNSImpl0);
      assertNotNull(nodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(".uUB\"rzn|D}>n", qName0.toString());
      assertEquals(".uUB\"rzn|D}>n", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(nodePointer0.isNode());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertFalse(nodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0, "')");
      assertNotNull(dOMNodePointer0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      
      // Undeclared exception!
      try { 
        nodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      HTMLCollection hTMLCollection0 = hTMLDocumentImpl0.getForms();
      assertNotNull(hTMLCollection0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "");
      assertNotNull(dOMNodePointer1);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EntityImpl entityImpl0 = new EntityImpl((CoreDocumentImpl) null, ".[7");
      assertNotNull(entityImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getPointerByID((JXPathContext) null, "org.apache.commons.jxpath.ri.parser.XPathParserConstants");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "@2=xd85wY[GRNn", (String) null);
      assertNotNull(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNotNull(object0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNotNull(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "r,_iUq3]CvBhQBs:?", "r,_iUq3]CvBhQBs:?");
      assertNotNull(processingInstructionImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertNotNull(dOMNodePointer0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = dOMNodePointer0.getValue();
      assertNotNull(object0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("r,_iUq3]CvBhQBs:?", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      assertNotNull(documentImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = (CDATASectionImpl)documentImpl0.createCDATASection(" ny");
      assertNotNull(cDATASectionImpl0);
      
      cDATASectionImpl0.replaceData((String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASectionImpl0);
      assertNotNull(dOMNodePointer0);
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = (String)dOMNodePointer0.getValue();
      assertNotNull(string0);
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1377);
      XMLGrammarCachingConfiguration xMLGrammarCachingConfiguration0 = new XMLGrammarCachingConfiguration(symbolTable0);
      DOMASBuilderImpl dOMASBuilderImpl0 = new DOMASBuilderImpl(xMLGrammarCachingConfiguration0);
      Document document0 = dOMASBuilderImpl0.parseURI("http://www.w3.org/XML/1998/namespace");
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(document0, locale0, "http://www.w3.org/XML/1998/namespace");
      Object object0 = dOMNodePointer0.getValue();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, false);
      CommentImpl commentImpl0 = new CommentImpl(documentImpl0, ";");
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(";", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "xmlns");
      QName qName0 = dOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLTitleElementImpl0);
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Attr attr0 = hTMLDocumentImpl0.createAttribute("org.apache.wml.dom.WMLOptgroupElementImpl");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0);
      boolean boolean0 = dOMNodePointer0.equals("uH;p[I2|j+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      Text text0 = deferredDocumentImpl0.createTextNode("ARkkkz3yh$f1g\"1w");
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0, "ARkkkz3yh$f1g\"1w");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
      QName qName0 = new QName("Z?'/[");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path id('ARkkkz3yh$f1g&quot;1w')/@Z?'/[, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ROOT;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      Element element0 = wMLDocumentImpl0.createElementNS("\"!=\"", "http://www.w3.org/XML/1998/namespace", "Unknown namespace prefix: ");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "<<unknown namespace>>");
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
      String string0 = dOMNodePointer1.toString();
      assertEquals("id('<<unknown namespace>>')/BODY[1]", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "?~BZ4:LVomI<8#XKJV.");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTFoot();
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/TFOOT[1]", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "/", "/", "E\"d\"7&F`W5L");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName((String) null, "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, (String) null);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, wMLWmlElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, wMLWmlElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Text text0 = hTMLDocumentImpl0.createTextNode("=ln&(xb<nn");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      String string0 = dOMNodePointer1.toString();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, false);
      CommentImpl commentImpl0 = new CommentImpl(documentImpl0, ";");
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "PE6IIS<HHQT[3]", "aEBkDhsF(+-znZ");
      Locale locale0 = new Locale("aEBkDhsF(+-znZ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/processing-instruction('PE6IIS<HHQT[3]')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      EntityImpl entityImpl0 = new EntityImpl(pSVIDocumentImpl0, "]2>P=?hDr8;B>J,3Z7");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, entityImpl0);
      QName qName0 = dOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@null, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~ny");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("org.apache.commons.jxpath.ri.Parser");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Text text0 = hTMLDocumentImpl0.createTextNode("Gq-/sy");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, text0);
      String string0 = dOMNodePointer0.toString();
      assertEquals("$org.apache.commons.jxpath.ri.Parser/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = new Locale("Rk", "Rk", "Rk");
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      EntityReference entityReference0 = pSVIDocumentImpl0.createEntityReference("preserve");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReference0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "/", "/", "E\"d\"7&F`W5L");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName((String) null, "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, (String) null);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, wMLWmlElementImpl0);
      String string0 = nodePointer0.toString();
      assertEquals("$http://www.w3.org/2000/xmlns/", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      Element element0 = wMLDocumentImpl0.createElementNS("R^", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0, "hreflang");
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      QName qName0 = new QName(") D$j|I7:");
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ") D$j|I7:", locale0);
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "/", "<<unknown namespace>>", "<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLNoopElementImpl wMLNoopElementImpl0 = new WMLNoopElementImpl(wMLDocumentImpl0, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, wMLNoopElementImpl0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentTypeImpl0);
      dOMNodePointer1.remove();
      assertFalse(dOMNodePointer1.isCollection());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "xmlns");
      QName qName0 = dOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("XMLNS", qName0.getName());
      assertEquals("XMLNS", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLTitleElementImpl0);
      QName qName0 = new QName("]2>P=?hDr8;B>J,3Z7", "columns");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: ]2>P=?hDr8;B>J,3Z7
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "xml:space");
      QName qName0 = dOMNodePointer0.getName();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLAreaElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) dOMNodePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('xml:space')
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, (String) null);
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      dOMNodePointer0.setValue(dOMNodePointer0);
      assertEquals(1, dOMNodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.forLanguageTag("~ny");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "~ny");
      dOMNodePointer0.setValue((Object) null);
      assertFalse(dOMNodePointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentFragment documentFragment0 = hTMLDocumentImpl0.createDocumentFragment();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragment0, (Locale) null);
      dOMNodePointer0.setValue(documentFragment0);
      assertTrue(dOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getLinks();
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue("id('<<unknown namespace>>')/BODY[1]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~ny");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      Locale locale0 = new Locale("9P -_Oy/Qz'j");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(documentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(dOMNodePointer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~ny");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      CDATASection cDATASection0 = documentImpl0.createCDATASection("~ny");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, cDATASection0);
      dOMNodePointer0.setValue(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = new Locale("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      Text text0 = hTMLDocumentImpl0.createTextNode("http://www.w3.org/XML/1998/namespace");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0, "P0{&D,");
      dOMNodePointer0.setValue(hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFieldSetElementImpl hTMLFieldSetElementImpl0 = new HTMLFieldSetElementImpl(hTMLDocumentImpl0, "vlink");
      hTMLFieldSetElementImpl0.setAttributeNS("vlink", "vlink", "vlink");
      String string0 = DOMNodePointer.findEnclosingAttribute(hTMLFieldSetElementImpl0, "vlink");
      assertEquals("vlink", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFieldSetElementImpl hTMLFieldSetElementImpl0 = new HTMLFieldSetElementImpl(hTMLDocumentImpl0, "vlink");
      String string0 = DOMNodePointer.findEnclosingAttribute(hTMLFieldSetElementImpl0, "vlink");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isLanguage("AUT{KX},F_\"cp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "?~BZ4:LVomI<8#XKJV.");
      HTMLElement hTMLElement0 = hTMLTableElementImpl0.createTFoot();
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      hTMLTitleElementImpl0.setTextContent("^s3[z04?w");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "FRAMESET");
      dOMNodePointer0.getDefaultNamespaceURI();
      String string0 = dOMNodePointer0.getNamespaceURI((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "~ny");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, documentTypeImpl0);
      dOMNodePointer0.getNamespaceURI("X, hG_0-]#0F;jD.");
      String string0 = dOMNodePointer0.getNamespaceURI("X, hG_0-]#0F;jD.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("xmlns", "org.apache.commons.jxpath.JXPathContext");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "org.apache.wml.dom.WMLEmElementImpl", (String) null, (String) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) pSVIAttrNSImpl0);
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, ".hSOyYJwi{FWL-&");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLTableRowElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("xml", "R}(kn");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "LAYBEL");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLTableRowElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(documentImpl0, "", "", "&uot;");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, (String) null);
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("vpm");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "PE6IIS<HHQT[3]", "aEBkDhsF(+-znZ");
      Locale locale0 = new Locale("aEBkDhsF(+-znZ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      assertEquals("PE6IIS<HHQT[3]", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      Element element0 = wMLDocumentImpl0.createElementNS("R^", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0, "hreflang");
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("http:http://www.w3.org/XML/1998/namespace", nodeNameTest0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLMetaElementImpl hTMLMetaElementImpl0 = new HTMLMetaElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\u0001x[/5,hc+\"");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLMetaElementImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "\u0001x[/5,hc+\"");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTitleElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      WMLBrElementImpl wMLBrElementImpl0 = new WMLBrElementImpl(wMLDocumentImpl0, "xml:space");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      boolean boolean0 = DOMNodePointer.testNode((Node) wMLBrElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(pSVIDocumentImpl0, "]2>P=?hDr8;B>J,3Z7");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = DOMNodePointer.testNode((Node) documentTypeImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      TextImpl textImpl0 = new TextImpl(coreDocumentImpl0, "Q9 {@\"^");
      boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLInputElementImpl wMLInputElementImpl0 = new WMLInputElementImpl(wMLDocumentImpl0, (String) null);
      boolean boolean0 = DOMNodePointer.testNode((Node) wMLInputElementImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1793993092));
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstruction processingInstruction0 = hTMLDocumentImpl0.createProcessingInstruction("Q", "Q");
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstruction0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, ";");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      boolean boolean0 = DOMNodePointer.testNode((Node) commentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "r,_iUq3]CvBhQBs:?");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) documentTypeImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "PE6IIS<HHQT[3]", "aEBkDh@F(+-z,Z");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\u0001X[/5,HC+\"");
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "xml:space");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLButtonElementImpl0);
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLButtonElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
      assertEquals("XML:SPACE", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("qRk");
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "qRk", "HTMLFrameSetElementImpl", "qRk");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      boolean boolean0 = DOMNodePointer.testNode((Node) pSVIElementNSImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, "Y");
      QName qName0 = new QName("Y", "Y");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "~{g_$");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLAreaElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "5x>od^FrR0");
      QName qName0 = new QName((String) null, "*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTitleElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "5x>od^FrR0");
      QName qName0 = new QName("HTMLLegendElementImpl", "*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTitleElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("&quot;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("");
      boolean boolean0 = DOMNodePointer.testNode((Node) cDATASection0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl((DocumentType) null, true);
      boolean boolean0 = DOMNodePointer.testNode((Node) documentImpl0, (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = new Locale("]61AK:]RiJk8kEk`~");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      QName qName0 = new QName("&quot;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "]61AK:]RiJk8kEk`~");
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '&quot;'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, "qRk");
      Locale locale0 = new Locale("U-{,|Cc", "U-{,|Cc", "qRk");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTitleElementImpl0, locale0, "U-{,|Cc");
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "xmlns");
      QName qName0 = dOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "FRAMESET");
      dOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "PE6IIS<HHQT[3]", "aEBkDh@F(+-z,Z");
      Locale locale0 = new Locale("aEBkDh@F(+-z,Z");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0, "aEBkDh@F(+-z,Z");
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      QName qName0 = new QName((String) null, "#7q[p>oRpaCFDR!");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLBaseFontElementImpl0);
      NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("<<unknown namespace>>");
      assertTrue(nodePointer0.isNode());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, "x@(}%]");
      QName qName0 = new QName("xeyHEo");
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "MWk");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, (-4853), (Object) hTMLSelectElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      WMLImgElementImpl wMLImgElementImpl0 = new WMLImgElementImpl((WMLDocumentImpl) null, "Cannot setValue of an object that is not some other object's property");
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLImgElementImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getLanguage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "xmlns");
      boolean boolean0 = dOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }
}
