/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 04:19:19 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAnchorElementImpl;
import org.apache.html.dom.HTMLBRElementImpl;
import org.apache.html.dom.HTMLBaseFontElementImpl;
import org.apache.html.dom.HTMLDListElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFormElementImpl;
import org.apache.html.dom.HTMLHRElementImpl;
import org.apache.html.dom.HTMLSelectElementImpl;
import org.apache.html.dom.HTMLTableCaptionElementImpl;
import org.apache.html.dom.HTMLTableColElementImpl;
import org.apache.html.dom.HTMLTableRowElementImpl;
import org.apache.html.dom.HTMLTableSectionElementImpl;
import org.apache.html.dom.HTMLTitleElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLEmElementImpl;
import org.apache.wml.dom.WMLOptionElementImpl;
import org.apache.wml.dom.WMLTemplateElementImpl;
import org.apache.wml.dom.WMLUElementImpl;
import org.apache.wml.dom.WMLWmlElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CDATASectionImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.ElementDefinitionImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.NotationImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLCollection;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "zr$ExnGQ");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLSelectElementImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0, "zr$ExnGQ");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "#|2EEAVT");
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertEquals(0, int0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "u*dz#-]by{W2");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLTableRowElementImpl0);
      
      HTMLElement hTMLElement0 = hTMLTableRowElementImpl0.insertCell(14);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLElement0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals(0, int0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getPointerByID((JXPathContext) null, "DEFAULT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, ":w4#Md");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLFormElementImpl0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLFormElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(":W4#MD", qName0.toString());
      assertEquals("W4#MD", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "zr$ExnGQ");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASectionImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "zr$ExnGQ");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "The Content already has an existing parent \"");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLHRElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, cDATASectionImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(dOMNodePointer1, hTMLHRElementImpl0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer2);
      
      String string0 = dOMNodePointer2.asPath();
      assertEquals("id('zr$ExnGQ')/text()[1]/THE CONTENT ALREADY HAS AN EXISTING PARENT \"[1]", string0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer2.isNode());
      assertTrue(dOMNodePointer2.isActual());
      assertFalse(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertEquals(1, dOMNodePointer2.getLength());
      assertFalse(dOMNodePointer2.isContainer());
      assertFalse(dOMNodePointer2.isCollection());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, (QName) null, 4, (Object) hTMLDocumentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLCollection hTMLCollection0 = hTMLDocumentImpl0.getAnchors();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLCollection0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "C");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLDocumentImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(wMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "zr$ExnGQ");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLSelectElementImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0, "");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      dOMNodePointer0.hashCode();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xml");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLSelectElementImpl0);
      
      Locale locale0 = new Locale("xml", "xml", "xml");
      assertEquals("xml", locale0.getISO3Language());
      assertEquals("xml", locale0.getLanguage());
      assertEquals("XML", locale0.getCountry());
      assertEquals("xml_XML_xml", locale0.toString());
      assertEquals("xml", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("xml", locale0.getISO3Language());
      assertEquals("xml", locale0.getLanguage());
      assertEquals("XML", locale0.getCountry());
      assertEquals("xml_XML_xml", locale0.toString());
      assertEquals("xml", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("xml", "xml");
      assertEquals("xml", qName0.getPrefix());
      assertEquals("xml", qName0.getName());
      assertEquals("xml:xml", qName0.toString());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLSelectElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      assertNotNull(coreDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "(&J{UO:Os[;h[Y(s?", "(&J{UO:Os[;h[Y(s?", "p9,]Ka");
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      WMLUElementImpl wMLUElementImpl0 = new WMLUElementImpl(wMLDocumentImpl0, "p9,]Ka");
      assertNotNull(wMLUElementImpl0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLUElementImpl0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("p9,]Ka", qName0.toString());
      assertEquals("p9,]Ka", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("p9,]Ka", qName0.toString());
      assertEquals("p9,]Ka", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("p9,]Ka", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals("p9,]Ka", qName0.toString());
      assertEquals("p9,]Ka", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("p9,]Ka", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = dOMNodePointer0.isLanguage("");
      assertTrue(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = dOMNodePointer0.isLanguage("http://www.w3.org/2000/xmlns/");
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, ":w4#Md");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLFormElementImpl0);
      
      String string0 = DOMNodePointer.getPrefix(hTMLFormElementImpl0);
      assertEquals("", string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Element element0 = hTMLDocumentImpl0.createElementNS("L", "L", "L");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(element0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "L");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.getNamespaceURI();
      assertEquals("L", string0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "xmlns:");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLAnchorElementImpl0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLAnchorElementImpl0);
      assertEquals("", string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLDListElementImpl hTMLDListElementImpl0 = new HTMLDListElementImpl(hTMLDocumentImpl0, "xmlns");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDListElementImpl0);
      
      Locale locale0 = Locale.forLanguageTag("C\"agY+Yc!cX");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDListElementImpl0, locale0, "4");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getLanguage();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true);
      assertNotNull(deferredDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "2L\":)*.3{d", "org.apache.wml.dom.WMLUElementImpl", "]");
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNotNull(wMLDocumentImpl0);
      
      WMLTemplateElementImpl wMLTemplateElementImpl0 = new WMLTemplateElementImpl(wMLDocumentImpl0, "2L\":)*.3{d");
      assertNotNull(wMLTemplateElementImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLTemplateElementImpl0, locale0, "9a5");
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertSame(wMLTemplateElementImpl0, object0);
      assertSame(object0, wMLTemplateElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getBaseValue();
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(nodeTypeTest0, true, (NodePointer) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator((QName) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(0, nodeIterator0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("sum");
      assertEquals("sum", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) processingInstructionTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      NotationImpl notationImpl0 = new NotationImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(notationImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(notationImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      QName qName0 = new QName("P3vP!kc3DT=9D[{", "P3vP!kc3DT=9D[{");
      assertEquals("P3vP!kc3DT=9D[{", qName0.getPrefix());
      assertEquals("P3vP!kc3DT=9D[{:P3vP!kc3DT=9D[{", qName0.toString());
      assertEquals("P3vP!kc3DT=9D[{", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("P3vP!kc3DT=9D[{", qName0.getPrefix());
      assertEquals("P3vP!kc3DT=9D[{:P3vP!kc3DT=9D[{", qName0.toString());
      assertEquals("P3vP!kc3DT=9D[{", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("P3vP!kc3DT=9D[{", qName0.getPrefix());
      assertEquals("P3vP!kc3DT=9D[{:P3vP!kc3DT=9D[{", qName0.toString());
      assertEquals("P3vP!kc3DT=9D[{", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: P3vP!kc3DT=9D[{:P3vP!kc3DT=9D[{
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(basicVariables0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, "}6,4I;bZa");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(elementDefinitionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(elementDefinitionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue("xmlns:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "CH,;9lp37P", "CH,;9lp37P");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(processingInstructionImpl0);
      
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) processingInstructionImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.ProcessingInstructionImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      hTMLDocumentImpl0.setReadOnly(true, true);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("count");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("ranle");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "K'mj^1Z1");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLHRElementImpl0);
      
      hTMLDocumentImpl0.setReadOnly(true, true);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHRElementImpl0, locale0, "u");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.getNamespaceURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentFragmentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("TITLE");
      assertEquals("", locale0.getVariant());
      assertEquals("title", locale0.getLanguage());
      assertEquals("title", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("title", locale0.getLanguage());
      assertEquals("title", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getLocalName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      WMLEmElementImpl wMLEmElementImpl0 = new WMLEmElementImpl((WMLDocumentImpl) null, (String) null);
      assertNotNull(wMLEmElementImpl0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLEmElementImpl0, locale0, (String) null);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getLanguage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      int int0 = deferredDocumentImpl0.setDeferredAttribute(7, "Py!rDc}F^E]d;EbEmH*", "z$l", "Py!rDc}F^E]d;EbEmH*", false, false, (Object) documentFragmentImpl0);
      assertEquals(0, int0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type: 20
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      assertNotNull(documentFragmentImpl0);
      
      int int0 = deferredDocumentImpl0.setDeferredAttribute(7, "Py!rDc}F^E]d;EbEmH*", "z$l", "Py!rDc}F^E]d;EbEmH*", true, true, (Object) documentFragmentImpl0);
      assertEquals(0, int0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DeferredDocumentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Element element0 = hTMLDocumentImpl0.createElementNS("l", "l", "l");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(element0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "l");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      QName qName0 = new QName("BODY");
      assertEquals("BODY", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("BODY", qName0.getName());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      QName qName0 = new QName("Cannot modify DOM trees", "Cannot modify DOM trees");
      assertEquals("Cannot modify DOM trees:Cannot modify DOM trees", qName0.toString());
      assertEquals("Cannot modify DOM trees", qName0.getName());
      assertEquals("Cannot modify DOM trees", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("Cannot modify DOM trees:Cannot modify DOM trees", qName0.toString());
      assertEquals("Cannot modify DOM trees", qName0.getName());
      assertEquals("Cannot modify DOM trees", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("Cannot modify DOM trees:Cannot modify DOM trees", qName0.toString());
      assertEquals("Cannot modify DOM trees", qName0.getName());
      assertEquals("Cannot modify DOM trees", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: Cannot modify DOM trees:Cannot modify DOM trees
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "ule");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, locale0, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("http", qName0.getPrefix());
      assertEquals("//www.w3.org/XML/1998/namespace", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(beanPointer0, beanPointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/");
      assertEquals("/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      QName qName0 = new QName("/", "<<unknown namespace>>");
      assertEquals("/:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("/", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("/:<<unknown namespace>>", qName0.toString());
      assertEquals("<<unknown namespace>>", qName0.getName());
      assertEquals("/", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: /:<<unknown namespace>>
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getPrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace:http://www.w3.org/2000/xmlns/", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodeNameTest0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "Factory could not create a child node for path: ");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLAnchorElementImpl0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLAnchorElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Element element0 = hTMLDocumentImpl0.createElementNS("r4", "rowsan");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(element0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) element0);
      assertEquals("r4", string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "Facory is not set on Dhe JXPathContext - cannotrcreate path: ");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLTableSectionElementImpl0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLTableSectionElementImpl0);
      assertEquals(" ", string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl((CoreDocumentImpl) null, "j]IICyd", "G=", "!1OX~tpi>gKNL");
      assertNotNull(attrNSImpl0);
      
      String string0 = DOMNodePointer.getLocalName(attrNSImpl0);
      assertEquals("!1OX~tpi>gKNL", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertEquals("#document", string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLTableCaptionElementImpl0);
      
      String string0 = DOMNodePointer.getPrefix(hTMLTableCaptionElementImpl0);
      assertEquals("HTTP", string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = DOMNodePointer.getPrefix(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(hTMLDocumentImpl0, "java.util.Locale@0000000007");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(entityReferenceImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReferenceImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLBRElementImpl hTMLBRElementImpl0 = new HTMLBRElementImpl(hTMLDocumentImpl0, "op`Q~+UgY");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLBRElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLBRElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = new Locale("java.util.Locale@0000000012", "Bb#s8%O@EO+on)", "Bb#s8%O@EO+on)");
      assertEquals("BB#S8%O@EO+ON)", locale0.getCountry());
      assertEquals("Bb#s8%O@EO+on)", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "The attribute \"");
      assertEquals("BB#S8%O@EO+ON)", locale0.getCountry());
      assertEquals("Bb#s8%O@EO+on)", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertEquals("BB#S8%O@EO+ON)", locale0.getCountry());
      assertEquals("Bb#s8%O@EO+on)", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      String string1 = dOMNodePointer0.getDefaultNamespaceURI();
      assertEquals("BB#S8%O@EO+ON)", locale0.getCountry());
      assertEquals("Bb#s8%O@EO+on)", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)dOMNodePointer0.getBaseValue();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(hTMLDocumentImpl1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertNotNull(qName0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNotNull(hTMLDocumentImpl1);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLDocumentImpl1, locale0);
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
      assertEquals(0, int0);
      assertFalse(hTMLDocumentImpl0.equals((Object)hTMLDocumentImpl1));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(hTMLDocumentImpl1.equals((Object)hTMLDocumentImpl0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals("//www.w3.org/2000/xmlns/", qName0.getName());
      assertEquals("http://www.w3.org/2000/xmlns/", qName0.toString());
      assertEquals("http", qName0.getPrefix());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertNull(hTMLDocumentImpl1.getURL());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isContainer());
      assertFalse(nodePointer0.isCollection());
      assertTrue(nodePointer0.isRoot());
      assertNotSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "d");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, (Locale) null, "H#o'q5j=9Mkl?f:*");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(qName0);
      
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      assertNotNull(attrNSImpl0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, attrNSImpl0, (Locale) null);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nodePointer0);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
      assertEquals(1, int0);
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(1, nodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isAttribute());
      assertTrue(nodePointer0.isRoot());
      assertTrue(nodePointer0.isNode());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "xC\"");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(string0);
      
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "");
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID(jXPathContextReferenceImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "k2z?40");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLHRElementImpl0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHRElementImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "k2z?40");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLElement0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(processingInstructionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("http://www.w3.org/2000/xmlns/", object0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, (String) null, (String) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(processingInstructionImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "HTMLFormElementImpl");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASectionImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0, "HTMLFormElementImpl");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("HTMLFormElementImpl", object0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(cDATASectionImpl0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TextImpl textImpl0 = new TextImpl(hTMLDocumentImpl0, (String) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(textImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, (String) null);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Comment comment0 = hTMLDocumentImpl0.createComment((String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(comment0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Comment comment0 = hTMLDocumentImpl0.createComment("$SCm*U;F*);>R");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(comment0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, comment0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("$SCm*U;F*);>R", object0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(attr0);
      
      String string0 = DOMNodePointer.getPrefix(attr0);
      assertEquals("http", string0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASectionImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(cDATASectionImpl0, locale0, "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertFalse(boolean0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer1);
      
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertTrue(boolean0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer1.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isContainer());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = dOMNodePointer0.equals(hTMLDocumentImpl0);
      assertFalse(boolean0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer0);
      assertTrue(boolean0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ROOT;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "xgj\"");
      String string0 = dOMNodePointer0.asPath();
      assertEquals("id('xgj&quot;')", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "y1N$YE.kRea')y");
      String string0 = dOMNodePointer0.asPath();
      assertEquals("id('y1N$YE.kRea&apos;)y')", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.UK;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
      QName qName0 = new QName("w<`D2+&5H", "xml:lang");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "sum", (String) null, "w<`D2+&5H");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLOptionElementImpl wMLOptionElementImpl0 = new WMLOptionElementImpl(wMLDocumentImpl0, "*(uQb>q@\"WrQU:Y");
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, wMLOptionElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer1, wMLOptionElementImpl0);
      WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, "w<`D2+&5H");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) wMLWmlElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /Y[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      Locale locale0 = Locale.ROOT;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/BODY[1]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(hTMLDocumentImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(deferredDocumentImpl0, "-E#i:");
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "sum", "sum");
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/processing-instruction('sum')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, entityImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "WQ41cNmDK");
      Locale locale0 = Locale.ROOT;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPANESE;
      Text text0 = hTMLDocumentImpl0.createTextNode("Nv[X4*./}");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Attr attr0 = hTMLDocumentImpl0.createAttributeNS("CAPTION", "CAPTION", "Unknown namespace prefix: ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "j$J2`ZQYT_4Fu/fFz");
      HTMLElement hTMLElement0 = hTMLTableSectionElementImpl0.insertRow(966);
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      dOMNodePointer0.remove();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableColElementImpl hTMLTableColElementImpl0 = new HTMLTableColElementImpl(hTMLDocumentImpl0, "org.jdom.Document");
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableColElementImpl0, locale0, "org.jdom.Document");
      QName qName0 = dOMNodePointer0.getName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "xmlns:");
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("ORG.JDOM.DOCUMENT", qName0.toString());
      assertEquals("ORG.JDOM.DOCUMENT", qName0.getName());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.GERMAN;
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.compiler.NodeTypeTest@0000000001");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLBaseFontElementImpl0, locale0);
      QName qName0 = new QName("xmlns", "http://www.w3.org/2000/xmlns/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "xmlns");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      QName qName0 = new QName("tN$(xx99R+]Eqv)5XG", "tN$(xx99R+]Eqv)5XG");
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(hTMLDocumentImpl0, "A$0UZAj0");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, entityReferenceImpl0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      // Undeclared exception!
      try { 
        nodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /@tN$(xx99R+]Eqv)5XG:tN$(xx99R+]Eqv)5XG, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http://www.w3.org/2000/xmlns/
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, (QName) null, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.setValue(dOMNodePointer0);
      assertTrue(dOMNodePointer0.isActual());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      dOMNodePointer0.setValue(hTMLDocumentImpl0);
      assertEquals(1, dOMNodePointer0.getLength());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      dOMNodePointer0.setValue(hTMLElement0);
      assertTrue(dOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(attrNSImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.NodeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getBody();
      Locale locale0 = Locale.CANADA;
      Element element0 = hTMLDocumentImpl0.getDocumentElement();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0);
      dOMNodePointer0.setValue(locale0);
      assertEquals("CA", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "");
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0, "");
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, (String) null);
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0, (String) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      dOMNodePointer0.setValue((Object) null);
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ROOT;
      Text text0 = hTMLDocumentImpl0.createTextNode("local-name");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      dOMNodePointer0.setValue("local-name");
      assertFalse(dOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "Facory is not set on Dhe JXPathContext - cannotrcreate path: ");
      String string0 = DOMNodePointer.findEnclosingAttribute(hTMLTableSectionElementImpl0, "Facory is not set on Dhe JXPathContext - cannotrcreate path: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
      // Undeclared exception!
      try { 
        DOMNodePointer.findEnclosingAttribute(hTMLElement0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.html.dom.HTMLElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getDefaultNamespaceURI();
      String string0 = dOMNodePointer0.getNamespaceURI((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("l");
      String string0 = dOMNodePointer0.getNamespaceURI("l");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("xmlns");
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("xml");
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.UK;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "7", "7");
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0, "7");
      QName qName0 = dOMNodePointer0.getName();
      assertEquals("7", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "K'mj^1Z1");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLHRElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      TextImpl textImpl0 = new TextImpl();
      boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Element element0 = hTMLDocumentImpl0.createElementNS("input", "input");
      boolean boolean0 = DOMNodePointer.testNode((Node) element0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Element element0 = hTMLDocumentImpl0.createElementNS("L", "L", "L");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      boolean boolean0 = DOMNodePointer.testNode((Node) element0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      CommentImpl commentImpl0 = new CommentImpl(pSVIDocumentImpl0, "-E#i:");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      boolean boolean0 = DOMNodePointer.testNode((Node) commentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "&7LK[");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = DOMNodePointer.testNode((Node) cDATASectionImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "n( CG,6AVd]>!uP|");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) cDATASectionImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "2A]", "2A]");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2A]");
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "Factory is not set on the JXPathContext - cannot create path: ");
      QName qName0 = new QName("Factory is not set on the JXPathContext - cannot create path: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Factory is not set on the JXPathContext - cannot create path: ");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableSectionElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ROOT;
      Element element0 = hTMLDocumentImpl0.createElementNS("l", "l", "l");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0, "l");
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) element0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("l", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "Factory is not set on the JXPathContext - cannot create path: ");
      QName qName0 = new QName("Factory is not set on the JXPathContext - cannot create path: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableSectionElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTitleElementImpl hTMLTitleElementImpl0 = new HTMLTitleElementImpl(hTMLDocumentImpl0, ">M<En&FZ ");
      QName qName0 = new QName(">M<En&FZ ", ">M<En&FZ ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTitleElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, ">M<EN&FZ ");
      QName qName0 = new QName(">M<EN&FZ ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ">M<EN&FZ ");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableSectionElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      QName qName0 = new QName("BLlX_u");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "x", locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, false, nodePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = new Locale("ule");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CANADA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.attributeIterator((QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
      NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("<<unknown namespace>>");
      assertFalse(nodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Element element0 = hTMLDocumentImpl0.createElementNS("P3vP!kc3DT=9D[{", "marginheight", "JE3");
      Locale locale0 = new Locale("P3vP!kc3DT=9D[{", "+fqv)eW#`", "+fqv)eW#`");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "+fqv)eW#`");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage("http://www.w3.org/XML/1998/namespace");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
      assertEquals(0, int0);
  }
}
