/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 05:48:17 GMT 2020
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMAttributePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAreaElementImpl;
import org.apache.html.dom.HTMLBRElementImpl;
import org.apache.html.dom.HTMLButtonElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFieldSetElementImpl;
import org.apache.html.dom.HTMLFontElementImpl;
import org.apache.html.dom.HTMLHeadingElementImpl;
import org.apache.html.dom.HTMLIFrameElementImpl;
import org.apache.html.dom.HTMLIsIndexElementImpl;
import org.apache.html.dom.HTMLLegendElementImpl;
import org.apache.html.dom.HTMLMenuElementImpl;
import org.apache.html.dom.HTMLOListElementImpl;
import org.apache.html.dom.HTMLParamElementImpl;
import org.apache.html.dom.HTMLSelectElementImpl;
import org.apache.html.dom.HTMLTableCaptionElementImpl;
import org.apache.html.dom.HTMLTableCellElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLTableRowElementImpl;
import org.apache.html.dom.HTMLTextAreaElementImpl;
import org.apache.wml.dom.WMLBElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLFieldsetElementImpl;
import org.apache.wml.dom.WMLGoElementImpl;
import org.apache.wml.dom.WMLIElementImpl;
import org.apache.wml.dom.WMLMetaElementImpl;
import org.apache.wml.dom.WMLNoopElementImpl;
import org.apache.wml.dom.WMLStrongElementImpl;
import org.apache.wml.dom.WMLTdElementImpl;
import org.apache.wml.dom.WMLWmlElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CDATASectionImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.ElementDefinitionImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.PSVIAttrNSImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.apache.xerces.parsers.XML11Configuration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.EntityReference;
import org.w3c.dom.Node;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.GERMANY;
      TextImpl textImpl0 = new TextImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "||W-!T50!w|N6");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "C,^=ek$/H?L)g!U;t", "<<unknown namespace>>", (String) null);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      Element element0 = wMLDocumentImpl0.createElementNS("org.evosuite.runtime.testdata.FileSystemHandling@0000000005", (String) null, "||W-!T50!w|N6");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "BK5\b/");
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, "BK5\b/");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLFieldsetElementImpl wMLFieldsetElementImpl0 = new WMLFieldsetElementImpl(wMLDocumentImpl0, "org.apache.commons.jxpath.ri.axes.AncestorContext");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLFieldsetElementImpl0);
      dOMNodePointer0.getPointerByID(jXPathContext0, "0{H");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "/");
      HTMLElement hTMLElement0 = hTMLTableRowElementImpl0.insertCell((-1073741822));
      QName qName0 = new QName((String) null, "TEXTAREA");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLElement0);
      dOMNodePointer0.getNamespaceURI();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, ":");
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0);
      dOMNodePointer0.getName();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "ORG.APACHE.HTML.DOM.HTMLOPTGROUPELEMENTIMPL", "cG", "cG");
      DocumentImpl documentImpl0 = new DocumentImpl(documentTypeImpl0, false);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      dOMNodePointer0.getDefaultNamespaceURI();
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue(hTMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      TextImpl textImpl0 = new TextImpl(pSVIDocumentImpl0, "nMie9S");
      Locale locale0 = Locale.KOREAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "nMie9S");
      dOMNodePointer0.getName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      QName qName1 = new QName("xmlns", (String) null);
      HTMLFieldSetElementImpl hTMLFieldSetElementImpl0 = new HTMLFieldSetElementImpl(hTMLDocumentImpl0, "-e#M.K)@");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLFieldSetElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLOListElementImpl hTMLOListElementImpl0 = new HTMLOListElementImpl(hTMLDocumentImpl0, "java.util.Locale@0000000011");
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLOListElementImpl0, locale0);
      dOMNodePointer0.isLanguage("");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.US;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      Element element0 = wMLDocumentImpl0.createElementNS("&apos;", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      dOMNodePointer1.getNamespaceURI();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      dOMNodePointer0.getLanguage();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      dOMNodePointer0.getImmediateNode();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      dOMNodePointer0.getImmediateNode();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "BD)\"");
      dOMNodePointer0.getBaseValue();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "xml", "nid", "nid");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLFieldsetElementImpl wMLFieldsetElementImpl0 = new WMLFieldsetElementImpl(wMLDocumentImpl0, "org.apache.html.dom.HTMLOptGroupElementImpl");
      DOMNodePointer.findEnclosingAttribute(wMLFieldsetElementImpl0, "{ ?L|;Y|j<^o6oDvI.");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(103);
      Locale locale0 = Locale.KOREAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, ">~jqH{3");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, (Node) null);
      // Undeclared exception!
      try { 
        dOMNodePointer1.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "BK5\b/");
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, "BK5\b/");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage("=AR.Xbj+gBD-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "frameborder");
      // Undeclared exception!
      try { 
        dOMNodePointer0.getPointerByID((JXPathContext) null, "Factory is not set on the JXPathContext - cannot create path: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "node()", "node()", "+u|*VtV;fPI.;>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) wMLDocumentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, (String) null);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      EntityReference entityReference0 = wMLDocumentImpl0.createEntityReference("xml:lang");
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) entityReference0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.EntityReferenceImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      hTMLDocumentImpl0.setReadOnly(true, true);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      HTMLParamElementImpl hTMLParamElementImpl0 = new HTMLParamElementImpl((HTMLDocumentImpl) null, "|9}");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParamElementImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("z[~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "node()", "node()", "+u|*VtV;fPI.;>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, (Locale) null, "SWiW[:");
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentTypeImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "p");
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getLocalName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false, false);
      Locale locale0 = new Locale("Vh{", ".x`W!E'SWOi", ".x`W!E'SWOi");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLButtonElementImpl hTMLButtonElementImpl0 = new HTMLButtonElementImpl(hTMLDocumentImpl0, "");
      // Undeclared exception!
      try { 
        DOMNodePointer.findEnclosingAttribute(hTMLButtonElementImpl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.html.dom.HTMLElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "");
      HTMLElement hTMLElement0 = hTMLTableRowElementImpl0.insertCell((-1073741822));
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      QName qName0 = new QName("<<unknown namespace>>", "");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 47, (Object) hTMLTableRowElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "org.apache.html.dom.HTMLOptGroupElementImpl");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("org.apache.html.dom.HTMLOptGroupElementImpl");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      QName qName0 = new QName("W^0svpetW?", (String) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, deferredDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer0, (NodePointer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: W^0svpetW?:null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(variablePointer0, nodePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'xmlns'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLOListElementImpl hTMLOListElementImpl0 = new HTMLOListElementImpl(hTMLDocumentImpl0, "+");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLOListElementImpl0);
      
      Locale locale0 = new Locale("l", "parent::");
      assertEquals("", locale0.getVariant());
      assertEquals("l_PARENT::", locale0.toString());
      assertEquals("l", locale0.getLanguage());
      assertEquals("PARENT::", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLOListElementImpl0, locale0, "xml");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("l_PARENT::", locale0.toString());
      assertEquals("l", locale0.getLanguage());
      assertEquals("PARENT::", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotNull(dOMNodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", locale0.getVariant());
      assertEquals("l_PARENT::", locale0.toString());
      assertEquals("l", locale0.getLanguage());
      assertEquals("PARENT::", locale0.getCountry());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(dOMNodePointer0, (QName) null, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getVariant());
      assertEquals("l_PARENT::", locale0.toString());
      assertEquals("l", locale0.getLanguage());
      assertEquals("PARENT::", locale0.getCountry());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNotNull(beanPointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(beanPointer0, beanPointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.JXPathContextReferenceImpl cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "\"]Da>E5P,}|", "|9}");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(processingInstructionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("<<unknown namespace>>", "\"]Da>E5P,}|");
      assertEquals("\"]Da>E5P,}|", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:\"]Da>E5P,}|", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      assertEquals("\"]Da>E5P,}|", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:\"]Da>E5P,}|", qName0.toString());
      assertEquals("http://www.w3.org/XML/1998/namespace", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>:\"]Da>E5P,}|", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("\"]Da>E5P,}|", qName0.getName());
      assertEquals("<<unknown namespace>>", qName0.getPrefix());
      assertEquals("<<unknown namespace>>:\"]Da>E5P,}|", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, true, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: <<unknown namespace>>:\"]Da>E5P,}|
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      assertNotNull(deferredDocumentImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "o);-Mq=g7r%S(O_");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = dOMNodePointer0.getName();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator((NodeTest) null, true, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "id+('not')");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.TreeCompiler");
      assertEquals("org.apache.commons.jxpath.ri.compiler.TreeCompiler", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.TreeCompiler", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("xmlns:");
      assertEquals("xmlns:", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.ri.compiler.TreeCompiler", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.TreeCompiler", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, true, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'org.apache.commons.jxpath.ri.compiler.TreeCompiler'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "||W-!T50!w|N6");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotNull(dOMNodePointer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(".}rKbMInIGXE");
      assertEquals(".}rKbMInIGXE", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      QName qName0 = new QName("$_c{1t7H");
      assertEquals("$_c{1t7H", qName0.toString());
      assertEquals("$_c{1t7H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(dOMNodePointer0, qName0, "(=uF5\"");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("$_c{1t7H", qName0.toString());
      assertEquals("$_c{1t7H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertNotNull(beanPointer0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, true, beanPointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("I:2%H%Nr");
      assertEquals("I:2%H%Nr", qName0.toString());
      assertEquals("I", qName0.getPrefix());
      assertEquals("2%H%Nr", qName0.getName());
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.attributeIterator(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, ")S'Xpy@?,OF^ M");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, "xml");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertNotNull(dOMNodePointer0);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(pSVIAttrNSImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, pSVIAttrNSImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      // Undeclared exception!
      try { 
        dOMNodePointer1.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "HY\"0-b:!eH:/w:", (String) null);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLDocumentImpl0);
      
      WMLMetaElementImpl wMLMetaElementImpl0 = new WMLMetaElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLMetaElementImpl0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) wMLMetaElementImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "')", "<<unknown namespace>>", "<<unknown namespace>>");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(pSVIElementNSImpl0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) pSVIElementNSImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("')", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLLegendElementImpl hTMLLegendElementImpl0 = new HTMLLegendElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLLegendElementImpl0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLLegendElementImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("//WWW.W3.ORG/XML/1998/NAMESPACE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "|9}", "http://www.w3.org/2000/xmlns/", "");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(pSVIAttrNSImpl0);
      
      String string0 = DOMNodePointer.getLocalName(pSVIAttrNSImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = DOMNodePointer.getLocalName(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("#document", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "&apos;", "http://www.w3.org/XML/1998/namespace", "wyV1b|D;t/xq]?;,O]");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLDocumentImpl0);
      
      WMLIElementImpl wMLIElementImpl0 = new WMLIElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(wMLIElementImpl0);
      
      String string0 = DOMNodePointer.getPrefix(wMLIElementImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertEquals("http", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      String string0 = DOMNodePointer.getPrefix(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLTableRowElementImpl0);
      
      HTMLElement hTMLElement0 = hTMLTableRowElementImpl0.insertCell((-1073741822));
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLElement0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.asPath();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLDocumentImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotNull(dOMNodePointer0);
      
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(entityReferenceImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, entityReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      String string0 = dOMNodePointer1.toString();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isRoot());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isNode());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "org.apache.html.dom.HTMLOptGroupElementImpl");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLSelectElementImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0, "<<unknown namespace>>");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertNotNull(dOMNodePointer0);
      
      HTMLTableCaptionElementImpl hTMLTableCaptionElementImpl0 = new HTMLTableCaptionElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLTableCaptionElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) hTMLTableCaptionElementImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) jXPathContextReferenceImpl0, (QName) null, Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('<<unknown namespace>>')
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      assertNotNull(deferredDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "BK5\b/");
      assertNotNull(documentTypeImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, "BK5\b/");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNotNull(hTMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotNull(dOMNodePointer0);
      
      String string0 = dOMNodePointer0.getNamespaceURI("xml");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "\"true\"");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(commentImpl0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) commentImpl0, (NodeTest) processingInstructionTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(processingInstructionTest0.getTarget());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl((CoreDocumentImpl) null, "<<unknown namespace>>", "<<unknown namespace>>", "6Rn0F]YXh>rM");
      assertNotNull(pSVIAttrNSImpl0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) pSVIAttrNSImpl0, (NodeTest) nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextImpl textImpl0 = new TextImpl();
      assertNotNull(textImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      assertNotNull(wMLDocumentImpl0);
      
      WMLTdElementImpl wMLTdElementImpl0 = new WMLTdElementImpl(wMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      assertNotNull(wMLTdElementImpl0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) wMLTdElementImpl0, (NodeTest) nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      assertEquals(7, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "l", "6Rn0F]YXh>rM");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(pSVIAttrNSImpl0);
      
      boolean boolean0 = DOMNodePointer.testNode((Node) pSVIAttrNSImpl0, (NodeTest) nodeTypeTest0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals(7, nodeTypeTest0.getNodeType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = new Locale("l", "");
      assertEquals("", locale0.getVariant());
      assertEquals("l", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("l", locale0.getLanguage());
      assertNotNull(locale0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, (String) null, "xV20G#w';[", "##;j?{S*2'k;64");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLDocumentImpl0);
      
      WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, "xV20G#w';[");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLWmlElementImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLWmlElementImpl0, locale0, "l");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("l", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("l", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotNull(dOMNodePointer0);
      
      QName qName0 = new QName("preserve");
      assertNull(qName0.getPrefix());
      assertEquals("preserve", qName0.toString());
      assertEquals("preserve", qName0.getName());
      assertNotNull(qName0);
      
      NodeIterator nodeIterator0 = dOMNodePointer0.attributeIterator(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getVariant());
      assertEquals("l", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("l", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("preserve", qName0.toString());
      assertEquals("preserve", qName0.getName());
      assertEquals(0, nodeIterator0.getPosition());
      assertNotNull(nodeIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "xml");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotNull(dOMNodePointer0);
      
      HTMLDocumentImpl hTMLDocumentImpl1 = (HTMLDocumentImpl)dOMNodePointer0.getBaseValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNull(hTMLDocumentImpl1.getCookie());
      assertNull(hTMLDocumentImpl1.getReferrer());
      assertNull(hTMLDocumentImpl1.getURL());
      assertNull(hTMLDocumentImpl1.getDomain());
      assertSame(hTMLDocumentImpl0, hTMLDocumentImpl1);
      assertSame(hTMLDocumentImpl1, hTMLDocumentImpl0);
      assertNotNull(hTMLDocumentImpl1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TextImpl textImpl0 = new TextImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(textImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "||W-!T50!w|N6");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotNull(dOMNodePointer0);
      
      HTMLTableCellElementImpl hTMLTableCellElementImpl0 = new HTMLTableCellElementImpl(hTMLDocumentImpl0, "Vo*@%*a*h`T\"BC{dx");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLTableCellElementImpl0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLTableCellElementImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "C,^=ek$/H?L)g!U;t", "<<unknown namespace>>", (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(wMLDocumentImpl0);
      
      DOMNodePointer dOMNodePointer2 = new DOMNodePointer(wMLDocumentImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer2);
      
      int int0 = dOMNodePointer2.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.isAttribute());
      assertFalse(dOMNodePointer1.isCollection());
      assertEquals(1, dOMNodePointer1.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer2.isContainer());
      assertTrue(dOMNodePointer2.isActual());
      assertEquals(1, dOMNodePointer2.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer2.getIndex());
      assertTrue(dOMNodePointer2.isRoot());
      assertFalse(dOMNodePointer2.isAttribute());
      assertFalse(dOMNodePointer2.isCollection());
      assertTrue(dOMNodePointer2.isNode());
      assertNotSame(dOMNodePointer0, dOMNodePointer2);
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertNotSame(dOMNodePointer1, dOMNodePointer2);
      assertNotSame(dOMNodePointer2, dOMNodePointer1);
      assertNotSame(dOMNodePointer2, dOMNodePointer0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer2));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer2.equals((Object)dOMNodePointer0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "%", "@", "z4<<2j!Z+}/T+|+9");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(wMLDocumentImpl0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, (String) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.isRoot());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertNotNull(dOMNodePointer0);
      
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotNull(dOMNodePointer0);
      
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertNotNull(nullPointer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertNotNull(dOMNodePointer0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(string0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "]", "|9}");
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(processingInstructionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals("|9}", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer", (String) null);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(processingInstructionImpl0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection(". It cannot be converted to ");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(cDATASection0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(". It cannot be converted to", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextImpl textImpl0 = new TextImpl();
      assertNotNull(textImpl0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "nMie9S");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Comment comment0 = hTMLDocumentImpl0.createComment("/");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(comment0);
      
      QName qName0 = new QName("y vs");
      assertEquals("y vs", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("y vs", qName0.getName());
      assertNotNull(qName0);
      
      HTMLTextAreaElementImpl hTMLTextAreaElementImpl0 = new HTMLTextAreaElementImpl(hTMLDocumentImpl0, "");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLTextAreaElementImpl0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLTextAreaElementImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("y vs", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("y vs", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertNotNull(nodePointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, comment0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("y vs", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("y vs", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("y vs", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("y vs", qName0.getName());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(nodePointer0.isNode());
      assertEquals(1, nodePointer0.getLength());
      assertTrue(nodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertFalse(nodePointer0.isCollection());
      assertFalse(nodePointer0.isContainer());
      assertTrue(nodePointer0.isActual());
      assertFalse(nodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotSame(nodePointer0, dOMNodePointer0);
      assertNotSame(dOMNodePointer0, nodePointer0);
      assertFalse(nodePointer0.equals((Object)dOMNodePointer0));
      assertFalse(dOMNodePointer0.equals((Object)nodePointer0));
      assertEquals("/", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      Comment comment0 = hTMLDocumentImpl0.createComment((String) null);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(comment0);
      
      Locale locale0 = new Locale("Cj", "|9}");
      assertEquals("cj_|9}", locale0.toString());
      assertEquals("cj", locale0.getLanguage());
      assertEquals("|9}", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("cj_|9}", locale0.toString());
      assertEquals("cj", locale0.getLanguage());
      assertEquals("|9}", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertNotNull(dOMNodePointer0);
      
      Object object0 = dOMNodePointer0.getValue();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("cj_|9}", locale0.toString());
      assertEquals("cj", locale0.getLanguage());
      assertEquals("|9}", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(1, dOMNodePointer0.getLength());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLSelectElementImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      QName qName0 = new QName("xmlns");
      assertEquals("xmlns", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.getName());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("xmlns", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.getName());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLSelectElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("xmlns", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.getName());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertNotNull(dOMNodePointer0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      WMLGoElementImpl wMLGoElementImpl0 = new WMLGoElementImpl(wMLDocumentImpl0, "xmlns:");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLGoElementImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) wMLGoElementImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      DOMAttributePointer dOMAttributePointer0 = (DOMAttributePointer)dOMNodePointer0.createAttribute(jXPathContextReferenceImpl0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("xmlns", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.getName());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isContainer());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(dOMAttributePointer0.isActual());
      assertFalse(dOMAttributePointer0.isRoot());
      assertTrue(dOMAttributePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, dOMAttributePointer0.getIndex());
      assertEquals(1, dOMAttributePointer0.getLength());
      assertFalse(dOMAttributePointer0.isContainer());
      assertTrue(dOMAttributePointer0.isLeaf());
      assertFalse(dOMAttributePointer0.isAttribute());
      assertFalse(dOMAttributePointer0.isCollection());
      assertNotNull(dOMAttributePointer0);
      
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLSelectElementImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, ":", ":", "^NFsAiAr\"A'7d7iSW|");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(documentTypeImpl0);
      
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(wMLDocumentImpl0);
      
      Element element0 = wMLDocumentImpl0.createElementNS(":", ":", ":");
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(element0);
      
      String string0 = DOMNodePointer.getPrefix(element0);
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertTrue(dOMNodePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertTrue(dOMNodePointer0.isNode());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isAttribute());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertTrue(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertTrue(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, ")S'Xpy@?,OF^ M");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(hTMLAreaElementImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, "xml");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertNotNull(dOMNodePointer0);
      
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "\"]Da>E5P,}|");
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNotNull(processingInstructionImpl0);
      
      boolean boolean0 = dOMNodePointer0.equals(processingInstructionImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getCookie());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLDocumentImpl0);
      
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNotNull(hTMLSelectElementImpl0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      QName qName0 = new QName("xmlns");
      assertEquals("xmlns", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.toString());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, locale0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("xmlns", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertNotNull(beanPointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(beanPointer0, hTMLSelectElementImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("xmlns", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertNotNull(dOMNodePointer0);
      
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertNotNull(dOMNodePointer1);
      
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getURL());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("xmlns", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("xmlns", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(dOMNodePointer0.isRoot());
      assertFalse(dOMNodePointer0.isAttribute());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertTrue(dOMNodePointer0.isActual());
      assertFalse(dOMNodePointer0.isCollection());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertTrue(dOMNodePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer1.getIndex());
      assertFalse(dOMNodePointer1.isAttribute());
      assertEquals(1, dOMNodePointer1.getLength());
      assertFalse(dOMNodePointer1.isContainer());
      assertFalse(dOMNodePointer1.isCollection());
      assertTrue(dOMNodePointer1.isNode());
      assertTrue(dOMNodePointer1.isActual());
      assertNotSame(dOMNodePointer0, dOMNodePointer1);
      assertNotSame(dOMNodePointer1, dOMNodePointer0);
      assertFalse(dOMNodePointer0.equals((Object)dOMNodePointer1));
      assertFalse(dOMNodePointer1.equals((Object)dOMNodePointer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertNotNull(hTMLDocumentImpl0);
      
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertNotNull(dOMNodePointer0);
      
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(hTMLDocumentImpl0.getCookie());
      assertNull(hTMLDocumentImpl0.getURL());
      assertNull(hTMLDocumentImpl0.getDomain());
      assertNull(hTMLDocumentImpl0.getReferrer());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(dOMNodePointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
      assertFalse(dOMNodePointer0.isAttribute());
      assertFalse(dOMNodePointer0.isContainer());
      assertEquals(1, dOMNodePointer0.getLength());
      assertTrue(dOMNodePointer0.isNode());
      assertFalse(dOMNodePointer0.isRoot());
      assertTrue(dOMNodePointer0.isActual());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null, "d%;$Kw\"pBOOzn");
      String string0 = dOMNodePointer0.asPath();
      assertEquals("id('d%;$Kw&quot;pBOOzn')", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0, "' and '");
      String string0 = dOMNodePointer0.asPath();
      assertEquals("id('&apos; and &apos;')", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "\"]Da>E5P,}|", "|9}");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "", "org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000017", "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, pSVIElementNSImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLSelectElementImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/XMLNS[1]", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, ")S'Xpy@?,OF^ M");
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, "xml");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLAreaElementImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("id('xml')/)S'XPY@?,OF^ M[1]", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "org.apache.html.dom.HTMLOptGroupElementImpl");
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLSelectElementImpl0);
      String string0 = dOMNodePointer1.toString();
      assertEquals("/ORG.APACHE.HTML.DOM.HTMLOPTGROUPELEMENTIMPL[1]", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(hTMLDocumentImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Comment comment0 = hTMLDocumentImpl0.createComment("/");
      QName qName0 = new QName("y vs");
      HTMLTextAreaElementImpl hTMLTextAreaElementImpl0 = new HTMLTextAreaElementImpl(hTMLDocumentImpl0, "");
      Locale locale0 = Locale.ITALY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, hTMLTextAreaElementImpl0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, comment0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer", (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/processing-instruction('org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      EntityImpl entityImpl0 = new EntityImpl(pSVIDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, entityImpl0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("|9}");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextImpl textImpl0 = new TextImpl();
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl((CoreDocumentImpl) null, "<<unknown namespace>>", "<<unknown namespace>>", "6Rn0FfYXZ>rg");
      XML11Configuration xML11Configuration0 = new XML11Configuration();
      Locale locale0 = xML11Configuration0.getLocale();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIAttrNSImpl0, locale0);
      String string0 = dOMNodePointer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("$null", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "");
      Locale locale0 = Locale.PRC;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableRowElementImpl0, locale0, "");
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, documentTypeImpl0);
      dOMNodePointer0.remove();
      assertFalse(dOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, (Locale) null);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "emptn#yok");
      WMLTdElementImpl wMLTdElementImpl0 = new WMLTdElementImpl((WMLDocumentImpl) null, "http://www.w3.org/2000/xmlns/");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLTdElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "org.apache.html.dom.HTMLOptGroupElementImpl");
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0);
      QName qName0 = new QName("xml", "0ZbI-");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
      HTMLFontElementImpl hTMLFontElementImpl0 = new HTMLFontElementImpl(hTMLDocumentImpl0, "e]90@GD");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) hTMLFontElementImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      dOMNodePointer0.setValue(dOMNodePointer0);
      assertFalse(dOMNodePointer0.isCollection());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      dOMNodePointer0.setValue((Object) null);
      assertTrue(dOMNodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "org.apache.html.dom.HTMLOptGroupElementImpl");
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLSelectElementImpl0, locale0, "org.apache.html.dom.HTMLOptGroupElementImpl");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, (String) null);
      DocumentImpl documentImpl0 = new DocumentImpl(documentTypeImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(documentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "tTLxZLa", "<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLDocumentImpl0, locale0);
      EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(entityImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "BK5\b/");
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, "BK5\b/");
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(deferredDocumentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getDefaultNamespaceURI();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "')", "<<unknown namespace>>", "<<unknown namespace>>");
      dOMNodePointer0.setValue(pSVIElementNSImpl0);
      assertTrue(dOMNodePointer0.isActual());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      TextImpl textImpl0 = new TextImpl(pSVIDocumentImpl0, "nMie9S");
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "nMie9S");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      TextImpl textImpl0 = new TextImpl(pSVIDocumentImpl0, (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "/processing-instruction('");
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("|9}");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      dOMNodePointer0.setValue(hTMLTableRowElementImpl0);
      assertTrue(dOMNodePointer0.isActual());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      dOMNodePointer0.setValue(locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TextImpl textImpl0 = new TextImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName(",).hD :c", "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ',).hD :c:http://www.w3.org/2000/xmlns/'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLMenuElementImpl hTMLMenuElementImpl0 = new HTMLMenuElementImpl(hTMLDocumentImpl0, "cG");
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLMenuElementImpl0);
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
      
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      QName qName1 = new QName("", "<<unknown namespace>>");
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl0, "MiN*bq4WdsKMY");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLIsIndexElementImpl0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      TextImpl textImpl0 = new TextImpl(pSVIDocumentImpl0, "nMie9S");
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "nMie9S");
      dOMNodePointer0.getNamespaceURI((String) null);
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      WMLStrongElementImpl wMLStrongElementImpl0 = new WMLStrongElementImpl(wMLDocumentImpl0, "org.apache.html.dom.HTMLParamElementImpl");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLStrongElementImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("*g/Ifv58JP8hR");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "5Q@");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASectionImpl0, locale0, "");
      String string0 = dOMNodePointer0.getNamespaceURI("xmlns");
      assertNotNull(string0);
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "Cannot set property: ", "eSabE\"V%=", "1");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLBElementImpl wMLBElementImpl0 = new WMLBElementImpl(wMLDocumentImpl0, "1");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) documentTypeImpl0);
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLBElementImpl0, locale0);
      QName qName0 = new QName("xml", "R{3;VE2]a,9ck`Lt7");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, ")S'Xpy@?,OF^ M");
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, "xml");
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "\"]Da>E5P,}|");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, processingInstructionImpl0);
      QName qName0 = dOMNodePointer1.getName();
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(documentImpl0, "org.apache.html.dom.HTMLScriptElementImpl");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLNoopElementImpl wMLNoopElementImpl0 = new WMLNoopElementImpl(wMLDocumentImpl0, "Undefined function: ");
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLNoopElementImpl0, locale0, "org.apache.commons.jxpath.ri.parser.ParseException");
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "&C=qS=n");
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertEquals("Undefined function: ", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "\"]Da>E5P,}|");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.JAPANESE;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "\"true\"");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(commentImpl0, locale0, (String) null);
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      CDATASectionImpl cDATASectionImpl0 = new CDATASectionImpl(hTMLDocumentImpl0, "4^c-B$c%9? y1hO9U");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, cDATASectionImpl0);
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLBRElementImpl hTMLBRElementImpl0 = new HTMLBRElementImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLBRElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Text text0 = hTMLDocumentImpl0.createTextNode("6Rn0FfYXZ>rg");
      boolean boolean0 = DOMNodePointer.testNode((Node) text0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "preserve");
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/2000/xmlns/");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
      assertEquals("PRESERVE", qName0.getName());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "");
      QName qName0 = new QName("<<unknown namespace>>", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableRowElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "");
      QName qName0 = new QName("<<unknown namespace>>", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "TEXTAREA");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableRowElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "xml", "nid", "nid");
      QName qName0 = new QName("preserve");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "nid");
      boolean boolean0 = DOMNodePointer.testNode((Node) documentTypeImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("xmlns");
      HTMLIFrameElementImpl hTMLIFrameElementImpl0 = new HTMLIFrameElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLIFrameElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableRowElementImpl hTMLTableRowElementImpl0 = new HTMLTableRowElementImpl(hTMLDocumentImpl0, "Tw^$=7G r+OlQm_=\"");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLTableRowElementImpl0, (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HTMLHeadingElementImpl hTMLHeadingElementImpl0 = new HTMLHeadingElementImpl((HTMLDocumentImpl) null, "");
      Locale locale0 = Locale.forLanguageTag("");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHeadingElementImpl0, locale0, "");
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(nodeNameTest0, true, dOMNodePointer0);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, "K3OXzpAa!.|gz1");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) elementDefinitionImpl0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      NodePointer nodePointer1 = dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
      assertEquals(1, nodePointer1.getLength());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLMenuElementImpl hTMLMenuElementImpl0 = new HTMLMenuElementImpl(hTMLDocumentImpl0, "cG");
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLMenuElementImpl0);
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      dOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLMenuElementImpl hTMLMenuElementImpl0 = new HTMLMenuElementImpl(hTMLDocumentImpl0, "cG");
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLMenuElementImpl0);
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      NodePointer nodePointer1 = dOMNodePointer0.namespacePointer("http://www.w3.org/2000/xmlns/");
      assertFalse(nodePointer1.isCollection());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      dOMNodePointer0.getNamespaceURI();
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "");
      assertFalse(dOMNodePointer1.isAttribute());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLSelectElementImpl hTMLSelectElementImpl0 = new HTMLSelectElementImpl(hTMLDocumentImpl0, "xmlns");
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("xmlns");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, hTMLSelectElementImpl0);
      boolean boolean0 = dOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "BK5\b/");
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentTypeImpl0, locale0, "BK5\b/");
      boolean boolean0 = dOMNodePointer0.isLanguage("http://www.w3.org/2000/xmlns/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAreaElementImpl hTMLAreaElementImpl0 = new HTMLAreaElementImpl(hTMLDocumentImpl0, ")S'Xpy@?,OF^ M");
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAreaElementImpl0, locale0, "xml");
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "\"]Da>E5P,}|");
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(nullPointer0, dOMNodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, (Locale) null, "/text()");
      NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }
}
