/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 04:00:49 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)15;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5(9}Ny?l&zwA+");
      byteArray0[2] = (byte) (-31);
      pipedOutputStream0.write(byteArray0);
      pipedOutputStream0.write(4945);
      byteArray0[3] = (byte)70;
      pipedOutputStream0.close();
      byteArray0[4] = (byte)1;
      cRC32_0.update(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.read(byteArray0, 1, (int) (byte)1);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read(byteArray0, 1, (int) (byte)1);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.skip(0L);
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      checksumCalculatingInputStream0.read(byteArray1);
      checksumCalculatingInputStream0.read(byteArray0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (-1), (int) (byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-34), (byte)70);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream((Checksum) null, checksumCalculatingInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream1.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, sequenceInputStream0);
      byte[] byteArray0 = new byte[6];
      sequenceInputStream0.skip(4296L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 406);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream1.skip(1);
      checksumCalculatingInputStream0.read(byteArray0, (-1), 1);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      int int0 = checksumCalculatingInputStream1.read();
      assertEquals(1104745215L, checksumCalculatingInputStream1.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(4915275L, checksumCalculatingInputStream0.getValue());
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      File file0 = MockFile.createTempFile("]Yl5^", "]Yl5^");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EgA1UfFM");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.markSupported();
      checksumCalculatingInputStream0.skip((-1018L));
      checksumCalculatingInputStream0.skip(0L);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte) (-116);
      checksumCalculatingInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte) (-116), (int) (byte) (-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bJLQf|cn");
      Adler32 adler32_0 = new Adler32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, dataInputStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, mockFileInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)50;
      int int0 = checksumCalculatingInputStream0.read(byteArray0, 0, (-1267));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-18);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3629);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1, (byte)70);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream1);
      long long0 = checksumCalculatingInputStream0.skip((byte)81);
      assertEquals(5374034L, checksumCalculatingInputStream0.getValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, sequenceInputStream0);
      byte[] byteArray0 = new byte[6];
      sequenceInputStream0.skip(4296L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 406);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream1.skip(0);
      checksumCalculatingInputStream0.read(byteArray0, (-1), 280);
      checksumCalculatingInputStream0.read();
      ChecksumCalculatingInputStream checksumCalculatingInputStream2 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream2.getValue();
      checksumCalculatingInputStream1.read(byteArray0);
      checksumCalculatingInputStream0.skip((-1));
      checksumCalculatingInputStream2.getValue();
      int int0 = checksumCalculatingInputStream1.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      adler32_0.reset();
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.skip((byte)0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(29360479L, checksumCalculatingInputStream0.getValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-1), (byte)8);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip((byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 4235);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)70;
      byteArrayInputStream0.mark((-1));
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)70;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)70);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream((Checksum) null, checksumCalculatingInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream1.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte)38, (-1376));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)119;
      byteArray0[1] = (byte)119;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte) (-22);
      byteArray0[5] = (byte) (-22);
      byte byte5 = (byte) (-33);
      byteArray0[6] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      checksumCalculatingInputStream0.available();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, mockFileInputStream0);
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3629);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1, (byte)70);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream1);
      long long0 = checksumCalculatingInputStream0.skip((byte)0);
      assertEquals(65537L, checksumCalculatingInputStream0.getValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      adler32_0.reset();
      checksumCalculatingInputStream0.mark(2174);
      byte[] byteArray0 = new byte[3];
      sequenceInputStream0.mark((-1122));
      checksumCalculatingInputStream0.available();
      byteArray0[0] = (byte) (-1);
      checksumCalculatingInputStream0.read(byteArray0);
      byteArray0[1] = (byte) (-90);
      sequenceInputStream0.mark(2125);
      byteArray0[2] = (byte)104;
      checksumCalculatingInputStream0.skip(784L);
      checksumCalculatingInputStream0.read(byteArray0, 0, (int) (byte)104);
      int int0 = checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.read(byteArray0);
      long long0 = checksumCalculatingInputStream0.skip((-1));
      assertEquals(0L, long0);
      
      checksumCalculatingInputStream0.getValue();
      int int1 = checksumCalculatingInputStream0.read(byteArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)8, (byte)0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      long long0 = checksumCalculatingInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)49, (-111));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pushbackInputStream0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.read();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      sequenceInputStream0.available();
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read();
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(0L, long0);
      
      checksumCalculatingInputStream0.read(byteArray0);
      int int1 = checksumCalculatingInputStream0.read();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)52;
      byteArray0[0] = (byte)52;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)69;
      byteArray0[2] = (byte)69;
      byte byte3 = (byte)1;
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)69);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.close();
      checksumCalculatingInputStream0.getValue();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte)69, (int) (byte)69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)40;
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip(1194L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), (byte) (-19));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pipedInputStream0);
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)61;
      byteArray0[0] = (byte)61;
      byte byte1 = (byte) (-43);
      try { 
        checksumCalculatingInputStream0.skip(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      try { 
        checksumCalculatingInputStream0.skip(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
