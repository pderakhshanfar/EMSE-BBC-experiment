/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 20:00:47 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)28;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1440), 1);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1440
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1529), 47);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, sequenceInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1529
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-77);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-111), 23);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, dataInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, mockFileInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 123, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Adler32", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      checksumCalculatingInputStream0.read(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte) (-99);
      byteArray1[6] = (byte)6;
      byteArray1[7] = (byte) (-101);
      byteArray1[8] = (byte) (-49);
      cRC32_0.update(byteArray1);
      pipedInputStream0.markSupported();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)23;
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      checksumCalculatingInputStream1.getValue();
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      cRC32_0.update((int) (byte) (-96));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(0L);
      checksumCalculatingInputStream0.available();
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream1.read();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte) (-16), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      cRC32_0.reset();
      byteArray0[5] = (byte)0;
      cRC32_0.update(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)73;
      byteArray1[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read(byteArray0, (int) (byte)4, (int) (byte)1);
      checksumCalculatingInputStream0.read(byteArray1);
      checksumCalculatingInputStream0.getValue();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (-2925), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      cRC32_0.reset();
      byteArray0[5] = (byte)0;
      cRC32_0.update(byteArray0);
      byteArray0[6] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      byteArrayInputStream0.read();
      checksumCalculatingInputStream0.read(byteArray0, 0, 0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.getValue();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 6, 3353);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.mark(1);
      checksumCalculatingInputStream0.mark(1);
      long long0 = checksumCalculatingInputStream0.skip((-1L));
      assertEquals(0L, long0);
      
      int int0 = checksumCalculatingInputStream0.read();
      byte[] byteArray0 = new byte[0];
      int int1 = checksumCalculatingInputStream0.read(byteArray0);
      assertTrue(int1 == int0);
      
      byte[] byteArray1 = new byte[0];
      int int2 = checksumCalculatingInputStream0.read(byteArray1, (-1), (-545));
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-47);
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(1L, long0);
      
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      InputStream inputStream0 = null;
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (-1242), (-1144));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte) (-49);
      cRC32_0.update(byteArray0);
      pipedInputStream0.markSupported();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      pipedOutputStream0.write(byteArray1);
      checksumCalculatingInputStream0.available();
      checksumCalculatingInputStream0.skip((-2682L));
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.skip((-2682L));
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.getValue();
      long long0 = checksumCalculatingInputStream0.skip((-2682L));
      assertEquals(1447696743L, checksumCalculatingInputStream0.getValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      cRC32_0.reset();
      byteArray0[5] = (byte)0;
      cRC32_0.update(byteArray0);
      byteArray0[6] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read(byteArray0, 0, 0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.getValue();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 7, 3353);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, sequenceInputStream0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark((-1));
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      cRC32_0.reset();
      byteArray0[5] = (byte)0;
      cRC32_0.update(byteArray0);
      byteArray0[6] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read(byteArray0, 0, 0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.getValue();
      long long0 = checksumCalculatingInputStream0.skip(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      MockFile mockFile0 = new MockFile("u3)aNp>zDD@!", "u3)aNp>zDD@!");
      File file0 = MockFile.createTempFile("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", "org.apache.commons.compress.utils.ChecksumCalculatingInputStream", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      byte[] byteArray0 = new byte[8];
      checksumCalculatingInputStream0.available();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)7;
      pushbackInputStream0.markSupported();
      mockFile0.delete();
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)62;
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)0;
      cRC32_0.update(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.read();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-47);
      sequenceInputStream0.available();
      byteArray1[7] = (byte) (-41);
      checksumCalculatingInputStream0.read(byteArray1);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.skip((-1));
      checksumCalculatingInputStream0.getValue();
      long long0 = checksumCalculatingInputStream0.skip(0L);
      assertEquals(1427652049L, cRC32_0.getValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-110);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      long long0 = checksumCalculatingInputStream0.skip((-1L));
      assertEquals(1997036262L, checksumCalculatingInputStream0.getValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      pipedInputStream0.markSupported();
      checksumCalculatingInputStream0.close();
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 4352);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      int int0 = 559;
      checksumCalculatingInputStream0.mark((byte)0);
      pushbackInputStream0.mark((-803));
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 559, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream0);
      checksumCalculatingInputStream0.getValue();
      try { 
        checksumCalculatingInputStream0.skip(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
