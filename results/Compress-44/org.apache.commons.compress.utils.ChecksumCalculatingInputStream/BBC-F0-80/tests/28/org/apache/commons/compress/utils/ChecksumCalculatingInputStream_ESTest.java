/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:06:02 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(checksumCalculatingInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, pushbackInputStream0);
      checksumCalculatingInputStream1.read();
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream1.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      ChecksumCalculatingInputStream checksumCalculatingInputStream2 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream1);
      ChecksumCalculatingInputStream checksumCalculatingInputStream3 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray0 = null;
      int int0 = 1102;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read((byte[]) null, 1102, 1102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3188);
      byteArrayInputStream0.mark(1830);
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(adler32_0, checksumCalculatingInputStream0);
      checksumCalculatingInputStream1.skip(1374L);
      checksumCalculatingInputStream1.read(byteArray0, 0, (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip((-805L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Adler32 adler32_0 = new Adler32();
      adler32_0.reset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 589);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip((byte)0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      cRC32_0.reset();
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 1);
      byteArrayInputStream0.mark(0);
      cRC32_0.update((int) (byte) (-44));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-3583), 4);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (-1564), 4);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream2);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip(1508L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1564
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)4);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      checksumCalculatingInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("", "bc@3s");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, dataInputStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(adler32_0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream1.read(byteArray0, 1647, (int) (byte) (-54));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Adler32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.mark((-3502));
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, dataInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-78);
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte) (-1), 3666);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      try { 
        checksumCalculatingInputStream0.skip((-382L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, dataInputStream0);
      byte[] byteArray0 = new byte[0];
      checksumCalculatingInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(adler32_0, checksumCalculatingInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Adler32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read(byteArray0, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-10);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, dataInputStream0);
      byte[] byteArray0 = new byte[0];
      checksumCalculatingInputStream0.read(byteArray0);
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      int int0 = 1067;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1067);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Checksum checksum0 = null;
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, pipedInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      adler32_0.reset();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1564), (byte) (-78));
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(adler32_0, checksumCalculatingInputStream0);
      checksumCalculatingInputStream1.skip((-985L));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1564), (-1127));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip((-1564));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pipedInputStream0);
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)73;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte)73, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-1389L));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, sequenceInputStream0);
      checksumCalculatingInputStream0.read();
      byte[] byteArray0 = new byte[1];
      sequenceInputStream0.markSupported();
      checksumCalculatingInputStream0.available();
      sequenceInputStream0.close();
      sequenceInputStream0.close();
      byteArray0[0] = (byte) (-54);
      sequenceInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.skip((-1));
      checksumCalculatingInputStream0.read(byteArray0, (-1), (-1573));
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      adler32_0.reset();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      int int0 = 0;
      checksumCalculatingInputStream0.close();
      adler32_0.update(byteArray0, 0, 0);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.available();
      checksumCalculatingInputStream0.available();
      checksumCalculatingInputStream0.read(byteArray0);
      int int1 = (-619);
      // Undeclared exception!
      try { 
        adler32_0.update(byteArray0, 0, (int) (byte) (-78));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Adler32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      checksumCalculatingInputStream0.close();
      adler32_0.update(1422);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        adler32_0.update(byteArray0, (-230), (-230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Adler32", e);
      }
  }
}
