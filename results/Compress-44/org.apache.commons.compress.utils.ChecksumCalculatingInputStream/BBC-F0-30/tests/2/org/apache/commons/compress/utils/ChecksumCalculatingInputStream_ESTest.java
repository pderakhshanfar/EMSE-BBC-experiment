/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:54:30 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, mockFileInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-10);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte)57, (int) (byte) (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Adler32", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, dataInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte) (-61), 3727);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip((byte)7);
      checksumCalculatingInputStream0.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-8), 7);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      byte[] byteArray1 = new byte[5];
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-8);
      byteArray2[1] = (byte) (-8);
      byteArray2[2] = (byte) (-31);
      byteArray2[3] = (byte) (-8);
      byteArray2[4] = (byte) (-8);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, dataInputStream0);
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray1 = new byte[0];
      checksumCalculatingInputStream0.read(byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Checksum checksum0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-848), (byte)0);
      byteArrayInputStream0.close();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip((byte)0);
      byteArrayInputStream0.markSupported();
      int int0 = checksumCalculatingInputStream0.available();
      checksumCalculatingInputStream0.read();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(enumeration0).hasMoreElements();
      doReturn(checksumCalculatingInputStream0, (Object) null, (Object) null, (Object) null, (Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream((Checksum) null, sequenceInputStream0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArrayInputStream0.markSupported();
      checksumCalculatingInputStream0.read(byteArray1);
      checksumCalculatingInputStream1.read(byteArray1);
      checksumCalculatingInputStream1.getValue();
      checksumCalculatingInputStream0.getValue();
      int int1 = 0;
      checksumCalculatingInputStream0.read(byteArray0, int1, int0);
      checksumCalculatingInputStream1.read(byteArray0);
      checksumCalculatingInputStream0.getValue();
      ChecksumCalculatingInputStream checksumCalculatingInputStream2 = new ChecksumCalculatingInputStream(checksum0, sequenceInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream3 = new ChecksumCalculatingInputStream(checksum0, checksumCalculatingInputStream0);
      checksumCalculatingInputStream3.read(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Checksum checksum0 = null;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      InputStream inputStream0 = null;
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, (InputStream) null);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-8), 7);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, byteArrayInputStream0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte) (-8);
      byteArrayInputStream0.reset();
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte) (-8);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)0, (byte)0);
      byteArrayInputStream0.read();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.getValue();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)40;
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)47;
      int int0 = (-2987);
      int int1 = 1415;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2987), 1415);
      byteArrayInputStream0.close();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip((byte)40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2987
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer.allocateDirect(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, pipedInputStream0);
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip((byte)0);
      checksumCalculatingInputStream0.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3171, (-1));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.mark(521);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, sequenceInputStream0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read(byteArray0, 0, (int) (byte)0);
      checksumCalculatingInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      assertNotNull(cRC32_0);
      assertEquals(0L, cRC32_0.getValue());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
      
      try { 
        checksumCalculatingInputStream0.skip(1099L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      assertNotNull(cRC32_0);
      assertEquals(0L, cRC32_0.getValue());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, sequenceInputStream0);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      int int0 = checksumCalculatingInputStream0.read(byteArray0, (int) (byte)1, 0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-75), (byte)1, (byte)0, (byte)76, (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      assertNotNull(adler32_0);
      assertEquals(1L, adler32_0.getValue());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-328));
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte) (-127), (byte)11}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-328), byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte) (-127), (byte)11}, byteArray0);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals((-328), byteArrayInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(4, byteArray0.length);
      
      long long0 = checksumCalculatingInputStream0.getValue();
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte) (-127), (byte)11}, byteArray0);
      assertEquals(1L, long0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals((-328), byteArrayInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      assertNotNull(cRC32_0);
      assertEquals(0L, cRC32_0.getValue());
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      assertNotNull(cRC32_0);
      assertEquals(0L, cRC32_0.getValue());
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
      
      cRC32_0.update(1);
      assertEquals(2768625435L, cRC32_0.getValue());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      assertNotNull(adler32_0);
      assertEquals(1L, adler32_0.getValue());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pipedInputStream0);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      assertNotNull(adler32_0);
      assertEquals(1L, adler32_0.getValue());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)106, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)106, (byte)0}, byteArray0);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(4, byteArray0.length);
      
      int int0 = checksumCalculatingInputStream0.read(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)106, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      assertNotNull(cRC32_0);
      assertEquals(0L, cRC32_0.getValue());
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
      
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      assertNotNull(adler32_0);
      assertEquals(1L, adler32_0.getValue());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)109;
      byte byte0 = (byte)125;
      byteArray0[5] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-103), (byte)0, (byte)0, (byte)109, (byte)125}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-103), (byte)0, (byte)0, (byte)109, (byte)125}, byteArray0);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(6, byteArray0.length);
      
      checksumCalculatingInputStream0.close();
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-103), (byte)0, (byte)0, (byte)109, (byte)125}, byteArray0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte)109, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      assertNotNull(adler32_0);
      assertEquals(1L, adler32_0.getValue());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(checksumCalculatingInputStream0);
      assertEquals(1L, adler32_0.getValue());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(5, byteArray0.length);
      
      int int0 = checksumCalculatingInputStream0.read();
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(92, int0);
      assertEquals(6094941L, adler32_0.getValue());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(6094941L, checksumCalculatingInputStream0.getValue());
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, sequenceInputStream0);
      assertNotNull(checksumCalculatingInputStream0);
      
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3171, (-1));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.mark(521);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, sequenceInputStream0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read(byteArray0, 0, (int) (byte)0);
      checksumCalculatingInputStream0.read(byteArray0);
      byteArrayInputStream0.read();
      sequenceInputStream0.skip(0L);
      checksumCalculatingInputStream0.read(byteArray0, 521, (-1962));
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      
      long long0 = checksumCalculatingInputStream0.skip((-2063L));
      assertEquals(0L, long0);
  }
}
