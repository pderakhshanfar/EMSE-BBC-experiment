/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 14:30:34 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byte byte0 = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      int int0 = 1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-34), 1);
      byteArrayInputStream0.mark((-1466));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip((-425L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray1 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      CRC32 cRC32_0 = new CRC32();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1, (-960), 1192);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream1);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -960
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer.wrap(byteArray0);
      adler32_0.update(byteBuffer0);
      ByteBuffer.wrap(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 1529, (int) (byte) (-126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Adler32", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read(byteArray0, 1, 1);
      assertEquals(65537L, checksumCalculatingInputStream0.getValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CRC32 cRC32_0 = new CRC32();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-33), 7);
      byteArrayInputStream0.reset();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Adler32 adler32_0 = new Adler32();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      checksumCalculatingInputStream0.close();
      long long0 = (-2040L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 1, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[3];
      Adler32 adler32_1 = new Adler32();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_1, pushbackInputStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      checksumCalculatingInputStream0.read(byteArray0, 0, 0);
      int int0 = 186;
      int int1 = 367;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 367, (-2126));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip(0L);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(1104745215L, checksumCalculatingInputStream0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      pipedOutputStream0.write(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pipedInputStream0);
      byte[] byteArray1 = new byte[0];
      checksumCalculatingInputStream0.read(byteArray1);
      checksumCalculatingInputStream0.available();
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-122);
      pipedOutputStream0.write(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, dataInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, dataInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-122);
      dataInputStream0.skip((byte) (-54));
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)18;
      byteArray1[4] = (byte) (-54);
      byteArray1[5] = (byte) (-122);
      byteArray1[7] = (byte)3;
      byteArray1[8] = (byte) (-54);
      checksumCalculatingInputStream0.read(byteArray1);
      checksumCalculatingInputStream0.available();
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(1039549497L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(3523407757L, checksumCalculatingInputStream0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, pipedInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      adler32_0.update(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.skip(0L);
      checksumCalculatingInputStream0.read(byteArray0, 0, 186);
      sequenceInputStream0.read(byteArray0, 186, 1);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(adler32_0, checksumCalculatingInputStream0);
      checksumCalculatingInputStream1.read(byteArray0, 400, 1);
      ChecksumCalculatingInputStream checksumCalculatingInputStream2 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream2.getValue();
      checksumCalculatingInputStream2.read();
      checksumCalculatingInputStream2.read();
      int int0 = checksumCalculatingInputStream1.read(byteArray0, 1, (-1));
      assertEquals(65537L, adler32_0.getValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)18;
      pipedOutputStream0.write(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.available();
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(76677478L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(4189500703L, checksumCalculatingInputStream0.getValue());
      assertEquals(186, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      pipedOutputStream0.write(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read((byte[]) null, (int) (byte) (-122), 879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      adler32_0.update(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.skip((byte) (-100));
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.read(byteArray0);
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(61538773L, adler32_0.getValue());
      assertEquals(61538773L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byte byte0 = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      adler32_0.update(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte)95;
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte)95;
      byteArray1[5] = (byte)95;
      adler32_0.update(byteArray1);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte) (-107), (int) (byte)95);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      int int0 = 2749;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2749);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2749);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream0);
      bufferedInputStream0.markSupported();
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-655), (byte)92);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (byte)107);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream0);
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)18;
      pipedOutputStream0.write(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, dataInputStream0);
      checksumCalculatingInputStream0.skip((byte)18);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(30933329L, checksumCalculatingInputStream0.getValue());
      assertEquals(202, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.read();
      long long0 = checksumCalculatingInputStream0.skip((-1L));
      assertEquals(0L, long0);
      
      int int0 = checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.read();
      int int1 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      adler32_0.update(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.skip((byte) (-100));
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(10289309L, adler32_0.getValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(0L, checksumCalculatingInputStream0.getValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      byte[] byteArray0 = new byte[4];
      cRC32_0.update(byteArray0);
      byteArray0[0] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      cRC32_0.update(byteBuffer0);
      byteArray0[1] = (byte) (-128);
      cRC32_0.reset();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip((byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-92);
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      checksumCalculatingInputStream0.mark((-1));
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, bufferedInputStream0);
      checksumCalculatingInputStream0.available();
      try { 
        checksumCalculatingInputStream0.skip(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 0, (-1974));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-112);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.markSupported();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      try { 
        checksumCalculatingInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }
}
