/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:59:17 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)117;
      byteArray1[4] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Adler32 adler32_0 = new Adler32();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-467), 254);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.mark(254);
      adler32_0.update(byteArray0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -467
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-15), (byte)1);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip(271L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -15
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)117;
      byteArray1[4] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Adler32 adler32_0 = new Adler32();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-467), 254);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      adler32_0.update(byteArray0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pushbackInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      int int0 = (-1);
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (-1), (int) (byte) (-95));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pushbackInputStream0);
      long long0 = checksumCalculatingInputStream0.skip(60L);
      assertEquals(3523407757L, checksumCalculatingInputStream0.getValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-75);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read();
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(1104745215L, checksumCalculatingInputStream0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read();
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(3946417127L, checksumCalculatingInputStream0.getValue());
      assertEquals(87, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/DeANF7^ZatCv10.tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Y6_u]bDw[~C");
      File file0 = MockFile.createTempFile("DeANF7^ZatCv1", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      cRC32_0.update(1623);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.skip(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-23);
      byte byte1 = (byte) (-12);
      try { 
        checksumCalculatingInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      File file0 = MockFile.createTempFile("DeANF7^ZatCv1", "DeANF7^ZatCv1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      int int0 = 787;
      cRC32_0.update(787);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 787, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)39, (-72));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, pushbackInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, (-72), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      adler32_0.update(byteArray0, (int) (byte)0, (int) (byte)0);
      CRC32 cRC32_0 = new CRC32();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 379);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, pipedInputStream0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte) (-116);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-72);
      byteArray1[5] = (byte) (-76);
      pipedOutputStream0.write((int) (byte) (-1));
      byteArray1[6] = (byte) (-1);
      int int0 = checksumCalculatingInputStream0.read(byteArray1);
      assertEquals(4278190080L, checksumCalculatingInputStream0.getValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)70;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-113);
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-1);
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, dataInputStream0);
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      int int0 = 1128;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1128);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pipedInputStream0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1450);
      adler32_0.update(byteBuffer0);
      checksumCalculatingInputStream0.mark(0);
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)42;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      try { 
        checksumCalculatingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pipedInputStream0);
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)39, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 2288, 1710);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      checksumCalculatingInputStream0.getValue();
      adler32_0.reset();
      checksumCalculatingInputStream0.available();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.skip(47L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(706);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, pipedInputStream0);
      checksumCalculatingInputStream0.mark(706);
      pipedInputStream0.mark(706);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      File file0 = MockFile.createTempFile("DeANF7^ZatCv1", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      cRC32_0.update(1623);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.skip(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-12);
      checksumCalculatingInputStream0.read(byteArray0);
      int int0 = checksumCalculatingInputStream0.read(byteArray0, (int) (byte)0, (-1));
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      adler32_0.update(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray1 = new byte[1];
      sequenceInputStream0.close();
      byteArray1[0] = (byte)0;
      checksumCalculatingInputStream0.read(byteArray1, (-786), (int) (byte)0);
      checksumCalculatingInputStream0.read(byteArray1);
      checksumCalculatingInputStream0.read(byteArray1);
      byte[] byteArray2 = new byte[0];
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.mark((byte)0);
      sequenceInputStream0.read(byteArray2);
      checksumCalculatingInputStream0.read(byteArray1, (-1910), 2131);
      int int0 = checksumCalculatingInputStream0.read(byteArray0, 0, 0);
      assertEquals(12714177L, adler32_0.getValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      adler32_0.update(byteArray0, (int) (byte)0, (int) (byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, dataInputStream0);
      checksumCalculatingInputStream0.available();
      byte[] byteArray1 = new byte[0];
      checksumCalculatingInputStream0.read(byteArray1);
      try { 
        checksumCalculatingInputStream0.skip(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      File file0 = MockFile.createTempFile("DeANF7^ZatCv1", "DeANF7^ZatCv1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      cRC32_0.update(787);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      checksumCalculatingInputStream0.getValue();
      long long0 = checksumCalculatingInputStream0.skip(787);
      assertEquals(1455205971L, cRC32_0.getValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(706);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, pipedInputStream0);
      checksumCalculatingInputStream0.mark(706);
      pipedInputStream0.mark(706);
      try { 
        checksumCalculatingInputStream0.skip(706);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
