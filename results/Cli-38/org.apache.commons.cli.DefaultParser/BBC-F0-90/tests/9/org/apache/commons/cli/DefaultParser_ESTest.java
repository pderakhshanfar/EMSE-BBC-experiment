/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:35:21 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-8$lLRz7hB'+H'ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addOption("8", "8");
      defaultParser0.parse(options1, stringArray0, true);
      defaultParser0.handleConcatenatedOptions("-8$lLRz7hB'+H'ZntSCh");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Option option0 = new Option("8", true, "-8lz7qh+ZntSCh");
      option0.setArgs((-1031));
      Options options1 = options0.addOption(option0);
      try { 
        defaultParser0.parse(options1, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -8lz7qh+ZntSCh
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yes";
      stringArray0[1] = "yes";
      stringArray0[2] = "yes";
      stringArray0[3] = "yes";
      stringArray0[4] = "}TfWu#Lu4MSf32s$'";
      stringArray0[5] = "yes";
      stringArray0[6] = "yes";
      stringArray0[7] = "";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption((String) null, "true", false, "b/YWjOvo8n_");
      options0.addOption("s", "--=m/%dm:2Y\" L*zWm6j0", false, "s");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--=m/%dm:2Y\" L*zWm6j0";
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'true', '--=m/%dm:2Y\" L*zWm6j0')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-=U-JO|6K5:C";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Option option0 = new Option("8", true, "-8lz7qh+ZntSCh");
      options0.addOption(option0);
      option0.addValueForProcessing("s");
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      Option option0 = new Option("8", true, "-8lz7qh+ZntSCh");
      options0.addOption(option0);
      option0.addValueForProcessing("s");
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yes";
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Option option0 = new Option("yes", (String) null);
      properties0.put(object0, option0);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("ns", "--=m/%me2JY\" L*zWfj0", false, "ns");
      options0.addRequiredOption("ns", "ns", true, "--");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ns";
      stringArray0[1] = "8";
      stringArray0[2] = "--=m/%me2JY\" L*zWfj0";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: '--=m/%me2JY\" L*zWfj0', 'ns')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-=-JO65:C";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      Option option0 = new Option("8", true, "-8lz7qh+ZntSCh");
      Options options1 = options0.addOption(option0);
      option0.addValueForProcessing("s");
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse((Options) null, stringArray0, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yes";
      stringArray0[1] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, false);
      Properties properties0 = new Properties();
      properties0.put(commandLine0, "--");
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.CommandLine cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("a", "a", false, "--=m/`mf2Y\" L*zWm8j0");
      DefaultParser defaultParser0 = new DefaultParser();
      options1.addOption("a", "{=um", false, "{=um");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{=um";
      stringArray0[1] = "a";
      stringArray0[2] = "--=m/`mf2Y\" L*zWm8j0";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'a', '{=um')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-=-JO65:C";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Option option0 = new Option("8", true, "-8lz7qh+ZntSCh");
      options0.addOption(option0);
      option0.addValueForProcessing("s");
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("..:lIj.IL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("8", true, "8");
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8";
      stringArray0[1] = "8";
      stringArray0[2] = "!&fso! j[df]&G_XX";
      stringArray0[3] = "8";
      stringArray0[4] = "8";
      stringArray0[5] = "-8";
      stringArray0[6] = "-8";
      stringArray0[7] = "8";
      stringArray0[8] = "-8";
      defaultParser0.parse(options0, stringArray0, properties0, true);
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: 8
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("yes", true, "yes");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[8];
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "-8$lLRz7h'+H'ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("8", "--tH-5kAk|=e|");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -8$lLRz7h'+H'ZntSCh
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "-8$lLRz7h'+H'ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("8", "--tH-5kAk|=e|");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -8$lLRz7h'+H'ZntSCh
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Option option0 = new Option("8", true, "-8lz7qh+ZntSCh");
      option0.setArgs(3693);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.cli.DefaultParser";
      stringArray0[1] = "-($4o=tH";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -($4o=tH
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      options0.addRequiredOption("8", "-=-JO65:C", true, "8");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8";
      stringArray0[1] = "8";
      stringArray0[2] = "8";
      stringArray0[3] = "-8l#Lz7h'+'ZntSCh";
      stringArray0[4] = "-8l#Lz7h'+'ZntSCh";
      stringArray0[5] = "-=-JO65:C";
      Properties properties0 = new Properties((Properties) null);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      Option option0 = new Option("8", true, "-8lz7qh+ZntSCh");
      option0.setArgs((-2));
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("true", "-,", false, "-true");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "true";
      stringArray0[1] = "-true";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-%=U-JO|65:C";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("i", ",%\"vw- |", true, "Illegal option name '");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Illegal option name '";
      stringArray0[1] = "i";
      stringArray0[2] = "i";
      stringArray0[3] = "-,%\"vw- |";
      stringArray0[4] = ",%\"vw- |";
      stringArray0[5] = "-8";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -8
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("D", "[ Options: [ short ", true, "--=m/`mf2Y\" L*zWm8j0");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "--=m/`mf2Y\" L*zWm8j0";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("ns", "--=m/%me2JY\" L*zWfj0", false, "ns");
      Options options1 = options0.addRequiredOption("ns", "ns", true, "--");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ns";
      stringArray0[1] = "8";
      stringArray0[2] = "--=m/%me2JY\" L*zWfj0";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: '--=m/%me2JY\" L*zWfj0', 'ns')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("D", "[ Options: [ short ", false, "--=m/`mf2Y\" L*zWm8j0");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D";
      stringArray0[1] = "D";
      stringArray0[2] = "--=m/`mf2Y\" L*zWm8j0";
      try { 
        defaultParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=m/`mf2Y\" L*zWm8j0
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "-8lz7qh+ZntSCh";
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      options0.addRequiredOption("8", "8", true, "-8z7qZn!Ch");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-8";
      stringArray0[1] = "---8z7qZn)Ch";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("8", true, "-8z7qZn!Ch");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]";
      stringArray0[1] = "8";
      stringArray0[2] = "-8";
      stringArray0[3] = "-";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addRequiredOption("8", "8", true, "-8z7qZn!Ch");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#Vsn";
      stringArray0[1] = "-8";
      stringArray0[2] = "8";
      stringArray0[3] = "8";
      stringArray0[4] = "-8z7qZn!Ch";
      stringArray0[5] = "-8";
      stringArray0[6] = "-8";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[ Options: [ short java.util.LinkedHashMap@0000000003 ] [ long {} ]";
      stringArray0[1] = "8";
      stringArray0[2] = "Py=~0t";
      stringArray0[3] = "-";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("8", "K1,1Nc3s*Q4-ESjn", true, "K1,1Nc3s*Q4-ESjn");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "K1,1Nc3s*Q4-ESjn";
      stringArray0[1] = "-8";
      stringArray0[2] = "8";
      stringArray0[3] = "-8";
      stringArray0[4] = "K1,1Nc3s*Q4-ESjn";
      stringArray0[5] = "-8";
      stringArray0[6] = "---8";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: ---8
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yes";
      stringArray0[1] = "--";
      defaultParser0.parse(options0, stringArray0, false);
      try { 
        defaultParser0.handleConcatenatedOptions("--19");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --19
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("8", "8", true, "_-8z7qZn!Ch");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8";
      stringArray0[1] = "8";
      stringArray0[2] = "-8";
      stringArray0[3] = "-,xnv@--*=]";
      stringArray0[4] = "-8";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: 8
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      options0.addRequiredOption("8", "-8z7qZn!Ch", true, "~{H9]Fqnsc");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-8";
      stringArray0[1] = "#Vsn";
      stringArray0[2] = "-8";
      stringArray0[3] = "-8z7qZn!Ch";
      stringArray0[4] = "~{H9]Fqnsc";
      stringArray0[5] = "8";
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("-8z7qZn!Ch");
      defaultParser0.handleConcatenatedOptions("-8");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      Options options1 = options0.addRequiredOption("8", "8", true, "_-8z7qZn!Ch");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_-8z7qZn!Ch";
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: 8
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put(",(%<Ur^?5j", defaultParser0);
      try { 
        defaultParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
