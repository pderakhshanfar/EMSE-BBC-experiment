/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 02:58:38 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'y";
      stringArray0[1] = "-=,";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-=,";
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "ej");
      option0.addValueForProcessing("N");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--N";
      stringArray0[1] = "ej";
      stringArray0[2] = "--N";
      stringArray0[3] = "ej";
      stringArray0[4] = "5Jw*/xZ'<sgf;";
      stringArray0[5] = "N";
      stringArray0[6] = "-NOtMAA_L_2WED";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-e";
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("OqALJ", "OqALJ", false, "OqALJ");
      Option option0 = new Option("OqALJ", "--=", false, "OqALJ");
      options1.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--=";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'OqALJ', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'y";
      stringArray0[1] = "-=,";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "ej");
      option0.addValueForProcessing("N");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--N";
      stringArray0[1] = "ej";
      stringArray0[2] = "--N";
      stringArray0[3] = "ej";
      stringArray0[4] = "5Jw*/xZ'<sgf;";
      stringArray0[5] = "N";
      stringArray0[6] = "-NOtMAA_L_2WED";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put(options0, options0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "=";
      stringArray0[1] = "e1Cp3lggx~";
      stringArray0[2] = "=";
      stringArray0[3] = "=";
      stringArray0[4] = "=";
      stringArray0[5] = "=";
      stringArray0[6] = "=";
      stringArray0[7] = "w!}yZ~";
      stringArray0[8] = "=";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Options cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("OjqALE", "OjqALE", true, "OjqALE");
      String[] stringArray0 = new String[1];
      options1.addRequiredOption("OjqALE", "---N", true, "--=");
      stringArray0[0] = "--=";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'OjqALE', '---N')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "FJ)EE";
      stringArray0[1] = ")T(k/UVC";
      stringArray0[2] = "-=BTI";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "ej");
      option0.addValueForProcessing("N");
      options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--N";
      stringArray0[1] = "ej";
      stringArray0[2] = "--N";
      stringArray0[3] = "ej";
      stringArray0[4] = "5Jw*/xZ'<sgf;";
      stringArray0[5] = "N";
      stringArray0[6] = "-NOtMAA_L_2WED";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sJj{gru?a";
      stringArray0[1] = "sJj{gru?a";
      stringArray0[2] = "sJj{gru?a";
      stringArray0[3] = "sJj{gru?a";
      stringArray0[4] = "sJj{gru?a";
      stringArray0[5] = "sJj{gru?a";
      defaultParser0.parse(options0, stringArray0, false);
      try { 
        defaultParser0.handleConcatenatedOptions("-Sv");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -Sv
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "sz;&fS&9i}", true, "0JiWdtsT9m&YnaPs0");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7.";
      stringArray0[1] = "0JiWdtsT9m&YnaPs0";
      stringArray0[2] = "0JiWdtsT9m&YnaPs0";
      stringArray0[3] = "0JiWdtsT9m&YnaPs0";
      option0.addValueForProcessing("0JiWdtsT9m&YnaPs0");
      defaultParser0.parse(options1, stringArray0, false);
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("iNK(`XDj21Lp;/cc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("NOtMAA_L_2WED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "sQC-6,_=?xlR^|_");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "[ARG...]", true, "1");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.cli.AlreadySelectedException";
      defaultParser0.parse(options1, stringArray0, true);
      defaultParser0.handleConcatenatedOptions("--");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "N");
      options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-NOtMAA_L_2WED";
      option0.setArgs((-3048));
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -NOtMAA_L_2WED
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-N=";
      Option option0 = new Option("N", "-N=", true, "-N=");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-N=";
      Option option0 = new Option("N", "-N=", true, "-N=");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "N");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-NOtMAA_L_2WED";
      option0.setArgs((-2));
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-N=";
      Option option0 = new Option("N", "-N=", true, "-N=");
      Options options1 = options0.addOption(option0);
      option0.setArgs((-1));
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -N=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-N=";
      Option option0 = new Option("N", "-N=", true, "-N=");
      Options options1 = options0.addOption(option0);
      defaultParser0.parse(options1, stringArray0, true);
      option0.setArgs((-1));
      defaultParser0.handleConcatenatedOptions("-N=");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("N", "s`", true, "N");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-N";
      stringArray0[1] = "s`";
      stringArray0[2] = "-s`^ VB1]O'_?E";
      stringArray0[3] = "N";
      stringArray0[4] = "N";
      stringArray0[5] = "-e&=";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -e&=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", false, "N");
      option0.setArgs(3859);
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-NOtMAA_L_2WED";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("N", "s`", false, "N");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-N";
      stringArray0[1] = "s`";
      stringArray0[2] = "-s`^ VB1]O'_?E";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -s`^ VB1]O'_?E
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Either opt or longOpt must be specified";
      stringArray0[1] = "N";
      stringArray0[2] = "N";
      Option option0 = new Option("N", "true", false, "N");
      options0.addOption(option0);
      stringArray0[3] = "-true";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("NO_7MAGS_ALLO2WED", "NO_7MAGS_ALLO2WED", false, "NO_7MAGS_ALLO2WED");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NO_7MAGS_ALLO2WED";
      stringArray0[1] = "-NO_7MAGS_ALLO2WED";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-N=";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", false, "q(A=J,Bi[q4j");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--N=";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --N=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("OqALJ", "OqALJ", false, "OqALJ");
      Option option0 = new Option("OqALJ", "--=", false, "OqALJ");
      Options options2 = options1.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--=";
      try { 
        defaultParser0.parse(options2, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'OqALJ', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "7.");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--N=";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--;h^s^@7E.!JzjkSH";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("N", "N", true, "N");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--N";
      stringArray0[1] = "---N\"OtMAAL_2WED";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "N");
      options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--N";
      stringArray0[1] = "N";
      stringArray0[2] = "--N";
      stringArray0[3] = "----N=";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "ej");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".Vuzp5o;";
      stringArray0[1] = "--N";
      stringArray0[2] = "-";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~_:'#*l`Mq";
      stringArray0[1] = "--";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("ej8", "N", true, "N");
      option0.setOptionalArg(true);
      options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[15];
      stringArray0[0] = "--N";
      stringArray0[1] = "--N";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addRequiredOption((String) null, "--8Sf*v +^#cM=pm", true, "-8n{-6J=[");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--8Sf*v +^#cM=pm";
      try { 
        defaultParser0.parse(options1, stringArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: --8Sf*v +^#cM=pm
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "=";
      Properties properties0 = new Properties();
      properties0.put("=", options0);
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-e7n";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", "N", true, "ej");
      options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--N";
      stringArray0[1] = "ej";
      stringArray0[2] = ".Vuzpo;";
      stringArray0[3] = "ej";
      stringArray0[4] = "@iG1#";
      stringArray0[5] = "N";
      stringArray0[6] = "-NOtMAA_L_2WED";
      stringArray0[7] = "--N";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: N
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("N", true, "N");
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "N";
      stringArray0[1] = "-N";
      stringArray0[2] = "N";
      stringArray0[3] = "-N";
      stringArray0[4] = "-N";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: N
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
