/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:00:05 GMT 2021
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class $Gson$Types_ESTest extends $Gson$Types_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class0, class0, typeArray0);
      Properties properties0 = new Properties();
      Object object0 = properties0.put(parameterizedType0, typeArray0[3]);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      .Gson.Types.checkNotPrimitive((Type) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Type type0 = .Gson.Types.resolve((Type) null, class0, (Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<String> class0 = String.class;
      Type[] typeArray0 = .Gson.Types.EMPTY_TYPE_ARRAY;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class0, class0, typeArray0);
      int int0 = .Gson.Types.hashCodeOrZero(parameterizedType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Type type0 = .Gson.Types.getGenericSupertype((Type) null, class0, class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      Class<Object> class0 = Object.class;
      Type type0 = .Gson.Types.canonicalize(class0);
      typeArray0[1] = type0;
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf(typeArray0[1]);
      Class class1 = (Class).Gson.Types.getArrayComponentType(genericArrayType0);
      assertFalse(class1.isInterface());
  }
}
