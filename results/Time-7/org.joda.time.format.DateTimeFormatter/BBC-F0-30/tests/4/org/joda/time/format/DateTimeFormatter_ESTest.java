/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 16:25:18 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnmappableCharacterException;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-2136582714), 948);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((long) 948);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(277);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.277", dateTimeZone0.getID());
      assertEquals("+00:00:00.277", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, 2102744405, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals(2102744405, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2102744405, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2102744405, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2102744405, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("+00:00:00.277", dateTimeZone0.getID());
      assertEquals("+00:00:00.277", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2102744405, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2102744405, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("/BjUn=TA");
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, (-4362L));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('~');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      String string0 = dateTimeFormatter0.print((long) '~');
      assertNotNull(string0);
      assertEquals("~", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("~");
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 2);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeField0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      String string0 = dateTimeFormatter0.print((-1268L));
      assertNotNull(string0);
      assertEquals("69", string0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("69");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"69\": Value -31 for weekyearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      System.setCurrentTimeMillis(158L);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, (-939), 2144128204);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((Integer) 1);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isParser());
      
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withLocale(locale0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertSame(dateTimeFormatter6, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
      assertSame(dateTimeFormatter7, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter7);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isParser());
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter7.getPivotYear());
      assertTrue(dateTimeFormatter7.isOffsetParsed());
      assertTrue(dateTimeFormatter7.isPrinter());
      assertTrue(dateTimeFormatter7.isParser());
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusWeeks((-939));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('b');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(226);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.226", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.226", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.226", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.226", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char char0 = '~';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('~');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      assertNotNull(charBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 9223372036854775690L);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(613);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.613", dateTimeZone0.toString());
      assertEquals("+00:00:00.613", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.613", dateTimeZone0.toString());
      assertEquals("+00:00:00.613", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.613", dateTimeZone0.toString());
      assertEquals("+00:00:00.613", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      String string0 = dateTimeFormatter1.print(9223372036854775279L);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("\uFFFD", string0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.613", dateTimeZone0.toString());
      assertEquals("+00:00:00.613", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.613", dateTimeZone0.toString());
      assertEquals("+00:00:00.613", dateTimeZone0.getID());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      Integer integer0 = new Integer(613);
      assertNotNull(integer0);
      assertEquals(613, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(613, (int)dateTimeFormatter3.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      ReadWritableInstant readWritableInstant0 = null;
      String string0 = "The end instant must be greater or equal to the start";
      MockFile mockFile0 = new MockFile("en");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("X60$anmH");
      assertNotNull(mockFileWriter0);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3372, 2000, (-1647));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Appendable) mockFileWriter0, (ReadableInstant) dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: fr_CA
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 2146906522, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(2146906522, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146906522, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2146906522, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2146906522, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      int int0 = 745;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 745, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(745, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(745, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(745, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(745, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(745, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(745, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('H');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("H", stringWriter0.toString());
      assertEquals("H", stringWriter1.toString());
      
      stringWriter1.flush();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("H", stringWriter0.toString());
      assertEquals("H", stringWriter1.toString());
      
      DateTime dateTime0 = new DateTime((long) 745);
      assertNotNull(dateTime0);
      assertEquals(745L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusSeconds(745);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(745L, dateTime0.getMillis());
      assertEquals((-744255L), dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) stringWriter1, (ReadableInstant) dateTime1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('X');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 2329;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2329, false, 690562340);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      Integer integer0 = new Integer(2112278998);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2112278998, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2112278998, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      dateTimeFormatter0.print((ReadablePartial) localDateTime0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146223387, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[4];
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3880, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertEquals(4, dateTimeParserArray0.length);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(2146223387, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(4, dateTimeParserArray0.length);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2146223387, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gregorianChronology0);
      assertEquals(4, dateTimeParserArray0.length);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2146223387, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      assertEquals("+00:00:00.004", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertEquals(4, dateTimeParserArray0.length);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2146223387, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2146223387, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      assertEquals("+00:00:00.004", dateTimeZone0.getID());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      dateTimeFormatter2.printTo((Appendable) stringBuffer0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(623);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.623", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.623", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(623);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:00.623", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.623", dateTimeZone1.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("+00:00:00.623", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.623", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("gK\"S-<9aULH n>LM");
      assertNotNull(mockFileWriter0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Parsing not supported");
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 4359);
      assertNotNull(bufferedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      try { 
        dateTimeFormatter0.printTo((Writer) outputStreamWriter0, (long) 4359);
        fail("Expecting exception: UnmappableCharacterException");
      
      } catch(UnmappableCharacterException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("Q?E");
      assertNotNull(mockFileWriter0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-342), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gregorianChronology0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-2496));
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-342), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-2496), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      
      YearMonth yearMonth1 = yearMonth0.plusMonths((-2496));
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotNull(yearMonth1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(1806, yearMonth1.getYear());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider(uTCProvider0);
      YearMonth yearMonth2 = yearMonth1.plusYears((-342));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotNull(yearMonth2);
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth2.getMonthOfYear());
      assertEquals(1464, yearMonth2.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(1806, yearMonth1.getYear());
      
      Hours hours0 = Hours.SIX;
      assertNotNull(hours0);
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Days days0 = hours0.toStandardDays();
      assertNotNull(days0);
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      
      Weeks weeks0 = days0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      YearMonth yearMonth3 = yearMonth2.minus(weeks0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth2, yearMonth3);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth3, yearMonth0);
      assertNotSame(yearMonth3, yearMonth2);
      assertNotSame(yearMonth3, yearMonth1);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth3);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth3);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotNull(yearMonth3);
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth3.equals((Object)yearMonth0));
      assertFalse(yearMonth3.equals((Object)yearMonth1));
      assertTrue(yearMonth3.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertEquals(2, yearMonth2.getMonthOfYear());
      assertEquals(1464, yearMonth2.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals(6, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1464, yearMonth3.getYear());
      assertEquals(2, yearMonth3.size());
      assertEquals(2, yearMonth3.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(1806, yearMonth1.getYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print((ReadablePartial) yearMonth3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 19, 19);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset1 = new DateTimeFormatterBuilder.TimeZoneOffset("hYsUT.@{{^", "hYsUT.@{{^", true, 19, 37);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset1);
      assertFalse(dateTimeFormatterBuilder_TimeZoneOffset1.equals((Object)dateTimeFormatterBuilder_TimeZoneOffset0));
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset1, dateTimeFormatterBuilder_TimeZoneOffset1);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_TimeZoneOffset1.equals((Object)dateTimeFormatterBuilder_TimeZoneOffset0));
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      String string0 = dateTimeFormatter0.print(1531L);
      assertNotSame(dateTimeFormatterBuilder_TimeZoneOffset1, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatterBuilder_TimeZoneOffset1.equals((Object)dateTimeFormatterBuilder_TimeZoneOffset0));
      assertEquals("hYsUT.@{{^", string0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatterBuilder_TimeZoneOffset1, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatterBuilder_TimeZoneOffset1.equals((Object)dateTimeFormatterBuilder_TimeZoneOffset0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("hYsUT.@{{^");
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatterBuilder_TimeZoneOffset1, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatterBuilder_TimeZoneOffset1.equals((Object)dateTimeFormatterBuilder_TimeZoneOffset0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('d');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(" ,+e5_|d", "", false, 19, 19);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      String string0 = dateTimeFormatter0.print((long) 19);
      assertNotNull(string0);
      assertEquals("d", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = dateTimeFormatter1.parseMutableDateTime("");
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalDate localDate0 = new LocalDate((Object) null, (Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(4183, 1, 4183);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("P./l(,pl`O^S\"Fuj2in");
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) mockFileWriter0, (-1277L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('c');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = 1073741824;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1073741824, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Instant instant1 = instant0.withDurationAdded(286L, (-2147483049));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(778229129306L, instant1.getMillis());
      
      // Undeclared exception!
      dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadableInstant) instant1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.forLanguageTag("bLC(LJuQD/");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      
      int int0 = dateTimeFormatter2.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(0, int0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, 292278993, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(292278993, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTime dateTime0 = new DateTime((long) 292278993, (DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(292278993L, dateTime0.getMillis());
      
      // Undeclared exception!
      dateTimeFormatter4.print((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      String string0 = dateTimeFormatter0.print((long) 'k');
      assertNotNull(string0);
      assertEquals("k", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      long long0 = dateTimeFormatter0.parseMillis("k");
      assertEquals(0L, long0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      YearMonth yearMonth0 = new YearMonth(3, 3, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      assertEquals(3, yearMonth0.getMonthOfYear());
      assertEquals(3, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      
      YearMonth yearMonth1 = yearMonth0.minusMonths((-1510));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotNull(yearMonth1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(3, yearMonth0.getMonthOfYear());
      assertEquals(3, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(119, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(5, yearMonth1.getMonthOfYear());
      
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) yearMonth1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('X');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2329, false, 690562340);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Integer integer0 = new Integer(2112278998);
      assertNotNull(integer0);
      assertEquals(2112278998, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2329, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2112278998, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
      dateTimeFormatter1.print((long) 2329);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1273;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1273, 2000, 2122512907);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2122512907);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2122512907, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(gregorianChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2122512907, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2122512907, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2122512907, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2122512907, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2122512907, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      Integer integer0 = new Integer(1273);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1273, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2023L), gregorianChronology0, locale0, integer0, 1273);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1273, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertNotNull(dateTimeZone0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1273, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1273, (int)dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(gregorianChronology0, chronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2122512907, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2122512907, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2122512907, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(2122512907, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter4.printTo(stringBuffer0, (long) 2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(strictChronology0);
      
      Chronology chronology0 = strictChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)strictChronology0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatter", "org.joda.time.format.DateTimeFormatter", true, 1, 11);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      String string0 = dateTimeFormatter0.print((long) 11);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("org.joda.time.format.DateTimeFormatter", string0);
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalDateTime localDateTime0 = LocalDateTime.parse("org.joda.time.format.DateTimeFormatter", dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localDateTime0.size());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(63L);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(63L, mutableDateTime0.getMillis());
      
      String string1 = dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(string1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.joda.time.format.DateTimeFormatter", string1);
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(63L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('e');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-529));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.529", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.529", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("-00:00:00.529", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.529", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("-00:00:00.529", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.529", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      MockFile mockFile0 = new MockFile("Eqq\"cF%h^B", "Eqq\"cF%h^B");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter1);
      assertFalse(mockFileWriter1.equals((Object)mockFileWriter0));
      
      dateTimeFormatter1.printTo((Writer) mockFileWriter1, (-9223372036854775808L));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mockFileWriter1, mockFileWriter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(mockFileWriter1.equals((Object)mockFileWriter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("-00:00:00.529", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.529", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Eqq\"cF%h^B", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Eqq\"cF%h^B/Eqq\"cF%h^B", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/Eqq\"cF%h^B", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Period period0 = Period.years(57);
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(23);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.plusYears(57);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Partial partial1 = partial0.minus(period2);
      assertNotSame(partial0, partial1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) partial1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('R');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-603));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.603", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.603", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("-00:00:00.603", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.603", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("-00:00:00.603", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.603", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MockFile mockFile0 = new MockFile("Eqq\"cF%+h^B", "");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      dateTimeFormatter1.printTo((Writer) mockFileWriter0, (long) 1);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("-00:00:00.603", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.603", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Eqq\"cF%+h^B", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Eqq\"cF%+h^B", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("-00:00:00.603", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.603", dateTimeZone0.getID());
      
      String string0 = dateTimeFormatter1.print((long) 'R');
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("R", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("-00:00:00.603", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.603", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("R");
      assertEquals(1, CopticChronology.AM);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("-00:00:00.603", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.603", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(603L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(',');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("AGT", "AGT", false, 2144627951, 2144627951);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      String string0 = dateTimeFormatter0.print((long) 2144627951);
      assertNotNull(string0);
      assertEquals("AGT", string0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("AGT", dateTimeFormatter1);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseInto(mutableDateTime0, (String) null, (-2956));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeParser dateTimeParser0 = dateTimeFormatter0.getParser();
      assertNull(dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2000, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2000);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2148);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.148", dateTimeZone0.getID());
      assertEquals("+00:00:02.148", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.148", dateTimeZone0.getID());
      assertEquals("+00:00:02.148", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.148", dateTimeZone0.getID());
      assertEquals("+00:00:02.148", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      String string0 = dateTimeFormatter0.print((-727L));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      StringWriter stringWriter0 = new StringWriter(452);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(4497);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(4497, (int)dateTimeFormatter4.getPivotYear());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime(string0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-31536000000L), dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) string0, (-263), 2000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('R');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(20, int0);
      assertEquals(4, localTime0.size());
      
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadablePartial) localTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('c');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1073741824, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(1073741824, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
      dateTimeFormatter0.print((long) 1073741824);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q%%adl-].");
      assertFalse(boolean0);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-3232), (-3232), (-3232));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(chronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      Integer integer0 = new Integer(86400);
      assertNotNull(integer0);
      assertEquals(86400, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertNull(dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 86400, 86400, 86400, 0);
      assertNotNull(mockGregorianCalendar0);
      
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54386294400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=246,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=208,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(246, yearMonth0.getYear());
      assertEquals(7, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      
      YearMonth yearMonth1 = yearMonth0.minusMonths((-2723));
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotNull(yearMonth1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth1.size());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(473, yearMonth1.getYear());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54386294400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=246,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=208,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(246, yearMonth0.getYear());
      assertEquals(7, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      
      Interval interval0 = yearMonth1.toInterval(dateTimeZone0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotNull(interval0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertEquals(2, yearMonth1.size());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(473, yearMonth1.getYear());
      assertEquals((-47225030400000L), interval0.getEndMillis());
      assertEquals((-47227622400000L), interval0.getStartMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54386294400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=246,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=208,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(246, yearMonth0.getYear());
      assertEquals(7, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      
      Interval interval1 = interval0.toInterval();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth1, yearMonth0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotNull(interval1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertEquals(2, yearMonth1.size());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(473, yearMonth1.getYear());
      assertEquals((-47225030400000L), interval0.getEndMillis());
      assertEquals((-47227622400000L), interval0.getStartMillis());
      assertEquals((-47225030400000L), interval1.getEndMillis());
      assertEquals((-47227622400000L), interval1.getStartMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54386294400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=246,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=208,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(246, yearMonth0.getYear());
      assertEquals(7, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      
      DateTime dateTime0 = interval1.getEnd();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth1, yearMonth0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotNull(dateTime0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertEquals(2, yearMonth1.size());
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(473, yearMonth1.getYear());
      assertEquals((-47225030400000L), interval0.getEndMillis());
      assertEquals((-47227622400000L), interval0.getStartMillis());
      assertEquals((-47225030400000L), interval1.getEndMillis());
      assertEquals((-47227622400000L), interval1.getStartMillis());
      assertEquals((-47225030400000L), dateTime0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-54386294400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=246,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=208,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(246, yearMonth0.getYear());
      assertEquals(7, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (ReadableInstant) dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('`');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis('`');
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-1692));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1692), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1692), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1692), (int)dateTimeFormatter4.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(1);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1692), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1692), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-1692), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      
      String string0 = dateTimeFormatter5.print((ReadableInstant) dateTime0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertEquals("`", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1692), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1692), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-1692), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      
      Integer integer0 = dateTimeFormatter5.getPivotYear();
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertEquals((-1692), (int)integer0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("+00:00:00.096", dateTimeZone0.getID());
      assertEquals("+00:00:00.096", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1692), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1692), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-1692), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, 1, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(partial0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      CopticChronology copticChronology1 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      Partial partial1 = partial0.withChronologyRetainFields(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(partial0, partial1);
      assertSame(copticChronology1, copticChronology0);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial1.getFormatter();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(partial0, partial1);
      assertSame(copticChronology1, copticChronology0);
      assertSame(partial1, partial0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(partial0, partial1);
      assertSame(copticChronology1, copticChronology0);
      assertSame(partial1, partial0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(",", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, 4L);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('C');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTimeISO();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      
      MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2612, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2612);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2612, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      String string0 = dateTimeFormatter0.print((long) 2612);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("70", string0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("70");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"70\": Value 2570 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusMonths(453);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(200953281320L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.minus(781L);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotNull(dateTime2);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(200953281320L, dateTime1.getMillis());
      assertEquals(200953280539L, dateTime2.getMillis());
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(200953281320L, dateTime1.getMillis());
      assertEquals(200953280539L, dateTime2.getMillis());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(dateTimeField0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(200953281320L, dateTime1.getMillis());
      assertEquals(200953280539L, dateTime2.getMillis());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3332, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-3947));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-3947), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals((-3947), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-3947), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology((Chronology) null);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals((-3947), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals((-3947), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-3947), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      String string0 = dateTimeFormatter4.print((long) (-3947));
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("03", string0);
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals((-3947), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals((-3947), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-3947), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withLocale(locale0);
      assertSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withChronology((Chronology) null);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertEquals((-3947), dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertNull(dateTimeFormatter6.getPivotYear());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-3947), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseDateTime("03");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"03\": Value 3303 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-254), false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = new Integer(2000);
      assertNotNull(integer0);
      assertEquals(2000, (int)integer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2385);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      assertNotNull(outputStreamWriter0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)lenientChronology0));
      
      pipedOutputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) outputStreamWriter0, (-3151L), chronology0, 2385, (DateTimeZone) null, locale0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      assertFalse(lenientChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)lenientChronology0));
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      String string0 = dateTimeFormatter0.print((-3151L));
      assertNotNull(string0);
      assertEquals("56", string0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-254));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals((-254), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Chronology chronology1 = dateTimeFormatter2.getChronolgy();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNull(chronology1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals((-254), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals((-254), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, (int)dateTimeFormatter3.getPivotYear());
      assertEquals((-254), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseMutableDateTime("56");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"56\": Value 1956 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('S');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      String string0 = dateTimeFormatter0.print((long) 'S');
      assertNotNull(string0);
      assertEquals("S", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("S");
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology((Chronology) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      int int0 = dateTimeFormatter3.parseInto(mutableDateTime0, "S", 0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(1, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(dateTimeField0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1462), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "", (-1462));
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1461, int0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      boolean boolean1 = dateTimeFormatter0.isParser();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber1 = (DateTimeFormatterBuilder.UnpaddedNumber)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber1);
      assertSame(dateTimeFormatterBuilder_UnpaddedNumber1, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber1.estimatePrintedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(linkedList0.contains((-1)));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(16);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(linkedList0.contains(16));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(16, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter5);
      assertFalse(linkedList0.contains(16));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(16, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(16, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseLocalTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      String string0 = dateTimeFormatter0.print(1720L);
      assertNotNull(string0);
      assertEquals("k", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("k");
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      long long0 = dateTimeFormatter3.parseMillis("k");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals((-7200000L), long0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-640));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      String string0 = dateTimeFormatter1.print((long) 31);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("Z", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("Z");
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(640L, mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(640L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(640L, mutableDateTime1.getMillis());
      
      int int0 = dateTimeFormatter2.parseInto(mutableDateTime1, "Z", 85);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals((-86), int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(640L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(640L, mutableDateTime1.getMillis());
      
      String string1 = dateTimeFormatter0.print((long) 0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(string1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Z", string1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      long long0 = dateTimeFormatter1.parseMillis("Z");
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(640L, long0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.640", dateTimeZone0.getID());
      assertEquals("-00:00:00.640", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseDateTime("+^o.vn<;%F3h76");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+^o.vn<;%F3h76\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(150, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1840));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-1840), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Integer integer0 = new Integer(150);
      assertNotNull(integer0);
      assertEquals(150, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-1840), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(150, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1840), dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-1840), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(150, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1840), dateTimeFormatter2.getDefaultYear());
      assertEquals(150, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1840), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-1840), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(150, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1840), dateTimeFormatter2.getDefaultYear());
      assertEquals(150, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1840), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals((-1840), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone((DateTimeZone) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-1840), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(150, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1840), dateTimeFormatter2.getDefaultYear());
      assertEquals(150, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1840), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals((-1840), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-1840), dateTimeFormatter5.getDefaultYear());
      
      int int0 = dateTimeFormatter5.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals((-1840), int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-1840), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(150, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-1840), dateTimeFormatter2.getDefaultYear());
      assertEquals(150, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1840), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertEquals((-1840), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-1840), dateTimeFormatter5.getDefaultYear());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName1 = (DateTimeFormatterBuilder.TimeZoneName)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertSame(dateTimeFormatterBuilder_TimeZoneName1, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName1.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      Integer integer0 = Integer.getInteger("", (-800));
      assertNotNull(integer0);
      assertEquals((-800), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-800), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis('Z');
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.090", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology0);
      assertEquals("+00:00:00.090", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:00.090", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone0.toString());
      assertEquals("+00:00:00.090", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone1.getID());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone1);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-800), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals("+00:00:00.090", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone0.toString());
      assertEquals("+00:00:00.090", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone1.getID());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-800), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(15271875);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-800), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals("+00:00:00.090", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone0.toString());
      assertEquals("+00:00:00.090", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone1.getID());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-800), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(15271875, (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      dateTimeFormatter5.printTo((Writer) charArrayWriter0, 2829L);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals("1970", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-800), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals("+00:00:00.090", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone0.toString());
      assertEquals("+00:00:00.090", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.090", dateTimeZone1.getID());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-800), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(15271875, (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2000, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2000);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2148);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.148", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.148", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("+00:00:02.148", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.148", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("+00:00:02.148", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.148", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      String string0 = dateTimeFormatter0.print((-727L));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-31536000000L), mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, string0, (-987));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(31);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(31, dateTimeFormatter1.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-639));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(31, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(31, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      String string0 = dateTimeFormatter2.print((long) 31);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("Z", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(31, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(31, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(31, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(31, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(31, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("Z");
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(31, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(31, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(639L, mutableDateTime0.getMillis());
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "Z", 2193);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertEquals((-2194), int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(31, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.639", dateTimeZone0.toString());
      assertEquals("-00:00:00.639", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(31, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(639L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "RQgws-8?XB<`59[MJ!";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("RQgws-8?XB<`59[MJ!");
      assertNull(dateTimeZone0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter3.print((-1585L));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('`');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      String string0 = dateTimeFormatter2.print((-3598L));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("`", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(63, 1073741824, 1073741824);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      String string0 = dateTimeFormatter0.print((long) 'Z');
      assertNotNull(string0);
      assertEquals("Z", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("Z");
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, 0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-853), (-1), (-1));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 86399999, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(86399999, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(86399999, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(86399999, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(86399999, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) (-853));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      String string0 = dateTimeFormatter0.print((long) 'Z');
      assertNotNull(string0);
      assertEquals("Z", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('`');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      String string0 = dateTimeFormatter0.print((-1585L));
      assertNotNull(string0);
      assertEquals("`", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`', '`', '`'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertEquals("```````", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      String string0 = "";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1593));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1593), (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(2, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isParser());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertNull(dateTimeFormatter6.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseInto(mutableDateTime0, "", 15);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1468), true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1468));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1468), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1468), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1468), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      Integer integer0 = new Integer((-1468));
      assertNotNull(integer0);
      assertEquals((-1468), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1468), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1468), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1468), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1468), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1468), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1468), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1468), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals((-1468), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print((ReadableInstant) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "'f";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'f");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      int int0 = 1552;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1552);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1552);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1552, dateTimeFormatter3.getDefaultYear());
      assertEquals(1552, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1552, dateTimeFormatter3.getDefaultYear());
      assertEquals(1552, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(1552, dateTimeFormatter4.getDefaultYear());
      
      DateTime dateTime0 = dateTimeFormatter4.parseDateTime("'f");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1552, dateTimeFormatter3.getDefaultYear());
      assertEquals(1552, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(1552, dateTimeFormatter4.getDefaultYear());
      assertEquals(0L, dateTime0.getMillis());
      
      Integer integer0 = dateTimeFormatter4.getPivotYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1552, (int)integer0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1552, dateTimeFormatter3.getDefaultYear());
      assertEquals(1552, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1552, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(1552, dateTimeFormatter4.getDefaultYear());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("'f", "%/=Y4f&");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // %/=Y4f&
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 40, true, 1);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter1.getPrinter();
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNull(dateTimePrinter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(40, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("Parsing not supported", true);
      assertNotNull(mockFileWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 86400;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 86400, 86400);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) 86400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("", string0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      LocalDateTime localDateTime0 = LocalDateTime.parse("", dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Duration duration0 = Duration.standardMinutes((-1979L));
      assertNotNull(duration0);
      assertEquals((-1979L), duration0.getStandardMinutes());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-118740L), duration0.getStandardSeconds());
      assertEquals((-32L), duration0.getStandardHours());
      assertEquals((-118740000L), duration0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 388);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals((-1979L), duration0.getStandardMinutes());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-118740L), duration0.getStandardSeconds());
      assertEquals((-32L), duration0.getStandardHours());
      assertEquals((-118740000L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      LocalDateTime localDateTime2 = localDateTime1.withField(dateTimeFieldType0, 2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals((-1979L), duration0.getStandardMinutes());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-118740L), duration0.getStandardSeconds());
      assertEquals((-32L), duration0.getStandardHours());
      assertEquals((-118740000L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.plusDays((-1));
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotNull(localDateTime3);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertEquals(4, localDateTime0.size());
      assertEquals((-1979L), duration0.getStandardMinutes());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-118740L), duration0.getStandardSeconds());
      assertEquals((-32L), duration0.getStandardHours());
      assertEquals((-118740000L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDateTime3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2, (int)dateTimeFormatter4.getPivotYear());
      
      DateTime dateTime0 = dateTimeFormatter3.parseDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2, (int)dateTimeFormatter4.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(719527);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(2, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(719527, dateTimeFormatter5.getDefaultYear());
      
      MutableDateTime mutableDateTime1 = dateTimeFormatter5.parseMutableDateTime("");
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(2, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(719527, dateTimeFormatter5.getDefaultYear());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('`');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral1 = new DateTimeFormatterBuilder.CharacterLiteral('I');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral1);
      assertFalse(dateTimeFormatterBuilder_CharacterLiteral1.equals((Object)dateTimeFormatterBuilder_CharacterLiteral0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral1);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_CharacterLiteral1.equals((Object)dateTimeFormatterBuilder_CharacterLiteral0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertNotSame(dateTimeFormatterBuilder_CharacterLiteral1, dateTimeFormatterBuilder_CharacterLiteral0);
      assertFalse(dateTimeFormatterBuilder_CharacterLiteral1.equals((Object)dateTimeFormatterBuilder_CharacterLiteral0));
      assertFalse(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(177, 12740625, (-1499));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) 12740625);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-292269337), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-292269337), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-292269337), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-292269337), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-292269337), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print(0L);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 4775, true, 14);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      
      Integer integer0 = new Integer(14);
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(14, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(14, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(14, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(4775, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(14, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(14, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(14, (int)dateTimeFormatter3.getPivotYear());
      
      MockFile mockFile0 = new MockFile("-");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        Charset.forName("qc9=nZ6%$pQ)RKFMr");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qc9=nZ6%$pQ)RKFMr
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("9f");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertFalse(boolean0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      String string0 = dateTimeFormatter0.print((long) 11);
      assertNotNull(string0);
      assertEquals("9f", string0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = 4978125;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4978125, 4978125);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("000");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4978125);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      
      MonthDay monthDay1 = monthDay0.plusMonths(254);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(4, monthDay1.getMonthOfYear());
      assertEquals(14, monthDay1.getDayOfMonth());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      
      MonthDay monthDay2 = monthDay1.withChronologyRetainFields(islamicChronology1);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay1, monthDay2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(monthDay2, monthDay1);
      assertNotSame(monthDay2, monthDay0);
      assertNotNull(monthDay2);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(monthDay2.equals((Object)monthDay1));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(4, monthDay1.getMonthOfYear());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(2, monthDay2.size());
      assertEquals(14, monthDay2.getDayOfMonth());
      assertEquals(4, monthDay2.getMonthOfYear());
      
      LocalDate localDate0 = monthDay2.toLocalDate(31);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay1, monthDay2);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(monthDay2, monthDay1);
      assertNotSame(monthDay2, monthDay0);
      assertNotNull(localDate0);
      assertFalse(monthDay0.equals((Object)monthDay2));
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay1.equals((Object)monthDay2));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(monthDay2.equals((Object)monthDay1));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(4, monthDay1.getMonthOfYear());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(2, monthDay2.size());
      assertEquals(14, monthDay2.getDayOfMonth());
      assertEquals(4, monthDay2.getMonthOfYear());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('/');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 31, (-1280));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(538);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) (-1280));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("/", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = (DateTimeFormatterBuilder.Fraction)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertSame(dateTimeFormatterBuilder_Fraction1, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatterBuilder_Fraction1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction1.estimatePrintedLength());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction1.estimateParsedLength());
      
      Locale locale0 = new Locale("", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.GERMANY;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertSame(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(locale0, locale1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1280), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral1 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral1);
      assertFalse(dateTimeFormatterBuilder_CharacterLiteral1.equals((Object)dateTimeFormatterBuilder_CharacterLiteral0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatterBuilder_CharacterLiteral0.equals((Object)dateTimeFormatterBuilder_CharacterLiteral1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      String string0 = dateTimeFormatter0.print(0L);
      assertNotSame(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatterBuilder_CharacterLiteral0.equals((Object)dateTimeFormatterBuilder_CharacterLiteral1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("Z", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalTime localTime0 = dateTimeFormatter1.parseLocalTime("Z");
      assertNotSame(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(localTime0);
      assertFalse(dateTimeFormatterBuilder_CharacterLiteral0.equals((Object)dateTimeFormatterBuilder_CharacterLiteral1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 623158436, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("UTC");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("Instant must not be nu$l");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertTrue(boolean0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      String string0 = dateTimeFormatter0.print((-375L));
      assertNotNull(string0);
      assertEquals("11", string0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("11");
      assertNotNull(dateTime0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(39600000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      MonthDay monthDay0 = new MonthDay(0L);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(string0);
      assertEquals("U", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      boolean boolean1 = dateTimeFormatter1.isOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Instant must not be null");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(11);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(11, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, 0L);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("00000000000", charArrayWriter0.toString());
      assertEquals(11, charArrayWriter0.size());
      
      long long0 = dateTimeFormatter1.parseMillis("Instant must not be null");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0L, long0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(24, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(11, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('>');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('>'));
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains('>'));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(linkedList0.contains('>'));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) null);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "h", 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('~');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      
      MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime((Chronology) null);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime2.getMillis());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-302));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals((-302), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      MutableDateTime mutableDateTime3 = MutableDateTime.now();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotSame(mutableDateTime3, mutableDateTime0);
      assertNotSame(mutableDateTime3, mutableDateTime2);
      assertNotSame(mutableDateTime3, mutableDateTime1);
      assertNotNull(mutableDateTime3);
      assertTrue(mutableDateTime3.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime3.equals((Object)mutableDateTime2));
      assertTrue(mutableDateTime3.equals((Object)mutableDateTime1));
      assertEquals(1392409281320L, mutableDateTime3.getMillis());
      assertEquals(0, mutableDateTime3.getRoundingMode());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((-3874));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-3874), (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseInto(mutableDateTime3, "D", (-1879));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\'');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('c');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer(12);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 12);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      dateTimeFormatter1.printTo((Appendable) stringBuffer0, (ReadablePartial) localDateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(1, stringBuffer0.length());
      assertEquals("c", stringBuffer0.toString());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) julianChronology0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusDays(2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392582081320L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) null, (ReadableInstant) dateTime1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 11);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(11, charArrayWriter0.size());
      assertEquals("00000305555", charArrayWriter0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(11, 4);
      assertNotNull(dateTimeZone0);
      assertEquals("+11:04", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:04", dateTimeZone0.getID());
      
      DateTime dateTime0 = new DateTime(2, 2, 12, 11, 24, 24, 4, dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("+11:04", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:04", dateTimeZone0.getID());
      assertEquals((-62100430775996L), dateTime0.getMillis());
      
      Duration duration0 = Duration.standardSeconds(2);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(2L, duration0.getStandardSeconds());
      
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals("+11:04", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:04", dateTimeZone0.getID());
      assertEquals((-62100430775996L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(2L, duration0.getStandardSeconds());
      assertEquals((-62100430773996L), dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.minusMinutes(12);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotNull(dateTime2);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertEquals("+11:04", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:04", dateTimeZone0.getID());
      assertEquals((-62100430775996L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(2L, duration0.getStandardSeconds());
      assertEquals((-62100430773996L), dateTime1.getMillis());
      assertEquals((-62100431493996L), dateTime2.getMillis());
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) dateTime2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertEquals("20722333333", string0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("+11:04", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:04", dateTimeZone0.getID());
      assertEquals((-62100430775996L), dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(2L, duration0.getStandardSeconds());
      assertEquals((-62100430773996L), dateTime1.getMillis());
      assertEquals((-62100431493996L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1649));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-1649), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(14);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-1649), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1649), dateTimeFormatter3.getDefaultYear());
      assertEquals(14, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-1649), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1649), dateTimeFormatter3.getDefaultYear());
      assertEquals(14, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-1649), dateTimeFormatter4.getDefaultYear());
      assertEquals(14, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-1649), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-1649), dateTimeFormatter3.getDefaultYear());
      assertEquals(14, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-1649), dateTimeFormatter4.getDefaultYear());
      assertEquals(14, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(14, (int)dateTimeFormatter5.getPivotYear());
      assertEquals((-1649), dateTimeFormatter5.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-34), 795);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 795);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("000220833333", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      assertNotNull(localDate0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(3, localDate0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("Parsing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Parsing not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 791;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      int int1 = (-1530);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 791, (-1530));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1530), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDateTime("*Y)$}Mi}0(Jch");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"*Y)$}Mi}0(Jch\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (-1591L));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      LocalDateTime localDateTime0 = dateTimeFormatter2.parseLocalDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(4, localDateTime0.size());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 791);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(11, charArrayWriter0.size());
      assertEquals("00000915509", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      
      ReadWritableInstant readWritableInstant0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseInto((ReadWritableInstant) null, "h", (-4210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1462), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "", (-1462));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1461, int0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      boolean boolean1 = dateTimeFormatter0.isParser();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1462), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseDateTime("{f2A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"{f2A\" is malformed at \"f2A\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      String string0 = ".D";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime(".D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".D\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(791);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 791);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("000219722222", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter0.getZone();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNull(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseMillis((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      assertNotNull(localDate0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(3, localDate0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      assertNotNull(dateTime0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      assertNotNull(localDate0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(3, localDate0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalDate("HST");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('S');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 354, 354);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('>');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(">", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals(">", charArrayWriter1.toString());
      
      dateTimeFormatter0.printTo((Writer) charArrayWriter1, (long) 5);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(">000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", charArrayWriter0.toString());
      assertEquals(355, charArrayWriter0.size());
      assertEquals(355, charArrayWriter1.size());
      assertEquals(">000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", charArrayWriter1.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-233), true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gregorianChronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, 7593750);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-8), 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-249));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals((-249), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(266);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals((-249), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-249), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals(266, dateTimeFormatter2.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 791);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("000219722222", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime("f_{)1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"f_{)1\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      Integer integer0 = new Integer(949);
      assertNotNull(integer0);
      assertEquals(949, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(949, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(iSOChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(949, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(949, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(949, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(949, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(949, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      MockDate mockDate0 = new MockDate(1, 949, 791, 4, 389);
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Thu Apr 01 10:29:00 GMT 1982", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals("Thu Apr 01 10:29:00 GMT 1982", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      Partial partial0 = new Partial(localDateTime1);
      assertNotNull(partial0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals("Thu Apr 01 10:29:00 GMT 1982", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, partial0.size());
      
      String string0 = dateTimeFormatter4.print((ReadablePartial) partial0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals("", string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(949, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(949, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(949, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals("Thu Apr 01 10:29:00 GMT 1982", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, partial0.size());
      
      String string1 = dateTimeFormatter4.print((long) 389);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(string1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(949, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(949, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertEquals(949, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 791);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 791);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(12, charArrayWriter0.size());
      assertEquals("000219722222", charArrayWriter0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(0L, long0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter1.getParser();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('S');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) 11);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      byte[] byteArray0 = new byte[5];
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      String string0 = dateTimeFormatter1.print((ReadablePartial) localTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("", string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-1839L), true, (long) 2000);
      assertEquals((-1839L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)24, (byte) (-83), (byte)1, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)24, (byte) (-83), (byte)1, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long1 = dateTimeZone0.nextTransition(0L);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime((-1839L), dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, localDateTime0.size());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      Locale locale1 = Locale.JAPAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(locale1, locale0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-1), false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gJChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      Integer integer0 = new Integer(1721);
      assertNotNull(integer0);
      assertEquals(1721, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1721, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2423);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1721, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertEquals(1721, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2423, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      
      Chronology chronology0 = dateTimeFormatter5.getChronolgy();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertSame(gJChronology0, chronology0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1721, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertEquals(1721, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2423, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Z');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(4, (int)dateTimeFormatter3.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-4732));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(4, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(4, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-4732), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(4, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(4, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-4732), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-4732), dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(4, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      
      int int0 = dateTimeFormatter5.parseInto(mutableDateTime0, "", 14);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertEquals((-15), int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(4, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(4, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-4732), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-4732), dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(4, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      
      // Undeclared exception!
      try { 
        LocalDateTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1384, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      StringBuffer stringBuffer0 = new StringBuffer(3520);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3020));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      assertNotNull(localDateTime0);
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-3020));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.minusHours(1384);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.minusWeeks(1659);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotNull(localDateTime3);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      LocalDateTime localDateTime4 = localDateTime2.withFieldAdded(durationFieldType0, 0);
      assertNotSame(localDateTime4, localDateTime1);
      assertSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(localDateTime4);
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals(4, localDateTime4.size());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime5 = localDateTime4.withMillisOfDay(400);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime5);
      assertSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime5, localDateTime0);
      assertNotSame(localDateTime5, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime5);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(localDateTime5);
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime5.size());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      dateTimeFormatter2.printTo(stringBuffer0, (ReadablePartial) localDateTime5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime5);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime5);
      assertSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime5, localDateTime0);
      assertNotSame(localDateTime5, localDateTime2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime5));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime5));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime5));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime5.size());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      boolean boolean0 = dateTimeFormatter2.isPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertTrue(boolean0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTimeISO();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertNotNull(mutableDateTime2);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(0L, mutableDateTime2.getMillis());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime2, "jA37#s", 4);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime0, mutableDateTime2);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime1, mutableDateTime2);
      assertNotSame(mutableDateTime2, mutableDateTime0);
      assertNotSame(mutableDateTime2, mutableDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime2));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime2));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime2.equals((Object)mutableDateTime1));
      assertEquals((-5), int0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime2.getRoundingMode());
      assertEquals(0L, mutableDateTime2.getMillis());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1456));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1456), dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1456), dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-1456), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, islamicChronology0, locale0, (Integer) 1, (-1456));
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1456), dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-1456), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals((-1456), dateTimeFormatter5.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-1456), dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-1456L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = dateTimeFormatter5.parseInto(mutableDateTime0, "Parsing not supported", 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertEquals((-2), int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-1456), dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals((-1456), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter5.isParser());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals((-1456), dateTimeFormatter5.getDefaultYear());
      assertEquals((-1456L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('S');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "h", 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals((-2), int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(string0);
      assertEquals("S", string0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('i');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("Instant must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Instant must not be null\" is malformed at \"nstant must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite1 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite1);
      assertFalse(dateTimeFormatterBuilder_Composite1.equals((Object)dateTimeFormatterBuilder_Composite0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite1.estimatePrintedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('n');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(linkedList0.contains('n'));
      assertFalse(dateTimeFormatterBuilder_Composite0.equals((Object)dateTimeFormatterBuilder_Composite1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(linkedList0.contains('n'));
      assertFalse(dateTimeFormatterBuilder_Composite0.equals((Object)dateTimeFormatterBuilder_Composite1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      boolean boolean0 = dateTimeFormatter2.isPrinter();
      assertNotSame(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(linkedList0.contains('n'));
      assertFalse(dateTimeFormatterBuilder_Composite0.equals((Object)dateTimeFormatterBuilder_Composite1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite2 = (DateTimeFormatterBuilder.Composite)dateTimeFormatter0.getPrinter();
      assertNotSame(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite1);
      assertSame(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatterBuilder_Composite2, dateTimeFormatterBuilder_Composite1);
      assertSame(dateTimeFormatterBuilder_Composite2, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatterBuilder_Composite2);
      assertFalse(linkedList0.contains('n'));
      assertFalse(dateTimeFormatterBuilder_Composite0.equals((Object)dateTimeFormatterBuilder_Composite1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatterBuilder_Composite2.equals((Object)dateTimeFormatterBuilder_Composite1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, dateTimeFormatterBuilder_Composite2.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite2.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1384, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer(3520);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3020));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusDays(1393);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.minuteOfHour();
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime_Property0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("EQ6*9QQ8 6z", true);
      assertNotNull(mockFileWriter0);
      
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNull(integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      
      boolean boolean0 = dateTimeFormatter4.isParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertTrue(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(0, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral1 = (DateTimeFormatterBuilder.CharacterLiteral)dateTimeFormatter4.getPrinter();
      assertSame(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder_CharacterLiteral1, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertNotNull(localDateTime_Property0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Writer) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 25, 25);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Integer integer0 = new Integer(25);
      assertNotNull(integer0);
      assertEquals(25, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(25, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(25);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(25, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(25, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(25, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(25, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(25, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(25, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(25, dateTimeFormatter3.getDefaultYear());
      assertEquals(25, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(25, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(25, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(25, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(25, dateTimeFormatter3.getDefaultYear());
      assertEquals(25, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals(25, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(25, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      
      DateTimeUtils.setCurrentMillisOffset(25);
      MockFileWriter mockFileWriter0 = new MockFileWriter("/j(6*tm=Mx [");
      assertNotNull(mockFileWriter0);
      
      Chronology chronology0 = dateTimeFormatter3.getChronolgy();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNull(chronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(25, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(25, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(25, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(25, dateTimeFormatter3.getDefaultYear());
      assertEquals(25, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter3.printTo((StringBuffer) null, (long) 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-263), (-1), (-1), (-1), (-263), (-263));
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-70469846843000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=265,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=333,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=32,SECOND=37,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertNotNull(localDateTime_Property0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-70469846843000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=265,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=333,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=32,SECOND=37,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      DateTimeUtils.setCurrentMillisOffset(1L);
      MockFileWriter mockFileWriter0 = new MockFileWriter("F2k)tPgqB");
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2133));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-2133), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Integer integer0 = new Integer(95);
      assertNotNull(integer0);
      assertEquals(95, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-2133), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-2133), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(95, (int)dateTimeFormatter2.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(11);
      assertNotNull(charArrayWriter1);
      assertFalse(charArrayWriter1.equals((Object)charArrayWriter0));
      assertEquals(0, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, 1569L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "{f2A";
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, (-1252), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals((-1252), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1252), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals((-1252), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1252), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals((-1252), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-1252), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) null, (long) (-1252));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(13421772);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(13421772, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(13421772, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(13421772, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseMutableDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("U", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(526, 0, 526);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      DateTimeUtils.setCurrentMillisOffset(1173L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(990, 0, (-1), 1, (-1), 0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-30925494060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=989,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1618));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Integer integer0 = new Integer((-1618));
      assertNotNull(integer0);
      assertEquals((-1618), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1618), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("I");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gregorianChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1618), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-1618), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1618), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-1618), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale((Locale) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1618), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-1618), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-1618), (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      int int0 = dateTimeFormatter5.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertEquals(2000, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals((-1618), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-1618), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-1618), (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-1618), (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(526, 0, 526);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(526, (Map<String, DateTimeZone>) null);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(526);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (-11L));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotNull(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(526, 0, 526);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.weeks();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(unsupportedDateTimeField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 58, (-2543));
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('x');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear((-703));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-703), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(fixedDateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-703), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals((-703), dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-1462));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-703), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals((-703), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals((-703), dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-1462), (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", unsupportedDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2543), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-703), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertEquals((-703), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals((-703), dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-1462), (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals((-703), dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals((-1462), (int)dateTimeFormatter6.getPivotYear());
      
      Integer integer0 = new Integer((-703));
      assertNotNull(integer0);
      assertEquals((-703), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotNull(dateTimeFormatter7);
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertTrue(dateTimeFormatter7.isParser());
      assertEquals((-703), (int)dateTimeFormatter7.getPivotYear());
      assertTrue(dateTimeFormatter7.isPrinter());
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
      assertFalse(dateTimeFormatter7.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(22, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      
      DurationField durationField0 = buddhistChronology0.seconds();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(unsupportedDateTimeField0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, (-1462), (-1245));
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('$');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(1);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      Integer integer0 = new Integer(2000);
      assertNotNull(integer0);
      assertEquals(2000, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("+22:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+22:01", dateTimeZone0.getID());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-1245), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1384, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer(3520);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3020));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      assertNotNull(localDateTime0);
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-3020));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.minusHours(1384);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotNull(localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 0);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertSame(localDateTime3, localDateTime2);
      assertNotNull(localDateTime3);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime3.withMillisOfDay(400);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotNull(localDateTime4);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      dateTimeFormatter2.printTo(stringBuffer0, (ReadablePartial) localDateTime4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      assertEquals("-00:00:03.020", dateTimeZone0.getID());
      assertEquals("-00:00:03.020", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseLocalDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 11;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(strictChronology0);
      
      Chronology chronology0 = strictChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)strictChronology0));
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatter", "org.joda.time.format.DateTimeFormatter", true, 1, 11);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter4);
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter5);
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withChronology(chronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotNull(dateTimeFormatter6);
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals((-1), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter6.isParser());
      assertEquals((-1), (int)dateTimeFormatter6.getPivotYear());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(1);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotNull(dateTimeFormatter7);
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertTrue(dateTimeFormatter7.isParser());
      assertFalse(dateTimeFormatter7.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter7.getPivotYear());
      assertTrue(dateTimeFormatter7.isPrinter());
      assertEquals(2000, dateTimeFormatter7.getDefaultYear());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      
      DateTimeFormatter dateTimeFormatter8 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter8);
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter8.equals((Object)dateTimeFormatter5));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertFalse(dateTimeFormatter8.isOffsetParsed());
      assertTrue(dateTimeFormatter8.isParser());
      assertTrue(dateTimeFormatter8.isPrinter());
      assertEquals(2000, dateTimeFormatter8.getDefaultYear());
      assertNull(dateTimeFormatter8.getPivotYear());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withOffsetParsed();
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter9, dateTimeFormatter2);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotNull(dateTimeFormatter9);
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter9.equals((Object)dateTimeFormatter2));
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertEquals(2000, dateTimeFormatter9.getDefaultYear());
      assertTrue(dateTimeFormatter9.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter9.getPivotYear());
      assertTrue(dateTimeFormatter9.isParser());
      assertTrue(dateTimeFormatter9.isPrinter());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZoneUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter10, dateTimeFormatter8);
      assertNotSame(strictChronology0, chronology0);
      assertNotSame(chronology0, strictChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter10);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter10);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter7);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter10);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(locale0, locale1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter10);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter8);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter9);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter7);
      assertNotNull(dateTimeFormatter10);
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter9));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter10.equals((Object)dateTimeFormatter8));
      assertFalse(strictChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)strictChronology0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter9));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter9));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter7));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter9));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter8));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter6));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter9));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter7));
      assertTrue(dateTimeFormatter10.isPrinter());
      assertFalse(dateTimeFormatter10.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter10.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter10.getPivotYear());
      assertTrue(dateTimeFormatter10.isParser());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(38, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      
      try { 
        Integer.valueOf("org.joda.time.format.DateTimeFormatter");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.joda.time.format.DateTimeFormatter\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotNull(dateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseDateTime("Is*~^=b^x40Hong4N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Is*~^=b^x40Hong4N\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(11, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      
      DurationField durationField0 = buddhistChronology0.weeks();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(unsupportedDateTimeField0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, (-1462), (-2412));
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('$');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_Fraction0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+11:01", dateTimeZone0.getID());
      assertEquals("+11:01", dateTimeZone0.toString());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("minuteOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2412), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(strictChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      Chronology chronology0 = strictChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime("NoWeeks");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) 11);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(8, charArrayWriter0.size());
      assertEquals("00821372", charArrayWriter0.toString());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(strictChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Chronology chronology0 = strictChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2000, 677, 1588, 1, 4298, 4978125);
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2869399605000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2060,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=339,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=26,SECOND=45,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotNull(dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, dateTimeFormatter5.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter6);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(1, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(1, dateTimeFormatter5.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter6.getPivotYear());
      assertTrue(dateTimeFormatter6.isParser());
      assertEquals(1, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime("{f2A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"{f2A\" is malformed at \"f2A\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1847));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.847", dateTimeZone0.getID());
      assertEquals("-00:00:01.847", dateTimeZone0.toString());
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.847", dateTimeZone0.getID());
      assertEquals("-00:00:01.847", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(0);
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertEquals(0, int0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      dateTimeFormatter3.printTo((Appendable) stringBuffer0, 943L);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(gregorianChronology0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.GregorianChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(526, 0, 526);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = new Integer(526);
      assertNotNull(integer0);
      assertEquals(526, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(526, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(990);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(526, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(990, dateTimeFormatter2.getDefaultYear());
      assertEquals(526, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotNull(dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(526, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(526, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalTime("b+z)!]W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeUtils.setCurrentMillisOffset(0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zE]TG~z&JyZ=");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter2.getChronolgy();
      dateTimeFormatter1.printTo((StringBuffer) null, 0L);
      boolean boolean0 = dateTimeFormatter2.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      boolean boolean1 = dateTimeFormatter1.isPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(boolean1 == boolean0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.isPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      fixedDateTimeZone0.getOffsetFromLocal(1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charArrayWriter0, 2618L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFieldType.minuteOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(11, 1);
      BuddhistChronology.getInstance(dateTimeZone0);
      int int0 = Integer.MAX_VALUE;
      Integer integer0 = new Integer(1255);
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth("p<]Nuc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p<]Nuc\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weeks();
      UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 1, 0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction1, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter2.withPivotYear(875);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(0);
      dateTimeFormatter3.withZoneUTC();
      Integer integer0 = new Integer(1968);
      dateTimeFormatter3.withPivotYear(integer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      
      DateTimeUtils.setCurrentMillisOffset(0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("/j(6*tm=Mx [");
      dateTimeFormatter3.getChronolgy();
      dateTimeFormatter3.printTo((StringBuffer) null, (long) 0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (-222L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, 11);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(11);
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) 11);
      dateTimeFormatter0.getPivotYear();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1684);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("*vYRCt])V");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(1684, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.isPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, (-1004));
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('$');
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.withPivotYear((-1462));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer((-1462));
      Integer.getInteger("8aH!B");
      dateTimeFormatter3.withPivotYear((Integer) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      DateTimeUtils.setCurrentMillisOffset(Integer.MAX_VALUE);
      MockFileWriter mockFileWriter0 = new MockFileWriter("/j(6*tm=Mx [");
      dateTimeFormatter3.withPivotYear(0);
      dateTimeFormatter0.getPivotYear();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(Integer.MAX_VALUE, (Chronology) null, locale0, (Integer) null, 0);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      LocalTime localTime0 = new LocalTime((long) 0, dateTimeZone0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      dateTimeFormatter4.printTo((Writer) mockFileWriter0, (ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.printTo((Writer) mockFileWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      Integer integer0 = new Integer(1);
      dateTimeFormatter4.withPivotYear(integer0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeFormatter3.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = locale0.stripExtensions();
      dateTimeFormatter2.withLocale(locale1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      BuddhistChronology.getInstance();
      dateTimeFormatter3.withPivotYear(Integer.MAX_VALUE);
      try { 
        DateTimeZone.forOffsetHours((-1574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1574
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1, dateTimeFormatter6.getDefaultYear());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 677, 1215, (-263), (-1), (-1));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      dateTimeFormatter3.print((ReadablePartial) localDateTime0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      int int0 = 0;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      Locale locale0 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("{f2A");
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime("{f2A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"{f2A\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " \"c)c");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(878);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
      assertEquals(1, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      Locale locale0 = Locale.ITALY;
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withZoneUTC();
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter4.isParser();
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      Integer integer0 = new Integer(10209358);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      Locale locale0 = Locale.FRENCH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withOffsetParsed();
      linkedList0.add((Object) dateTimeFormatter0);
      dateTimeFormatter2.getLocale();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.print((ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.isPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      dateTimeFormatter0.withChronology(chronology0);
      dateTimeFormatter0.withPivotYear(1);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (long) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) dateTimeFormatterBuilder_CharacterLiteral0;
      objectArray0[2] = (Object) dateTimeFormatter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) dateTimeFormatterBuilder_CharacterLiteral0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "# Dt-`", objectArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-140L), (Chronology) ethiopicChronology0);
      dateTimeFormatter0.printTo((Appendable) printWriter0, (ReadableInstant) mutableDateTime0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      boolean boolean0 = dateTimeFormatter2.isParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertTrue(boolean0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('e');
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (byte) (-48));
      dateTimeFormatter2.withZoneUTC();
      Integer integer0 = new Integer(83);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(integer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseMillis("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1282));
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((-1282));
      assertEquals((-1282), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      dateTimeFormatter0.getLocale();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("sD\"RC$6^qC");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-232));
      Instant instant0 = new Instant((long) (-232));
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 1859);
      Instant instant2 = instant1.withDurationAdded(0L, 1);
      dateTimeFormatter1.print((ReadableInstant) instant2);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Chronology chronology0 = julianChronology0.withUTC();
      dateTimeFormatter1.withChronology(chronology0);
      dateTimeFormatter1.print((long) (-232));
      // Undeclared exception!
      try { 
        DateTimeZone.forID("na:AqjVum)W.)8x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'na:AqjVum)W.)8x' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.isPrinter();
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer((-2793));
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      Integer integer1 = new Integer(2123);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer1);
      Locale locale1 = Locale.CHINA;
      Locale locale2 = Locale.GERMANY;
      locale2.stripExtensions();
      Locale locale3 = Locale.UK;
      dateTimeFormatter1.withLocale(locale3);
      dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeFormatter3.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalDateTime("Instant must not be null");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.isPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer0 = new Integer(91);
      Integer integer1 = new Integer((-3919));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1));
      dateTimeFormatter2.withOffsetParsed();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
      dateTimeFormatter3.withLocale(locale0);
      DateTimeUtils.setCurrentMillisOffset((-1));
      MockFileWriter mockFileWriter0 = new MockFileWriter("/j(6*tm=Mx [");
      // Undeclared exception!
      try { 
        dateTimeFormatter3.printTo((Writer) mockFileWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.isPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1411), hashMap0);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_TimeZoneName0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2045);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.tz.DateTimeZoneBuilder$Recurrence");
      Locale locale0 = Locale.JAPANESE;
      String string0 = "#S/;/8zeal@!`w6W";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dateTimeFormatter1;
      objectArray0[1] = (Object) "org.joda.time.tz.DateTimeZoneBuilder$Recurrence";
      objectArray0[2] = (Object) dateTimeFormatter2;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "#S/;/8zeal@!`w6W", objectArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) printWriter0, 121L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('r');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((int) (byte) (-108));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Integer integer0 = new Integer(2000);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(11, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weeks();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, (-1462), (-2412));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3350);
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) (-2412));
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(0);
      dateTimeFormatter5.getPivotYear();
      CharBuffer.allocate(0);
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1, false, (-2762));
      DateTimeFormatter dateTimeFormatter6 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFormatter2.getChronology();
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      int int0 = (-762);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-762), true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("5c=K$uF6!XM\u0000K");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_StringLiteral0);
      String string0 = "P-UiLyx7K";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("P-UiLyx7K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P-UiLyx7K\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      int int0 = 10209375;
      Integer integer0 = new Integer(10209375);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      Locale locale0 = Locale.FRENCH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withOffsetParsed();
      linkedList0.add((Object) dateTimeFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.print((ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('U');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      boolean boolean0 = dateTimeFormatter2.isParser();
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      int int0 = 0;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      String string0 = "!A+F1jqR4.";
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.withDefaultYear(0);
      locale0.stripExtensions();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("!A+F1jqR4.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"!A+F1jqR4.\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(11, 11, 11);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-2472), false, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFormatter0.getChronology();
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.isPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      dateTimeFormatter0.withChronology(chronology0);
      dateTimeFormatter0.withPivotYear(1);
      Locale locale0 = Locale.ITALY;
      int int0 = 0;
      Integer integer0 = new Integer(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, strictChronology0, locale0, integer0, 1);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, "wK]uL\"XB@AE", 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 526;
      int int1 = 0;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(526, 0, 526);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(526);
      dateTimeFormatter1.withZoneUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      StringBuffer stringBuffer0 = new StringBuffer();
      fixedDateTimeZone0.getOffsetFromLocal((-2273L));
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) stringBuffer0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      DateTimeUtils.setCurrentMillisOffset(Integer.MAX_VALUE);
      MockFileWriter mockFileWriter0 = new MockFileWriter("/j(6*tm=Mx [");
      // Undeclared exception!
      try { 
        dateTimeFormatter4.printTo((Writer) mockFileWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-254), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Integer integer0 = new Integer(2000);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2385);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      DateTimeZone dateTimeZone0 = null;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      pipedOutputStream0.close();
      Locale locale0 = Locale.US;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) outputStreamWriter0, (-3151L), chronology0, 2385, (DateTimeZone) null, locale0);
      dateTimeFormatter0.print((-3151L));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-254));
      dateTimeFormatter2.getChronolgy();
      dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalDateTime("Parsing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Parsing not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Partial partial0 = new Partial(islamicChronology0);
      Partial partial1 = partial0.withChronologyRetainFields(islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial2 = partial1.with(dateTimeFieldType0, 1);
      DateTimeFormatter dateTimeFormatter0 = partial2.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      locale0.getExtension('L');
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
      dateTimeFormatter2.getParser();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter3.getParser();
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('H');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      int int0 = (-615);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-615));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      dateTimeFormatter3.withZone(dateTimeZone0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        MonthDay.parse("_>73rCXf7UdM=", dateTimeFormatter3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"_>73rCXf7UdM=\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 154, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      Locale locale0 = Locale.GERMAN;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(76);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
      Integer integer0 = new Integer(76);
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withPivotYear(integer0);
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(76, dateTimeFormatter7.getDefaultYear());
      assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseLocalDate("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      int int0 = 0;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(0);
      dateTimeFormatter5.getPivotYear();
      CharBuffer.allocate(0);
      int int1 = 0;
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter6.parseLocalDateTime("A)H=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"A)H=\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
}
