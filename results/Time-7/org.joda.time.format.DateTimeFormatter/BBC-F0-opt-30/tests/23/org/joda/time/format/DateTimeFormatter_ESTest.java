/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:32:06 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 755;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(755, 755, 1431655765, 1431655765, 755);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Partial partial0 = new Partial(localTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Chronology chronology0 = iSOChronology0.withZone(fixedDateTimeZone0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      int int1 = 1857;
      partial0.withPeriodAdded((ReadablePeriod) null, 1857);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.flush();
      try { 
        dateTimeFormatter3.printTo((Writer) pipedWriter0, (ReadablePartial) localTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter();
      MockDate mockDate0 = new MockDate((-69));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      DateTime dateTime0 = interval0.getEnd();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 292272992, 2392);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.lookup(linkedList0, linkedHashSet0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-2143856140));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      dateTimeFormatter3.withPivotYear(104);
      Integer.getInteger("");
      // Undeclared exception!
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      LocalDate localDate0 = LocalDate.parse("1");
      localDate0.getMonthOfYear();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) localDate0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 2000;
      int int1 = (-80);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-950), 2000, (-80));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      String string0 = ", ";
      MockFile mockFile0 = new MockFile(", ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (long) 2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146957303, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-4528));
      Locale locale0 = Locale.US;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(buddhistChronology0);
      Integer integer0 = new Integer(588);
      Integer integer1 = Integer.getInteger("", integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter5.withPivotYear((-4528));
      dateTimeFormatter1.withOffsetParsed();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(6);
      charArrayWriter0.append((CharSequence) "");
      Calendar calendar0 = MockCalendar.getInstance();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1116L), periodType0);
      MonthDay monthDay1 = monthDay0.minus(mutablePeriod0);
      monthDay1.toLocalDate(0);
      int int0 = (-1073741823);
      System.setCurrentTimeMillis(2652L);
      // Undeclared exception!
      dateTimeFormatter3.print((ReadablePartial) monthDay1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146957303, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-4528));
      Locale locale0 = Locale.US;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(buddhistChronology0);
      Integer integer0 = new Integer(588);
      Integer integer1 = Integer.getInteger("", integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter5.withPivotYear((-4528));
      dateTimeFormatter1.withOffsetParsed();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(6);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      Calendar calendar0 = MockCalendar.getInstance();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1116L), periodType0);
      MonthDay monthDay1 = monthDay0.minus(mutablePeriod0);
      LocalDate localDate0 = monthDay1.toLocalDate(0);
      LocalDate localDate1 = localDate0.withPeriodAdded(mutablePeriod0, (-1073741823));
      LocalDate localDate2 = localDate1.withFields(monthDay1);
      // Undeclared exception!
      dateTimeFormatter3.printTo((Appendable) charArrayWriter1, (ReadablePartial) localDate2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      StringBuffer stringBuffer0 = new StringBuffer(2000);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) instant0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 65533, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(65533);
      Locale locale0 = Locale.JAPANESE;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(65533);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      YearMonth yearMonth0 = new YearMonth((long) 65533, (Chronology) null);
      // Undeclared exception!
      dateTimeFormatter5.print((ReadablePartial) yearMonth0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      CopticChronology.getInstanceUTC();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-707), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      dateTimeFormatter1.isPrinter();
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      dateTimeFormatter1.isPrinter();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      Charset charset0 = Charset.defaultCharset();
      charset0.newEncoder();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      dateTimeFormatter2.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.print((ReadableInstant) dateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2));
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.ITALY;
      Locale.forLanguageTag("gB6G6@Q40{y*vT;_T1");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.withLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = LocalDate.parse("31");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-3177), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer((-246));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Chronology chronology0 = gregorianChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-3177));
      // Undeclared exception!
      try { 
        dateTimeFormatter5.printTo((Appendable) null, (ReadablePartial) localDate0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 1, 1, 1, 1, 1, 1);
      ethiopicChronology0.add((long) 3, (long) 0, 1889);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseInto(mutableDateTime0, "31", 789);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2078209981, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(444);
      dateTimeFormatter4.print(838L);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalDate("86");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"86\": Value 2078209986 for year must be in the range [-292269338,292272708]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146945161, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(2000);
      dateTimeFormatter3.withZoneUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2685);
      dateTimeZone0.toTimeZone();
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      dateTimeFormatter2.printTo(stringBuffer0, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2145892919, 2145892919);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      dateTimeFormatter0.print((long) 2145892919);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(653);
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone1);
      Locale locale0 = Locale.forLanguageTag("[45E)uJLb");
      Integer integer0 = new Integer(653);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(653, chronology0, locale0, integer0, 653);
      dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "bB$C3bGF1Q7", 1);
      Integer integer1 = Integer.getInteger("bB$C3bGF1Q7", (-962));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer1);
      dateTimeFormatter1.print(7878L);
      StringWriter stringWriter0 = new StringWriter();
      MockDate mockDate0 = new MockDate((-962));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.plusMonths(2133);
      LocalDate localDate2 = localDate1.withFields(localDate0);
      Interval interval0 = localDate2.toInterval(dateTimeZone0);
      DateTime dateTime0 = interval0.getEnd();
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2146645442, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (long) 2146645442);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(7, 7, 7);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId1 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_TimeZoneId1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo(stringBuffer0, (-1439L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadableInstant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "The partial must not be null";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TextField0);
      Integer integer0 = new Integer((-1115));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
      int int0 = (-2146410977);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The partial must not be null");
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-2146410977), (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.printTo((Appendable) charBuffer0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.format.ISOPeriodFormat");
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeFormatter0.print((-9223372036854775808L));
      dateTimeFormatter0.withChronology((Chronology) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2146700466, 2146700466, 2146700466);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      TimeZone timeZone0 = TimeZone.getTimeZone("HST");
      DateTimeZone.forTimeZone(timeZone0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.format.DateTimeFormatter");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) mockPrintWriter0, 998L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-457), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatter2.withZone((DateTimeZone) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dateTimeFormatter2.getPrinter();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2147182373, false, 2147182373);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147182373);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Printing not supported");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Chronology chronology0 = ethiopicChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(chronology0);
      // Undeclared exception!
      dateTimeFormatter5.printTo((Appendable) null, 2068L);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone(")tB$Mf0g?$");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.printTo((Writer) charArrayWriter0, (-1556L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter0.print((-1377L));
      dateTimeFormatter0.parseMillis("Asia/Tokyo");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-2143528796), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("HST", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.convert.ReadablePartialConverter", "m+7xcJ\"^~", true, 811, 811);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      MutableDateTime.now();
      dateTimeFormatter0.parseLocalDate("m+7xcJ\"^~");
      dateTimeFormatter0.withOffsetParsed();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "The partial must not be null", false, 2146481555, 2146481555);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.print((long) 2146481555);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      StringWriter stringWriter0 = new StringWriter(2996);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2160));
      Locale locale0 = Locale.FRANCE;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) 2146481555, (Chronology) gregorianChronology0, 2146481555, dateTimeZone0, locale0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "The partial must not be null");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(5062500);
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone1);
      YearMonth yearMonth0 = YearMonth.now(chronology0);
      dateTimeFormatter1.printTo(stringBuffer0, (ReadablePartial) yearMonth0);
      MutableDateTime.parse("The partial must not be null", dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      dateTimeFormatter0.getParser();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 750, 750);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      MutableDateTime.now();
      dateTimeFormatter0.parseLocalDate("");
      dateTimeFormatter0.parseLocalDateTime("");
      dateTimeFormatter0.withZoneUTC();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 750, 750);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.print((long) 750);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime.parse("", dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 762, 762);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset1 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 762, 762);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset1, dateTimeFormatterBuilder_TimeZoneOffset0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeZone.getDefault();
      Integer integer0 = new Integer(7131);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = new Locale("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(7131);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[2");
      locale0.getDisplayVariant();
      dateTimeFormatter0.printTo(stringBuffer0, (-491L));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-2124638076));
      dateTimeFormatter2.parseLocalDate("");
      dateTimeFormatter3.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 750, 750);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Integer integer0 = new Integer(7131);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      Locale locale0 = new Locale("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(7131);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[2");
      locale0.getDisplayVariant();
      dateTimeFormatter0.printTo(stringBuffer0, (-491L));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-2124638076));
      dateTimeFormatter2.parseLocalDate("");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter2.print((ReadableInstant) null);
      dateTimeFormatter0.withPivotYear(integer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Parsing not supported");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter1.parseInto(mutableDateTime0, "Parsing not supported", (-1));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-89);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1891));
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeFormatter1.print((-94L));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      dateTimeFormatter2.withLocale((Locale) null);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      dateTimeFormatter2.print((ReadablePartial) monthDay0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Appendable) charBuffer0, 7144L);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1));
      dateTimeFormatter0.isParser();
      Locale locale0 = new Locale("d2'gWY_@A}}]L^", "5Uh");
      dateTimeFormatter1.withLocale(locale0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, islamicChronology0);
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getZone();
      dateTimeFormatter2.isPrinter();
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      dateTimeFormatter0.withPivotYear((-6));
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter0.print((-1008L));
      dateTimeFormatter0.withZone((DateTimeZone) null);
      dateTimeFormatter1.parseMutableDateTime("Etc/UTC");
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter0.parseDateTime("Asia/Dhaka");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      int int0 = 4112;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4112);
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeFormatter0.print((-1189L));
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \" \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('[');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      int int0 = (-1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter2.withOffsetParsed();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(gJChronology0);
      String string0 = "America/Argentina/Buenos_Aires";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("America/Argentina/Buenos_Aires");
      MonthDay monthDay0 = new MonthDay(13123360L);
      dateTimeFormatter4.printTo((Writer) mockPrintWriter0, (ReadablePartial) monthDay0);
      dateTimeFormatter1.withDefaultYear(1);
      monthDay0.monthOfYear();
      dateTimeFormatter3.printTo((Writer) mockPrintWriter0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.printTo((StringBuffer) null, (ReadablePartial) monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.print((-1L));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(10);
      dateTimeFormatter2.parseMutableDateTime("Asia/Tokyo");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.withOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, 3042L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2147483061, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      Locale locale0 = Locale.FRENCH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2147483061, islamicChronology0, locale0, (Integer) 1, 1);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      // Undeclared exception!
      dateTimeFormatter3.print(1L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = dateTimeFormatter0.print(10800000L);
      assertEquals("Etc/UTC", string0);
      
      long long0 = dateTimeFormatter0.parseMillis("America/Phoenix");
      assertEquals(25200000L, long0);
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("America/Phoenix");
      assertEquals(25200000L, dateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("Vxq$?%nq6t7.Xy@#q%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Vxq$?%nq6t7.Xy@#q%\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char char0 = 'J';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('J');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      StringBuffer stringBuffer0 = new StringBuffer(1478);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter0.print(1122L);
      Locale locale0 = Locale.forLanguageTag("Etc/UTC");
      dateTimeFormatter0.withLocale(locale0);
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withYear((-3162));
      try { 
        dateTimeFormatter1.printTo((Appendable) pipedWriter0, (ReadablePartial) localDateTime1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-336));
      long long0 = dateTimeFormatter3.parseMillis("");
      assertEquals(0L, long0);
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals((-336), dateTimeFormatter3.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 30, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      String string0 = dateTimeFormatter0.print((-135L));
      assertEquals("1", string0);
      
      long long0 = dateTimeFormatter0.parseMillis("1");
      assertEquals(43200000L, long0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1472, false, (-1899));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      String string0 = dateTimeFormatter1.print((-2993L));
      assertEquals("365", string0);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("365");
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "365", 5);
      assertEquals((-6), int0);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(978134400000L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2455, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2455);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(3L, (Chronology) null, (Locale) null, (Integer) null, 2455);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      dateTimeFormatter5.getPivotYear();
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withChronology((Chronology) null);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(2455, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertSame(dateTimeFormatter3, dateTimeFormatter6);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('[');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gregorianChronology0);
      DateTimeUtils.setCurrentMillisFixed((-1L));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-2865));
      dateTimeFormatter4.getDefaultYear();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2865));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.previousTransition(1);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(18);
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withEra(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      localDate1.withField(dateTimeFieldType0, 4058);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.printTo((Writer) null, (ReadablePartial) localDate1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(4);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.getPrinter();
      int int0 = 1911;
      dateTimeFormatter2.withPivotYear(1911);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("#~&KwX-c ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1848), 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-1848));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology((Chronology) null);
      Integer integer0 = new Integer((-556));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1848
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.print((-95L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "Etc/UTC", 0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      MutableDateTime.now();
      String string0 = dateTimeFormatter0.print((long) 1);
      assertEquals("Etc/UTC", string0);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("Etc/UTC");
      assertEquals(0L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-578));
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(julianChronology0);
      Integer integer0 = dateTimeFormatter5.getPivotYear();
      assertNotNull(integer0);
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals((-578), (int)integer0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter0.print(3L);
      MutableDateTime.parse("Etc/UTC", dateTimeFormatter0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'J';
      charArray0[2] = '{';
      charArray0[3] = 'i';
      charArray0[4] = '.';
      charArray0[5] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 5);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (long) 1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime("z}W1Ktu");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      String string0 = dateTimeFormatter0.print(3L);
      assertEquals("Etc/UTC", string0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("Etc/UTC", dateTimeFormatter3);
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTime dateTime0 = new DateTime();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((-3158));
      assertEquals((-3158), (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      
      Locale locale0 = new Locale("No file directory provided", "`_K1wcP%", "No file directory provided");
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale0);
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = (-712);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-712), (-712));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-712));
      int int1 = 262;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(262);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter3.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-712));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-00:00:00.712' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.print(3L);
      MutableDateTime.parse("Etc/UTC", dateTimeFormatter0);
      DateTime dateTime0 = new DateTime();
      dateTimeFormatter0.parseMillis("Etc/UTC");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 26, 26);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-3614));
      dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter2.print((long) 26);
      MutableDateTime.parse("", dateTimeFormatter0);
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.print(3L);
      MutableDateTime.parse("Etc/UTC", dateTimeFormatter1);
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      String string0 = dateTimeFormatter1.print(3L);
      assertEquals("Etc/UTC", string0);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("Etc/UTC");
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("Etc/UTC");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = (-3901);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-3901), (-3901), (-3901));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeUtils.setCurrentMillisFixed((-3901));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.ITALIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.print(3187L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: it
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneId0);
      StringBuffer stringBuffer0 = new StringBuffer("A#[3m'nZE`h");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, 108681184L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(11, 11);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(15);
      Integer integer1 = Integer.getInteger("Instant must not be null", integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(697);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear((-509));
      dateTimeFormatter5.isOffsetParsed();
      int int0 = (-1166);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) charBuffer0, (-1166), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2537, 2537, (-2762));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_TimeZoneId0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      linkedList0.poll();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = null;
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      ISOChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[1] = 1;
      intArray0[2] = 0;
      iSOChronology0.validate(yearMonth0, intArray0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      dateTimeFormatter1.getPrinter();
      dateTimeFormatter1.getPivotYear();
      System.setCurrentTimeMillis(3L);
      String string0 = "org.joda.time.Weeks";
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime("org.joda.time.Weeks");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-1);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), (-1), (-1));
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("IcwBk2\"rTeR]M.xl");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(1796);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("N*ps!;Cl#N*~lj}");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology((Chronology) null);
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      dateTimeFormatter5.getPivotYear();
      dateTimeFormatter4.parseLocalTime("IcwBk2\"rTeR]M.xl");
      MockFile mockFile0 = new MockFile("", "org.joda.time.DurationFieldType$StandardDurationFieldType");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      Partial partial0 = new Partial(monthDay0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter2.printTo((Appendable) pipedWriter0, 4299L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter1.parseInto(mutableDateTime0, "d<(#$W'+.6Z#05}s", 0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("d<(#$W'+.6Z#05}s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"d<(#$W'+.6Z#05}s\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = dateTimeFormatter0.print(0L);
      assertEquals("Etc/UTC", string0);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("Etc/UTC");
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      Partial partial0 = new Partial(dateTimeFieldType0, 41, chronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter2.getPrinter();
      dateTimeFormatter0.print((ReadablePartial) partial0);
      dateTimeFormatter0.getPivotYear();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(41);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      dateTimeFormatter3.parseInto(mutableDateTime0, "", (-1));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear(3584);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(3584, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      
      System.setCurrentTimeMillis((-29L));
      boolean boolean0 = dateTimeFormatter2.isOffsetParsed();
      assertFalse(boolean0);
      
      int int0 = dateTimeFormatter2.parseInto(mutableDateTime0, "", 1);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals((-2), int0);
      
      int int1 = dateTimeFormatter2.getDefaultYear();
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(2000, int1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(28, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((long) 28);
      // Undeclared exception!
      try { 
        LocalDate.parse("", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTime dateTime0 = new DateTime((long) 1, dateTimeZone0);
      dateTimeFormatter2.print((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("2D)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2D)\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("2D)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone.getDefault();
      dateTimeFormatter1.parseInto(mutableDateTime0, "d<(#$W'+.6Z#05}s", 0);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-1), (-1), 2, 3, 4, 5, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(3);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(lenientChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 3);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      Integer integer0 = new Integer(3);
      dateTimeFormatter4.withPivotYear(integer0);
      String string0 = "3`%Rx1YpRh+O6";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("3`%Rx1YpRh+O6", "3`%Rx1YpRh+O6");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 3`%Rx1YpRh+O6
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatterBuilder_Fraction0.iMaxDigits = 2094;
      String string0 = dateTimeFormatter0.print((long) (-1));
      dateTimeFormatter0.parseLocalDateTime(string0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      int int0 = (-3005);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-3005), (-3005));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      int int1 = 2094;
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) (-3005));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(40);
      dateTimeFormatter0.isParser();
      String string0 = "5Uh";
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Writer) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.withOffsetParsed();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Africa/Cairo", objectArray0);
      dateTimeFormatter0.printTo((Writer) printWriter0, (long) 40);
      dateTimeFormatter0.isParser();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "Parsing not supported";
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseInto((ReadWritableInstant) null, "Parsing not supported", 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatterBuilder_Fraction0.iMaxDigits = 2094;
      String string0 = dateTimeFormatter0.print((long) (-1));
      LocalDate localDate0 = LocalDate.parse(string0, dateTimeFormatter0);
      localDate0.toString(dateTimeFormatter0);
      String string1 = dateTimeFormatter0.print((ReadablePartial) localDate0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals(2000, int0);
      
      dateTimeFormatter0.parseLocalDate("0000000000000000000000000000000000000000");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-2838), (-2838));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.isParser();
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeFieldType0.getRangeDurationType();
      Locale locale1 = Locale.CHINESE;
      dateTimeFormatter1.withLocale(locale1);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Object object0 = new Object();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(object0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter0.getChronolgy();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "d<(#$W'+.6Z#05}s", 0);
      assertEquals((-1), int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      Integer integer0 = new Integer((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 12825000, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("2D`)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2D`)\" is malformed at \"D`)\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      String string0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-2106), 656);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-2106));
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Locale locale0 = Locale.FRENCH;
      dateTimeFieldType0.getField(julianChronology0);
      Integer integer0 = new Integer(1133);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, julianChronology0, locale0, integer0, (-2144));
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertEquals((-2106), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 16);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) 2094);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      dateTimeFormatter1.getChronolgy();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.getSecondOfDay();
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      dateTimeFormatter1.getChronolgy();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.getSecondOfDay();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.withOffsetParsed();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(1L, dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Chronology chronology0 = buddhistChronology0.withZone(fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, chronology0);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      dateTimeFormatter1.getZone();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(charArrayWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.io.CharArrayWriter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      int int0 = 40;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      String string0 = "5'";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("5'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5'\" is malformed at \"'\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatterBuilder_Fraction0.iMaxDigits = 2094;
      String string0 = dateTimeFormatter0.print((long) (-1));
      LocalDate localDate0 = LocalDate.parse(string0, dateTimeFormatter0);
      String string1 = dateTimeFormatter0.print((ReadablePartial) localDate0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Writer writer0 = null;
      int int0 = 618;
      int int1 = 1;
      MockDate mockDate0 = new MockDate(40, (-1), 618, 1, 618);
      MockDate mockDate1 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate1);
      int int2 = 928;
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), (-2623), 24);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1843), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      Integer integer0 = new Integer((-841));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("b3K@Gd5OH*ZjS");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
      dateTimeFormatter4.withChronology((Chronology) null);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1));
      boolean boolean0 = dateTimeFormatter0.isParser();
      Locale locale0 = new Locale("d2'gWY_@A}}]L^", "5Uh");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withLocale(locale0);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, islamicChronology0);
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getZone();
      boolean boolean1 = dateTimeFormatter2.isPrinter();
      assertFalse(boolean1 == boolean0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), dateTimeFormatter2.getDefaultYear());
      
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear((-6));
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-6), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalTime("CE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('J');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.isFixed();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral1 = new DateTimeFormatterBuilder.CharacterLiteral('J');
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime1 = new MutableDateTime((DateTimeZone) fixedDateTimeZone1);
      dateTimeFormatter1.printTo((Writer) charArrayWriter0, (ReadableInstant) mutableDateTime0);
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(boolean0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getPivotYear();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      dateTimeFormatter0.getZone();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('`');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.isFixed();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) null);
      String string0 = "B0;bwf \\u2`YX/h`&";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      MockDate mockDate0 = new MockDate(4, 0, (-4327), 0, 0, (-1243));
      MutableDateTime mutableDateTime2 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime2.addYears((-22));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) localDate0);
      dateTimeFormatter0.parseInto(mutableDateTime1, string0, 0);
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, string0, 0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-1), int0);
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDate0);
      LocalDate localDate1 = localDate0.plusYears(0);
      dateTimeFormatter0.print((ReadablePartial) localDate1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.getChronolgy();
      String string0 = dateTimeFormatter0.print((long) 40);
      assertEquals("00000046296", string0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      LocalDateTime localDateTime0 = new LocalDateTime((-929L));
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.withDefaultYear((-1));
      dateTimeFormatter0.isParser();
      Locale locale0 = new Locale("d2'gWY_@A}}]L^", "5Uh");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withZoneUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime("5Uh", islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5Uh\" is malformed at \"Uh\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("QL6+CADSZpq@t;{p2");
      dateTimeFormatter0.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gJChronology0);
      gJChronology0.equals(dateTimeFormatter2);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter5.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertSame(dateTimeFormatter5, dateTimeFormatter4);
      
      boolean boolean0 = dateTimeFormatter2.isOffsetParsed();
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(3, hashMap0);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("0L\"E8-30(e6{u4ub");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0L\"E8-30(e6{u4ub\" is malformed at \"L\"E8-30(e6{u4ub\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 40, (-1));
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      Integer integer0 = new Integer(65);
      String string0 = "x\\(O9ud=+@I`om;smj";
      Integer.getInteger("x(O9ud=+@I`om;smj");
      dateTimeFormatter0.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) null);
      dateTimeFormatter2.getChronolgy();
      dateTimeFormatter1.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseInto(mutableDateTime0, "x(O9ud=+@I`om;smj", 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      dateTimeFormatter0.isParser();
      Locale locale0 = new Locale("d2'gWY_@A}}]L^", "5Uh");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatter2.getChronolgy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) mockPrintStream0, 0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      String string0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('J');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.isFixed();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) null);
      String string0 = "B0;bwf \\u2`YX/h`&";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      MockDate mockDate0 = new MockDate(5, 1808, 4, 1, 57, 3);
      mutableDateTime1.addYears((-1));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) localDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      dateTimeFormatter3.print((ReadablePartial) localDateTime0);
      dateTimeFormatter1.getPrinter();
      dateTimeFormatter2.printTo((Appendable) charArrayWriter0, 962L);
      Integer integer0 = new Integer((-1825));
      dateTimeFormatter3.withPivotYear(integer0);
      dateTimeFormatter0.printTo((Appendable) charArrayWriter0, 962L);
      assertEquals(16, charArrayWriter0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      dateTimeFormatter2.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter2.getChronology();
      dateTimeFormatter3.getChronolgy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatter2.withLocale(locale0);
      dateTimeFormatter0.getParser();
      dateTimeFormatter0.getParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("4Ioop|J~%N|#Im#U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(3570);
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter5 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      dateTimeFormatter0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withChronology(gregorianChronology0);
      dateTimeFormatter6.print((ReadablePartial) localDateTime0);
      assertEquals(3570, dateTimeFormatter6.getDefaultYear());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(40);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter0.getChronolgy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Integer integer0 = new Integer(40);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(40, (Chronology) null, (Locale) null, integer0, 103);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      dateTimeFormatter2.withZone(dateTimeZone0);
      dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) 40);
      assertEquals(8, byteArrayOutputStream0.size());
      
      dateTimeFormatter2.getZone();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      Integer integer0 = new Integer(65);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter1.getChronolgy();
      dateTimeFormatter2.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.parseInto(mutableDateTime0, "3Wci3B{C(|MxP", 4);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalTime("weekOfWeekyear");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"weekOfWeekyear\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1));
      dateTimeFormatter0.isParser();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      dateTimeFormatter3.getChronology();
      dateTimeFormatter4.getChronolgy();
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(copticChronology0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(3570);
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      Integer integer0 = new Integer(3570);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertEquals(3570, dateTimeFormatter6.getDefaultYear());
      
      dateTimeFormatter3.getChronolgy();
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter1.withOffsetParsed();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter7.isOffsetParsed());
      assertSame(dateTimeFormatter7, dateTimeFormatter1);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      String string0 = "Converter[";
      // Undeclared exception!
      try { 
        dateTimeFormatter6.parseInto(mutableDateTime0, "Converter[", 2000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print(0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      CopticChronology.getInstanceUTC();
      CopticChronology.getInstanceUTC();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-707), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.withOffsetParsed();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockDate mockDate0 = new MockDate((-760), 1, 1, (-651), (-2217));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-651));
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (ReadablePartial) localDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFieldType.yearOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo(stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      CopticChronology.getInstanceUTC();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-707), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      dateTimeFormatter1.isPrinter();
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      dateTimeFormatter1.isPrinter();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("iD.)lp[SM`>");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Writer) outputStreamWriter0, (ReadableInstant) dateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Chronology chronology0 = iSOChronology0.withUTC();
      YearMonth yearMonth0 = new YearMonth(0L, chronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) yearMonth0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1));
      dateTimeFormatter0.isParser();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
      dateTimeFormatter1.withChronology(chronology0);
      dateTimeFormatter2.isPrinter();
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getZone();
      dateTimeFormatter0.isPrinter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.getBuffer();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 3600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3600 for clockhourOfDay must not be larger than 24
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3, 3);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("b:f0C");
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1), false);
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 5062500, false, 927);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFormatter2.getZone();
      MockDate mockDate0 = new MockDate((-2092), (-2092), 3248, 2356, 927);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      Locale locale0 = Locale.FRANCE;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter3.printTo((Writer) null, (ReadablePartial) localDate0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      StringBuffer stringBuffer0 = new StringBuffer(40);
      dateTimeFormatter2.printTo(stringBuffer0, (long) 40);
      String string0 = "The partial must not be null";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("The partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The partial must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      int int0 = 177;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hTN:ZJdr~lVAA}5");
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      dateTimeFieldType0.getDurationType();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getZone();
      Writer writer0 = null;
      MockDate mockDate0 = new MockDate(177, 177, 177, (-760), (-760));
      LocalDate.fromDateFields(mockDate0);
      EthiopicChronology.getInstance();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("K$33$F9ZbTuIX7{,TS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"K$33$F9ZbTuIX7{,TS\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      CopticChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-36));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale((Locale) null);
      dateTimeFormatter5.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMillis("pYfI\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Pc#");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = buddhistChronology0.withUTC();
      dateTimeFormatter0.withChronology(chronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatter0.withDefaultYear(3);
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, (-1260), (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      String string0 = "P7k0";
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDate("P7k0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.withDefaultYear((-1));
      dateTimeFormatter0.isParser();
      String string0 = "5Uh";
      Locale locale0 = new Locale("d2'gWY_@A}}]L^", "5Uh");
      dateTimeFormatter1.withLocale(locale0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime("5Uh", islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5Uh\" is malformed at \"Uh\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-3544), (-3544));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, (DateTimeParser) null);
      dateTimeFormatter0.withLocale((Locale) null);
      dateTimeFormatter0.withZoneUTC();
      String string0 = "The partial must not be null";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("The partial must not be null");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getZone();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p(g.^;BgD1G");
      Locale locale0 = Locale.ENGLISH;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now((DateTimeZone) fixedDateTimeZone0);
      dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      dateTimeFormatter0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("U");
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-777), false, (-2654));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-777));
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-777), dateTimeFormatter4.getDefaultYear());
      
      Integer integer0 = new Integer(177);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(integer0);
      assertEquals((-777), dateTimeFormatter5.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      dateTimeFormatter3.getChronology();
      Locale locale0 = Locale.forLanguageTag("wSI");
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale0);
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      
      locale0.getUnicodeLocaleKeys();
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      assertEquals(0, dateTimeFormatter6.getDefaultYear());
      
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
      assertFalse(dateTimeFormatter7.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hTN:ZJdr~lVAA}5");
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getZone();
      MockDate mockDate0 = new MockDate(177, 177, 177, (-760), (-760));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getZone();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p(g.^;BgD1G");
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "w", (Object[]) null);
      dateTimeFormatter0.printTo((Writer) printWriter0, (-2274L));
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(65535);
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer(65535);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      
      dateTimeFormatter4.getPrinter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(65535);
      String string0 = "org.joda.time.format.DateTimeFormat";
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("org.joda.time.format.DateTimeFormat");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"org.joda.time.format.DateTimeFormat/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000006
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      dateTimeFormatter1.withZone(dateTimeZone0);
      dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter2.getChronology();
      String string0 = "wSI";
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseMillis("wSI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter2.getChronology();
      dateTimeFormatter3.getChronolgy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      dateTimeFormatter1.withZoneUTC();
      String string0 = "The partial must not be null";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("The partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The partial must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getZone();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      Integer integer0 = new Integer(24);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1846);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withPivotYear((Integer) 1);
      GJChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withChronology(islamicChronology0);
      Locale locale1 = dateTimeFormatter6.getLocale();
      assertNotNull(locale1);
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(1846, (int)dateTimeFormatter5.getPivotYear());
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter7);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 272, false, 272);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(272);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      Integer integer0 = dateTimeFormatter3.getPivotYear();
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertEquals(272, (int)integer0);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1968, 2438);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.withPivotYear(2438);
      Locale locale0 = Locale.PRC;
      dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.withDefaultYear((-1));
      Integer integer0 = new Integer((-410));
      Integer integer1 = new Integer((-4244));
      dateTimeFormatter0.withPivotYear(integer1);
      String string0 = "";
      MockFile mockFile0 = new MockFile("No partial converter found for type: ", "");
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File directory doesn't exist: /experiment/No partial converter found for type: 
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, 0, false);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter1.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter3.getChronolgy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.printTo((Appendable) mockPrintStream0, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hTN:ZJdr~lVAA}5");
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getZone();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hTN:ZJdr~lVAA}5", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      dateTimeFormatter0.printTo((Appendable) mockPrintStream0, 1440L);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-457), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter0.getChronolgy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hTN:ZJdr~lVAA}5");
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      Integer integer0 = new Integer(177);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1599L, (Chronology) ethiopicChronology0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTimeISO();
      DateTime dateTime0 = mutableDateTime1.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.minusDays(0);
      dateTimeFormatter3.print((ReadableInstant) dateTime1);
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.withOffsetParsed();
      int int0 = (-2183);
      try { 
        Integer.valueOf("org.joda.time.DateTime$Property", (-2183));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2183 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1968, 2438);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2438);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      dateTimeFormatter3.getParser();
      dateTimeFormatter3.getParser();
      // Undeclared exception!
      try { 
        DateTime.parse("sOp[+Neo]gqp5zGNzc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"sOp[+Neo]gqp5zGNzc\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter2.getChronology();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis("wSI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('D');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(3708);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalTime("`_utx`d%w,6g(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"`_utx`d%w,6g(\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      CopticChronology.getInstanceUTC();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";BX0z}*qW7qa");
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 1, true);
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_UnpaddedNumber0);
      dateTimeFormatter3.isPrinter();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.print(1670L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1968, 2438);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2438);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Locale locale0 = Locale.GERMANY;
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFormatter2.withChronology(islamicChronology0);
      dateTimeFormatter1.getLocale();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((long) 2438, (Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.withHourOfDay(1);
      DateTime dateTime2 = dateTime1.withWeekyear(121);
      DateTime dateTime3 = dateTime2.withYearOfEra(2438);
      dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) dateTime3);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      dateTimeFormatter3.getParser();
      dateTimeFormatter3.getParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("sOp[+Neo]gqp5zGNzc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"sOp[+Neo]gqp5zGNzc\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      int int0 = 0;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      dateTimeFormatter1.withZone(dateTimeZone0);
      Locale locale0 = Locale.KOREAN;
      int int1 = (-1413);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1413));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      dateTimeFormatter2.getChronology();
      String string0 = ";BX0z}*qW7qa";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";BX0z}*qW7qa");
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(";BX0z}*qW7qa");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \";BX0z}*qW7qa/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000005
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hTN:ZJdr~lVAA}5");
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 177, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getZone();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      int int0 = 1900;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1900, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      StringBuffer stringBuffer0 = new StringBuffer("must not be larger than ");
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      Locale locale0 = Locale.ITALIAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayScript(locale1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1968, 2438);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2438);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      dateTimeFormatter3.getParser();
      dateTimeFormatter3.getParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("sOp[+Neo]gqp5zGNzc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"sOp[+Neo]gqp5zGNzc\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale((Locale) null);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      dateTimeFormatter4.withPivotYear((-4038));
      try { 
        DateTimeZone.forOffsetHoursMinutes((-4038), 3176);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -4038
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      int int0 = 0;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      int int1 = 28265625;
      dateTimeFieldType0.getDurationType();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 28265625, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_UnpaddedNumber0);
      IslamicChronology.getInstance();
      dateTimeFormatter0.withPivotYear((Integer) 1);
      int int2 = 0;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('D');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(3708);
      int int0 = (-325);
      dateTimeFormatter2.withPivotYear((-325));
      dateTimeFormatter0.isParser();
      Writer writer0 = null;
      String string0 = "%w1h%mDI`WA`#DR";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("%w1h%mDI`WA`#DR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"%w1h%mDI`WA`#DR\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = (-515);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-515), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeZone.getDefault();
      DateTimeUtils.setCurrentMillisFixed(84L);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.getParser();
      dateTimeFormatter0.getLocale();
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = ',';
      int int1 = (-1397);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-515), (-1397));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('7');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      int int0 = 0;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      GJChronology.getInstanceUTC();
      dateTimeFormatter2.withPivotYear(197);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("Seconds");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Seconds\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1061), true);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1061), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      int int0 = (-1692);
      dateTimeFormatter1.withPivotYear((-1692));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1817), "G6=j/3");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'G6=j/3' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      int int0 = 40;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 40, 40);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      String string0 = "8t]_|%gPl)";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      int int0 = (-457);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-457), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter0.getChronolgy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) mockPrintStream0, (long) (-457));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), false, 0);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('9');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.withDefaultYear(335);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2000, 411, 335, 0, 0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 411 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
