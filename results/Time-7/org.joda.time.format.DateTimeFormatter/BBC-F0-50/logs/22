* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.joda.time.format.DateTimeFormatter
* Starting Client-0
* Connecting to master process on port 4330
* Analyzing classpath: 
  - subjects/buggy-versions/Time-7/target/classes
  - defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar
* Finished analyzing classpath
* Generating tests for class org.joda.time.format.DateTimeFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 984
* Using seed 1462357560
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 473 / 984
* Search finished after 603s and 839 generations, 321033 statements, best individual has fitness: 167.0
* Minimizing test suite
[MASTER] 08:41:51.269 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 208
* Number of covered goals: 190
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 113
* Number of covered goals: 102
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 77
* Number of covered goals: 77
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 325
* Number of covered goals: 297
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 81%
* Total number of goals: 147
* Number of covered goals: 119
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 113
* Number of covered goals: 95
* Generated 177 tests with total length 2531
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:42:32.507 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6685166666666666% of time used, but only 50/177 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
[MASTER] 08:43:00.883 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:43:17.513 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.joda.time.format.DateTimeFormatter_203_tmp__ESTest.test0(DateTimeFormatter_203_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 08:43:17.514 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
dateTimeFormatterBuilder_Fraction0.iMaxDigits = 1;
Integer integer0 = new Integer(1);
dateTimeFormatterBuilder_Fraction0.iMinDigits = 1;
DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
dateTimeFormatter3.isOffsetParsed();
File file0 = MockFile.createTempFile("bc*OiLD;mm4-<40P", "bc*OiLD;mm4-<40P");
MockFile mockFile0 = new MockFile(file0, "bc*OiLD;mm4-<40P");
DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale((Locale) null);
dateTimeFormatter1.print((-783L));
dateTimeFormatter1.isOffsetParsed();
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
Object[] objectArray0 = new Object[0];
PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
LocalDateTime localDateTime0 = LocalDateTime.now();
dateTimeFormatter4.printTo((Writer) printWriter0, (ReadablePartial) localDateTime0);

[MASTER] 08:43:23.963 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.joda.time.format.DateTimeFormatter_207_tmp__ESTest.test0(DateTimeFormatter_207_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 08:43:23.964 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
File file0 = MockFile.createTempFile("dN!AZqn@q0yd3i1i", "");
MockFile mockFile0 = new MockFile(file0, "");
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-926), false);
DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_UnpaddedNumber0);
DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale((Locale) null);
dateTimeFormatter4.print((long) (-926));
boolean boolean0 = dateTimeFormatter4.isOffsetParsed();
assertFalse(boolean0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
Object[] objectArray0 = new Object[5];
objectArray0[0] = (Object) "bc*OiLD;mm4-<40P";
objectArray0[1] = (Object) null;
objectArray0[2] = (Object) mockPrintWriter0;
objectArray0[3] = (Object) dateTimeFormatter0;
objectArray0[4] = (Object) dateTimeFormatterBuilder_UnpaddedNumber0;
mockPrintWriter0.printf("", objectArray0);
LocalDateTime localDateTime0 = LocalDateTime.now();
dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDateTime0);
assertFalse(dateTimeFormatter2.isOffsetParsed());
assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
assertEquals(2000, dateTimeFormatter2.getDefaultYear());

dateTimeFormatter3.getPivotYear();
assertSame(dateTimeFormatter3, dateTimeFormatter4);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'DateTimeFormatter_ESTest' to results/Time-7/org.joda.time.format.DateTimeFormatter/BBC-F0-50/tests/22
* Done!

* Computation finished
