/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 13:09:11 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.time.ZoneOffset;
import java.time.temporal.TemporalAccessor;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneId0);
      StringBuffer stringBuffer0 = new StringBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) 13, (Chronology) buddhistChronology0, 13, dateTimeZone1, locale0);
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(13);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone2);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 10, false, 10);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter1.print(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      int int0 = (-1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (-9223372036854775808L));
      System.setCurrentTimeMillis(1426L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1), 1, (-2144676478), 618, 618, 618, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 618 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = 2146752216;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2146752216, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      long long0 = 1L;
      Instant instant0 = new Instant(1L);
      // Undeclared exception!
      dateTimeFormatter1.print((ReadableInstant) instant0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      int int0 = 2147183216;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2147183216, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.withOffsetParsed();
      UTCProvider uTCProvider0 = new UTCProvider();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "D8)z/ a7fW;K'";
      uTCProvider0.getZone("D8)z/ a7fW;K'");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(2384);
      YearMonth yearMonth0 = new YearMonth();
      Object object0 = new Object();
      yearMonth0.equals(object0);
      // Undeclared exception!
      dateTimeFormatter3.print((ReadablePartial) yearMonth0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 999;
      int int1 = 18;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(999, 18, 999);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      dateTimeFormatter0.withDefaultYear(144);
      File file0 = MockFile.createTempFile("][K$wp,*", "][K$wp,*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3570, 3570);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFieldType0.getDurationType();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3570);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) charArrayWriter0, (long) 3570);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1675);
      DateTimeFieldType.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2383), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      StringWriter stringWriter0 = new StringWriter();
      dateTimeFormatter1.print((-1550L));
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "+00:00:01.675", 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"+00:00:01.675\": Value -2400 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone.forOffsetMillis(1675);
      DateTimeFieldType.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2383), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.print(895L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode1);
      Locale.lookup(linkedList0, list0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime("01");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"01\": Value -2399 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1014, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, (DateTimeParser) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gJChronology0);
      dateTimeFormatter1.withDefaultYear(1014);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withChronology(gJChronology0);
      dateTimeFormatter2.getParser();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("}wv1I16");
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(87, 2000, (-645));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = '^';
      charArray0[2] = '-';
      charArray0[3] = 'C';
      charArray0[4] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 340L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(926);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      int int0 = 16;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-368), true);
      int int1 = 12740625;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 926, true, 12740625);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
      dateTimeFormatter1.print((long) 16);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "n";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("n");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'M';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = '|';
      charArray0[3] = '9';
      charArray0[4] = 'G';
      charArray0[5] = '[';
      charArray0[6] = 'Y';
      charArray0[7] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(7027L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer1, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone.forOffsetHoursMinutes(0, (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.parseMutableDateTime("America/Indiana/Indianapolis");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "xdo#uoO%JRY9F#C5=";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("xdo#uoO%JRY9F#C5=");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("xdo#uoO%JRY9F#C5=");
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      locale0.toLanguageTag();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      dateTimeFormatter2.parseInto(mutableDateTime1, "", 2);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(23);
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2000);
      dateTimeFormatter4.getPrinter();
      Integer integer0 = new Integer(23);
      dateTimeFormatter2.withPivotYear(integer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(3177);
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      locale0.toLanguageTag();
      ISOChronology.getInstance(dateTimeZone0);
      Integer integer0 = new Integer(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("en-GB");
      dateTimeFormatter3.printTo((Writer) mockPrintWriter0, (long) 3177);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      int int0 = (-2147483060);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2147483060), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      Locale locale0 = Locale.GERMAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      GJChronology.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer("ob)HR(<v@4");
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) stringBuffer0, 2216L);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("@v2I");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockDate mockDate0 = new MockDate((-2057L));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay monthDay1 = monthDay0.withDayOfMonth(24);
      Period period0 = new Period((-2057L));
      MonthDay monthDay2 = monthDay1.minus(period0);
      MonthDay monthDay3 = monthDay2.withPeriodAdded(period0, 1);
      try { 
        dateTimeFormatter1.printTo((Writer) pipedWriter0, (ReadablePartial) monthDay3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1000, (-555));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("]_uP'UrYx1=I/x!");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Appendable) charBuffer0, 343L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Field is not supported");
      Locale locale0 = new Locale("Field is not supported");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1091));
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone((DateTimeZone) null);
      dateTimeFormatter3.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withLocale(locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale1 = Locale.CHINESE;
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("", integer0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1973L, iSOChronology0, locale1, integer1, (-2669));
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, ";", 0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      dateTimeFormatter4.withLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("}901:t|!,z {XHm");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("6nghMPiUi5?e28+w@{@", true);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeZone dateTimeZone0 = null;
      linkedList0.iterator();
      StringBuffer stringBuffer0 = new StringBuffer("/W5L.A]K,8bO");
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2147483449, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      dateTimeFormatter0.printTo((Writer) stringWriter0, (-8L));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("@v2I");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(51);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gJChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 51);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      dateTimeFormatter5.print(1916L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      StringWriter stringWriter0 = new StringWriter();
      dateTimeFormatter0.printTo((Writer) stringWriter0, 32L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      Integer integer0 = Integer.valueOf((-1624));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      dateTimeFormatter5.getPivotYear();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "The partial must not be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      StringBuffer stringBuffer0 = new StringBuffer(623158436);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GregorianCalendar gregorianCalendar0 = mutableDateTime0.toGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2147483352, true);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(388, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
      dateTimeFormatter0.print(1235L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Instant must not be null");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1812));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1812));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(islamicChronology0);
      dateTimeFormatter5.parseDateTime("Instant must not be null");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1, true, 86399999);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFieldType0.getField((Chronology) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z:[wSa6@v~{r");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) durationFieldType0;
      objectArray0[2] = (Object) dateTimeFormatter0;
      objectArray0[3] = (Object) dateTimeFormatter1;
      objectArray0[4] = (Object) dateTimeFieldType0;
      objectArray0[5] = (Object) dateTimeFormatter2;
      objectArray0[6] = (Object) dateTimeFormatter1;
      objectArray0[7] = (Object) dateTimeFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("z:[wSa6@v~{r", objectArray0);
      YearMonth yearMonth0 = new YearMonth(2946L, (Chronology) null);
      // Undeclared exception!
      dateTimeFormatter2.printTo((Writer) printWriter0, (ReadablePartial) yearMonth0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "org.joda.time.field.StrictDateTimeield";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.field.StrictDateTimeield");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.parseMillis("Asia/Shanghai");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 2147483449, 2147483449);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(19);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(2147483449);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print((long) 2147483449);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.parseMillis("EST");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Writer writer0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2146430443, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(gJChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) 3);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2164);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(2262);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.printTo((Writer) null, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Parsing not supported");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.parseMutableDateTime("Australia/Darwin");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, 301L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = "";
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (-9L));
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(" in8tant is ");
      String string0 = "";
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      int int0 = 2487;
      Integer integer0 = new Integer(2487);
      dateTimeFormatter0.withPivotYear(integer0);
      try { 
        DateTimeZone.forOffsetHoursMinutes(2487, 2487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 2487
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(" in8tant is ", " in8tant is ", true, 63, 3083);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.parseMutableDateTime(" in8tant is ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(50, 327, 6);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.withDefaultYear(43);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadableInstant) instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1220), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.JAPANESE;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-1220));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-1220));
      dateTimeFormatter5.getPrinter();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 739;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(739, 739, 739);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      dateTimeFormatter0.withPivotYear((-873));
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, 1554L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "|";
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, 20503125, true, 20503125);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "Millis";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Millis");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Instant instant0 = new Instant((long) 0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 15);
      Chronology chronology0 = instant1.getChronology();
      DateTime dateTime0 = mutableDateTime0.toDateTime(chronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) dateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseMillis("");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, 0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTime dateTime0 = new DateTime(2582L);
      DateTime dateTime1 = dateTime0.minusMonths(1225);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) dateTime1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('`');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-3716));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-3716));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter5.getDefaultYear();
      System.setCurrentTimeMillis((-3716));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 2146652256;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2146652256, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
      Locale locale0 = Locale.JAPANESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      int int1 = 89;
      StringBuffer stringBuffer0 = new StringBuffer(89);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo(stringBuffer0, 1554L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      dateTimeFormatter0.parseMillis("");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.forLanguageTag("");
      dateTimeFormatter0.parseMillis("");
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      dateTime0.toCalendar(locale0);
      dateTimeFormatter0.print((ReadableInstant) dateTime0);
      dateTimeFormatter0.getPrinter();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.parseMutableDateTime("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale.forLanguageTag("");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (-1695L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2255, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.isOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.reverse();
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Locale locale0 = new Locale("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer integer0 = new Integer(129);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter2.getChronology();
      dateTimeFormatter3.getPivotYear();
      StringBuffer stringBuffer1 = new StringBuffer(2274);
      DateTime dateTime0 = new DateTime();
      dateTimeFormatter2.printTo(stringBuffer1, (ReadableInstant) dateTime0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "org.joda.time.format.DateTimeFormatter", (-129));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Instant must not be null");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1812));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(islamicChronology0);
      dateTimeFormatter5.parseDateTime("Instant must not be null");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis(":Z4");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1522);
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeFormatter0.print(244L);
      dateTimeFormatter0.print((-2245L));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("I),+u^j]", "I),+u^j]", false, 925, 2250);
      LocalDateTime.now();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.parseDateTime("I),+u^j]");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale((Locale) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(gJChronology0);
      dateTimeFormatter5.withOffsetParsed();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Integer integer0 = new Integer((-1109));
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, (-1109), true, 14);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer1 = new Integer(14);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(chronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.print((ReadableInstant) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, 7593750, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      int int0 = 34;
      dateTimeFormatter0.withDefaultYear(34);
      Integer integer0 = new Integer(128);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      YearMonth yearMonth0 = new YearMonth((long) 7593750);
      // Undeclared exception!
      dateTimeFormatter1.print((ReadablePartial) yearMonth0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      Chronology chronology0 = dateTimeFormatter2.getChronology();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dateTimeFormatter1.print(1L);
      dateTimeFormatter2.getParser();
      StringBuffer stringBuffer0 = new StringBuffer(40);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Etc/UTC");
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, 86400L, chronology0, 1288, dateTimeZone0, locale0);
      StringBuffer stringBuffer1 = null;
      try {
        stringBuffer1 = new StringBuffer((-502));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      TimeZone.getDefault();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, (DateTimeParser) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      dateTimeFormatter0.parseInto(mutableDateTime0, "^dvXB\"0mO (^3\"", (-1));
      dateTimeFormatter0.withOffsetParsed();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1189), false, (-1189));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      Integer integer0 = new Integer((-1189));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(665);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(22);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dateTimeFormatter5.withZone(dateTimeZone0);
      dateTimeFormatter0.getParser();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('m');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      dateTimeFormatter0.withChronology((Chronology) null);
      dateTimeFormatter1.print((long) 0);
      dateTimeFormatter0.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("m");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.FRANCE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2000);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0, dateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
      dateTimeFormatter1.parseInto(mutableDateTime1, "aTEeCyq81.", 4);
      dateTimeFormatter0.withOffsetParsed();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print(345L);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.getZone();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseMutableDateTime("");
      dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (long) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFieldType.yearOfCentury();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Integer integer0 = new Integer(2195);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(islamicChronology0);
      dateTimeFormatter3.getChronolgy();
      dateTimeFormatter0.withDefaultYear((-1));
      try { 
        DateTimeZone.forOffsetHoursMinutes(64, (-208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 64
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.FRANCE;
      dateTimeFormatter0.print((long) 0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis("70");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"70\": Value -30 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('l');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatter0.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.print(162L);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseInto(mutableDateTime0, "", 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      TimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale1);
      int int0 = 2486;
      Integer integer0 = new Integer(2486);
      dateTimeFormatter1.withPivotYear(integer0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      iSOChronology0.withUTC();
      dateTimeFormatter1.getChronolgy();
      dateTimeFormatter0.withChronology((Chronology) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 0L);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      TimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      dateTimeFormatter5.getChronolgy();
      dateTimeFormatter2.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter5.withOffsetParsed();
      dateTimeFormatter0.withChronology((Chronology) null);
      dateTimeFormatter6.parseDateTime("");
      dateTimeFormatter0.withDefaultYear((-744));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-1), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.getPrinter();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3233);
      dateTimeFormatter2.withZone(fixedDateTimeZone0);
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      dateTimeFormatter1.parseInto(mutableDateTime0, "", 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (ReadableInstant) dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatter0.print((long) 0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("70");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"70\": Value -30 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      Locale locale0 = new Locale("");
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      StringBuffer stringBuffer0 = new StringBuffer(1219);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      dateTimeFormatter1.withDefaultYear(3);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter3.parseInto(mutableDateTime0, "aTeCyq81.", 1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter2.getParser();
      dateTimeFormatter4.getDefaultYear();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
      dateTimeFormatter0.withOffsetParsed();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFieldType.yearOfCentury();
      GregorianChronology.getInstanceUTC();
      Locale locale0 = Locale.CANADA;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0);
      dateTimeFormatter1.parseInto(mutableDateTime0, "", (-1542));
      dateTimeFormatter1.withOffsetParsed();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2713, false);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 18, false);
      Integer integer0 = new Integer(14);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, (DateTimeParser) null);
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      dateTimeFieldType0.getDurationType();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(2713);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(copticChronology0);
      dateTimeFormatter4.withOffsetParsed();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatter0.print((long) 0);
      dateTimeFormatter0.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("70");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"70\": Value -30 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      dateTimeFieldType0.getField(chronology0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 22, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatter0.print(0L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, "", 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      int int0 = 0;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Cb5");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      dateTimeFormatter1.withZoneUTC();
      try { 
        Integer.decode("Parsing not supported");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Parsing not supported\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Integer integer0 = new Integer((-1109));
      String string0 = null;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2713, false);
      String string0 = "{1(";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 18, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      dateTimeFormatter0.withDefaultYear(1664);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("=c@C2T)=hIBR");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(119);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-3197), true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.parseMutableDateTime("");
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter3.withOffsetParsed();
      dateTimeFormatter2.withChronology((Chronology) null);
      dateTimeFormatter3.parseDateTime("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("~%(oq7F=ry", "BZl", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(788);
      Integer integer1 = new Integer(3296);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer1);
      dateTimeFormatter0.parseLocalDateTime("BZl");
      dateTimeFormatter0.withDefaultYear(3296);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Integer integer2 = new Integer(3296);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter2.print((ReadablePartial) localDateTime0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter1.getChronolgy();
      dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter3.withOffsetParsed();
      dateTimeFormatter0.withChronology((Chronology) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer(359);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("{1(");
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.print((ReadableInstant) mutableDateTime0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter3.withChronology((Chronology) null);
      dateTimeFormatter0.parseDateTime("{1(");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 999;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(999, 18, 999);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      linkedHashSet0.add("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("org.joda.time.PeriodType");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer(359);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseMutableDateTime("{1(");
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(3);
      dateTimeFormatter1.parseDateTime("{1(");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{1(");
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusMinutes(1);
      dateTimeFormatter2.printTo(stringBuffer0, (ReadablePartial) localTime1);
      dateTimeFormatter3.parseMutableDateTime("{1(");
      dateTimeFormatter4.withDefaultYear(1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = null;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("=m-o_wE,.G+]|2g4{3");
      Locale locale0 = new Locale("=m-o_wE,.G+]|2g4{3");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1), false);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_StringLiteral0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getDayOfYear();
      dateTimeFormatter0.withPivotYear(3233);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
      dateTimeFormatter1.withOffsetParsed();
      try { 
        DateTimeZone.forOffsetHoursMinutes(90, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 90
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
      Locale locale0 = Locale.CANADA;
      dateTimeFormatter0.withLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer(359);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseMutableDateTime("{1(");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(21);
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeFormatter1.isParser();
      dateTimeFormatter0.withPivotYear(359);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      String string0 = "";
      dateTimeFormatter0.parseLocalDateTime("");
      dateTimeFormatter1.withDefaultYear(18);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 18, false);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer((-129));
      TimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      dateTimeFormatter1.getChronolgy();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(0);
      dateTimeFormatter5.withChronology((Chronology) null);
      dateTimeFormatter2.parseDateTime("{1(");
      dateTimeFormatter3.withPivotYear(integer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3233);
      dateTimeFormatter2.withZone(fixedDateTimeZone0);
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      dateTimeFormatter1.parseInto(mutableDateTime0, "", 1);
      dateTimeFormatter2.print((ReadablePartial) localDateTime0);
      Locale locale0 = Locale.ITALIAN;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter3.getLocale();
      dateTimeFormatter0.parseLocalDateTime("");
      dateTimeFormatter2.parseLocalTime("");
      dateTimeFormatter3.getDefaultYear();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      dateTimeFormatter1.withDefaultYear(18);
      LocalDateTime.now();
      Integer integer1 = new Integer((-1109));
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter2.print((ReadablePartial) localDateTime0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter1.getChronolgy();
      dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter0.withChronology((Chronology) null);
      dateTimeFormatter3.parseDateTime("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-1510);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-1510), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (long) (-1510));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Integer integer0 = new Integer(0);
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2193, false, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      Integer integer1 = new Integer(2144);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(integer1);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.FRENCH;
      dateTimeFormatter1.withLocale(locale1);
      StringWriter stringWriter0 = new StringWriter(17887500);
      dateTimeFormatter2.printTo((Writer) stringWriter0, (long) 17887500);
      dateTimeFormatter3.withPivotYear(77);
      dateTimeFormatter3.print((long) 77);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseLocalDate("Parsing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Parsing not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getDayOfYear();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(543);
      dateTimeFormatter1.print((ReadablePartial) localDateTime0);
      dateTimeFormatter1.getLocale();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(543, (int)dateTimeFormatter1.getPivotYear());
      
      dateTimeFormatter0.parseLocalDate("{1(");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      String string0 = "{1(";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Printing not supported");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 11, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      dateTimeFormatter0.withDefaultYear(543);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Integer integer0 = new Integer(11);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(11);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter2.print((ReadablePartial) localDateTime0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter3.printTo((Appendable) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_UnpaddedNumber0);
      dateTimeFormatter0.withDefaultYear(543);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Integer integer0 = new Integer((-1));
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2905), (-2905), 543);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1816), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1816));
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Integer integer0 = new Integer(543);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber1 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1816), true);
      dateTimeFormatter1.parseMillis("{1(");
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber1, dateTimeFormatterBuilder_StringLiteral0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime0);
      dateTimeFormatter1.print((ReadablePartial) localDateTime0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter3.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance((Chronology) null, dateTimeZone1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(543);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Integer integer0 = new Integer(543);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_FixedNumber0);
      dateTimeFormatter2.print((ReadablePartial) localDateTime0);
      int int0 = (-963);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((-963));
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      dateTimeFormatter1.printTo((Writer) pipedWriter0, (ReadablePartial) localDateTime0);
      int int1 = 1920;
      dateTimeFormatter3.withDefaultYear(1920);
      dateTimeFormatter0.isParser();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.format.DateTimeFormatter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter0.parseLocalDateTime("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 1);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, int0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (ReadableInstant) dateTime0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      
      dateTimeFormatter0.getChronology();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer((-129));
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.print(0L);
      dateTimeFormatter0.getParser();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer(359);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("{1(");
      assertEquals(0L, mutableDateTime0.getMillis());
      
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withChronology((Chronology) null);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("{1(");
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0L, dateTime0.getMillis());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("y1");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = new Locale("y1", "y1", "y1");
      dateTimeFormatter0.withLocale(locale0);
      Integer integer0 = new Integer((-129));
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeFormatter0.withZone(dateTimeZone0);
      locale0.getDisplayName();
      int int0 = 178;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(178);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) pipedWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer((-129));
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("{1(");
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-1246));
      assertEquals((-1246), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      dateTimeFormatter0.getPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3261);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      dateTimeFormatter1.parseInto(mutableDateTime0, "", 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter2.getChronolgy();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      dateTimeFormatter2.printTo(stringBuffer0, 0L);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseDateTime("minuteOfDay");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"minuteOfDay\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter0.print(100000000000000L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('/');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "00");
      dateTimeFormatter0.printTo((Appendable) charArrayWriter2, (long) 0);
      assertEquals("/0000", charArrayWriter2.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      TimeZone timeZone0 = TimeZone.getTimeZone("lWA");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.US;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((Integer) 1);
      dateTimeFormatter2.withLocale(locale0);
      dateTimeFormatter1.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("E*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"E*\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(543);
      assertEquals(543, dateTimeFormatter1.getDefaultYear());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = new Integer(543);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_FixedNumber0);
      dateTimeFormatter2.print((ReadablePartial) localDateTime0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter0.getChronolgy();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology((Chronology) null);
      assertSame(dateTimeFormatter5, dateTimeFormatter2);
      
      DateTime dateTime0 = dateTimeFormatter4.parseDateTime("{1(");
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(0L, dateTime0.getMillis());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (byte) (-104), true);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter1.withOffsetParsed();
      Instant instant0 = new Instant();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Duration.standardHours(3233);
      Instant instant1 = Instant.now();
      instant0.plus((long) (byte) (-104));
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTime();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, 3233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      StringWriter stringWriter0 = new StringWriter(3233);
      StringWriter stringWriter1 = stringWriter0.append('/');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = new Locale("", "", "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) integer0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      dateTimeFormatter1.printTo((Writer) printWriter0, 1111L);
      dateTimeFormatter0.withPivotYear(10080);
      dateTimeFormatter1.print((long) 3233);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('R');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(2144);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      Integer integer1 = new Integer(0);
      dateTimeFormatter1.withPivotYear(integer1);
      Locale locale0 = Locale.FRENCH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      dateTimeFormatter2.parseInto(mutableDateTime0, "minuteOfDay", 3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-4));
      dateTimeFormatter3.getChronolgy();
      dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseDateTime("minuteOfDay");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"minuteOfDay\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 1);
      assertEquals(1, int0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      dateTimeFormatter2.getChronolgy();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseDateTime("minuteOfDay");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"minuteOfDay\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType.hourOfDay();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(26);
      Integer integer1 = new Integer(0);
      dateTimeFormatter1.withPivotYear(integer1);
      Locale locale0 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter1.getChronolgy();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 26, true, 26);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      TimeZone timeZone0 = TimeZone.getTimeZone("%7+zd~am");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.US;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withZone(dateTimeZone0);
      int int0 = 3756;
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 26, true, 26);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      TimeZone timeZone0 = TimeZone.getTimeZone("%7+zd~am");
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = new Locale("");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, 128, true);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(933);
      localDateTime1.getDayOfYear();
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFormatter2.print((ReadablePartial) localDateTime0);
      dateTimeFormatter2.getChronolgy();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("00000000000000000000000020");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 17, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("y}b[");
      Locale locale0 = new Locale("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getDayOfYear();
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) localDateTime0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 26, true, 26);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      TimeZone timeZone0 = TimeZone.getTimeZone("%7+zd~am");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.US;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(3756);
      dateTimeFormatter4.getLocale();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) null, (-677L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("y1");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = new Locale("y1");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      Integer integer0 = new Integer((-129));
      long long0 = new Integer((-129));
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(178);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withDefaultYear(178);
      assertEquals(178, dateTimeFormatter4.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter2.parseLocalDateTime("y1");
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      boolean boolean0 = dateTimeFormatter3.isParser();
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(boolean0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(178, (int)dateTimeFormatter3.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\'');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      dateTimeZone0.toTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeZone0.isStandardOffset((-1168));
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "Printing not supported", 1031);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-1032), int0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeFormatter1.withOffsetParsed();
      dateTimeFormatter0.getLocale();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-1), dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2000);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      dateTimeZone1.toTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeZone0.isStandardOffset((-951L));
      int int0 = dateTimeFormatter2.parseInto(mutableDateTime0, "", 15356250);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertEquals((-1), dateTimeFormatter2.getDefaultYear());
      assertEquals((-15356251), int0);
      
      DateTimeZone.setDefault(dateTimeZone1);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_StringLiteral0);
      boolean boolean0 = dateTimeFormatter1.isPrinter();
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withOffsetParsed();
      assertEquals((-1), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals((-1), dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = new Locale("{1(");
      Integer integer0 = new Integer(2555);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      Integer integer1 = new Integer(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer2 = new Integer((-1455));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(fixedDateTimeZone0);
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      int int0 = dateTimeFormatter5.parseInto(mutableDateTime0, "", (-1455));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(1454, int0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      int int0 = 3233;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Locale locale0 = Locale.ROOT;
      dateTimeFormatter0.withLocale(locale0);
      int int1 = (-129);
      int int2 = (-909);
      Integer integer0 = new Integer((-909));
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Integer.getInteger("Instant must not be null");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2607L), iSOChronology0, locale0, (Integer) null, (-909));
      dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "1DiWazy|aKSrv", 0);
      String string2 = ".tEs;]>@fFW;(FF>A`";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis(".tEs;]>@fFW;(FF>A`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".tEs;]>@fFW;(FF>A`\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.reverse();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.ROOT;
      DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) julianChronology0);
      Instant instant0 = mutableDateTime0.toInstant();
      Duration duration0 = Duration.ZERO;
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      Instant instant2 = instant1.plus(1470L);
      String string0 = instant2.toString();
      assertEquals("2014-02-14T20:21:22.790Z", string0);
      
      MutableDateTime mutableDateTime1 = instant2.toMutableDateTime();
      mutableDateTime1.setMillisOfDay(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1272), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(boolean0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('i');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(2144);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      Integer integer1 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      Locale locale0 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withLocale(locale0);
      StringWriter stringWriter0 = new StringWriter(10080);
      StringWriter stringWriter1 = stringWriter0.append('/');
      dateTimeFormatter3.printTo((Writer) stringWriter1, (long) 1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      dateTimeFormatter2.print((long) 1);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseLocalDate("9+ZoP5TVNT=)[cwR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9+ZoP5TVNT=)[cwR\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\'');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1));
      assertEquals((-1), dateTimeFormatter2.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      dateTimeZone0.toTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeZone0.isStandardOffset((-1168));
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "[re|!WO#zyY", 1031);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-1032), int0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      boolean boolean0 = dateTimeFormatter3.isPrinter();
      assertTrue(boolean0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withOffsetParsed();
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertEquals((-1), dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-1), dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 1);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, int0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      dateTimeFormatter1.printTo((Writer) mockPrintWriter0, (ReadableInstant) dateTime0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter0.getChronology();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      int int0 = (-300);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-300), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = copticChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      dateTimeFormatter1.getDefaultYear();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('?');
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) (-300));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(3233);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(2219);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(3233);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseLocalDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFieldType.dayOfYear();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(57, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(23);
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      Locale locale1 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      
      dateTimeFormatter3.print(0L);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2255, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.isOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.reverse();
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      Locale locale0 = new Locale("");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer integer0 = new Integer(129);
      Integer integer1 = new Integer((-274));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(integer1);
      dateTimeFormatter2.getChronology();
      dateTimeFormatter3.getPivotYear();
      StringBuffer stringBuffer1 = new StringBuffer(2274);
      DateTime dateTime0 = new DateTime();
      dateTimeFormatter2.printTo(stringBuffer1, (ReadableInstant) dateTime0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "org.joda.time.format.DateTimeFormatter", (-129));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3208, 3208);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3208);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Integer integer1 = new Integer(3208);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-2210), false);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getDayOfYear();
      DateTimeFormatter dateTimeFormatter3 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((ReadablePartial) localDateTime0);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (-2210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2210 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      byte[] byteArray0 = new byte[1];
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getDayOfYear();
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_FixedNumber0);
      dateTimeFormatter1.print((ReadablePartial) localDateTime0);
      dateTimeFormatter0.getChronolgy();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("]111djB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"]111djB\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFieldType.year();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      String string0 = "~%'xqwj2@M~M_d Ht";
      Locale locale0 = new Locale("~%'xqwj2@M~M_d Ht");
      Locale locale1 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-129));
      dateTimeFormatter0.parseMillis("{1(");
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("{1(");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(1922);
      dateTimeFormatter2.withDefaultYear((-129));
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalDateTime("~%'xqwj2@M~M_d Ht");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"~%'xqwj2@M~M_d Ht\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?Pz##H.o+sn)FQ&$g");
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('N');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer("?Pz##H.o+sn)FQ&$g");
      MonthDay monthDay0 = new MonthDay();
      dateTimeFormatter2.printTo((Appendable) stringBuffer0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 57, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardHours(57);
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      Instant instant2 = instant1.plus((long) 57);
      MutableDateTime mutableDateTime0 = instant2.toMutableDateTime();
      mutableDateTime0.setMillisOfDay(28);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "tepxlz2zjP/a}4.31?", 1);
      assertEquals(1392163200028L, mutableDateTime0.getMillis());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      Locale locale0 = new Locale("");
      dateTimeFormatter2.withLocale(locale0);
      dateTimeFormatter0.withOffsetParsed();
      CharBuffer.allocate(6211);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print(0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 693, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(4631);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(693);
      Locale locale0 = new Locale("HRewgk)yNELz");
      dateTimeFormatter2.withLocale(locale0);
      dateTimeFormatter2.withPivotYear(693);
      CharBuffer.allocate(4088);
      Instant instant0 = new Instant((-1618L));
      int int0 = 3;
      // Undeclared exception!
      try { 
        DateTimeZone.forID("HRewgk)yNELz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'HRewgk)yNELz' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), true, (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1294);
      boolean boolean0 = dateTimeFormatter4.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertEquals(1294, (int)dateTimeFormatter4.getPivotYear());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = 1;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2255, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.isOffsetParsed();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.reverse();
      JulianChronology.getInstanceUTC();
      dateTimeFormatterBuilder_Fraction0.iMinDigits = 2255;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.ROOT;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(2219);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(3233);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseLocalDateTime("The partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The partial must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      int int0 = (-1);
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), false, (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      int int1 = 1314;
      dateTimeFormatter1.withDefaultYear(1314);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((long) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), false, (-1));
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1), hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      Locale locale0 = new Locale("Instant must not be null");
      dateTimeFormatter1.withLocale(locale0);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), "", (-1002), (-1), (-1), 1082, (-1), 3, 1082, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1002
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      Locale locale0 = new Locale("{1(");
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getDayOfYear();
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_FixedNumber0);
      dateTimeFormatter1.print((ReadablePartial) localDateTime0);
      dateTimeFormatter0.getChronolgy();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[4];
      intArray0[0] = 543;
      intArray0[1] = 543;
      intArray0[2] = 543;
      intArray0[3] = 3;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone("Parsing not supported");
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Locale locale0 = Locale.ENGLISH;
      Integer integer0 = new Integer((-129));
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3, 3);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(3);
      GJChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      gJChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      assertEquals(3, (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(2690);
      Locale locale0 = new Locale("");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(2690, dateTimeFormatter4.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withPivotYear(3600000);
      assertEquals(3600000, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      
      CharBuffer.allocate(0);
      Instant instant0 = new Instant((long) 2690);
      MockFile mockFile0 = new MockFile((File) null, "AST");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) dateTimeFormatter0;
      objectArray0[2] = (Object) dateTimeFormatter3;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      dateTimeFormatter1.printTo((Appendable) printWriter0, (ReadableInstant) instant0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), false, (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(514);
      Integer integer1 = Integer.getInteger("ej", (-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(integer1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(423);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(423, (int)dateTimeFormatter5.getPivotYear());
      
      boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
      assertFalse(boolean0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = new Locale("{1(");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      Integer integer0 = new Integer((-129));
      dateTimeFormatter1.withPivotYear(integer0);
      dateTimeFormatter1.getChronology();
      dateTimeFormatter1.getPivotYear();
      StringBuffer stringBuffer0 = new StringBuffer(2788);
      DateTime dateTime0 = new DateTime();
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      assertEquals(1, stringBuffer0.length());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, ";zOthW\"l4M*M27", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 543, true);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("{1(");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = new Locale("{1(");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      Integer integer0 = new Integer((-129));
      long long0 = dateTimeFormatter1.parseMillis("{1(");
      assertEquals(0L, long0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2219);
      assertEquals(2219, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withDefaultYear(2219);
      assertEquals(2219, dateTimeFormatter4.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter2.parseLocalDateTime("{1(");
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "Fk98fe$U{mJd?n", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter1.getZone();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatter0.getZone();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1024);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = iSOChronology0.withZone(dateTimeZone0);
      dateTimeFieldType0.isSupported(chronology0);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1024, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1024);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
      Integer integer0 = new Integer(1024);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(1024);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseLocalDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1963, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-568));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-4380));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withChronology(ethiopicChronology0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-4380), (int)dateTimeFormatter6.getPivotYear());
      assertEquals((-568), dateTimeFormatter6.getDefaultYear());
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertEquals((-568), dateTimeFormatter5.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 3233;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "Fk98fe$U{mJd?n", false, 3233, 3233);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer integer0 = new Integer(3233);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMillis((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), false, (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(1294);
      boolean boolean0 = dateTimeFormatter5.isOffsetParsed();
      assertFalse(boolean0);
      assertEquals(1294, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "gfR,2ggj%VU5";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("gfR,2ggj%VU5");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Chronology chronology0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      int int0 = (-25);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-25));
      dateTimeFormatter3.print(0L);
      Integer integer0 = new Integer((-25));
      dateTimeFormatter3.withPivotYear(integer0);
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("gfR,2ggj%VU5");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Resource not found: \"gfR,2ggj%VU5/ZoneInfoMap\" ClassLoader: org.evosuite.instrumentation.InstrumentingClassLoader@0000000008
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('e');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      Locale locale0 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
      dateTimeFormatter4.print((long) 0);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      dateTimeFieldType0.getDurationType();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1154, (-2127));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormat_StyleFormatter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1154);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.print((long) 0);
      dateTimeFormatter1.withZoneUTC();
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-2454));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2454
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1390));
      dateTimeFormatter1.withPivotYear(65535);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(buddhistChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 693, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
          boolean boolean0 = true;
          DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
          DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
          CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
          DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
          DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
          DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
          Integer integer0 = new Integer(85);
          dateTimeFormatter2.withPivotYear(integer0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor254.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('p');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      Locale locale0 = Locale.US;
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        ZoneOffset.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Locale locale0 = Locale.ITALY;
      dateTimeFormatter3.withLocale(locale0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1854);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(0);
      Integer integer0 = new Integer((-1386));
      dateTimeFormatter3.withPivotYear(integer0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(1, 0, 352831696, 17887500, 1854, (-1960), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 17887500 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = Integer.valueOf(1070);
      dateTimeFormatter1.withPivotYear(integer0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, (-384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -384
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2255, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.isOffsetParsed();
      String string0 = "org.joda.time.base.BaseDuration";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.base.BaseDuration");
      stringBuffer0.reverse();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFormatterBuilder_Fraction0.iMinDigits = 2255;
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) null, 0L, chronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("org.joda.time.base.BaseDuration");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.base.BaseDuration\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      Locale locale0 = new Locale("");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(6211);
      Instant instant0 = new Instant((long) 6211);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.printTo((Appendable) charBuffer0, (ReadableInstant) instant0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('m');
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap0);
      StringWriter stringWriter0 = new StringWriter(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.JAPANESE;
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) stringWriter0, 0L, (Chronology) null, (-2515), dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeZone.getDefault();
      boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }
}
