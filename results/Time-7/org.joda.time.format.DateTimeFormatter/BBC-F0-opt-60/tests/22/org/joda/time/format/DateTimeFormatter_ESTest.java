/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:30:21 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2432), (-2432), 120);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) "/";
      objectArray0[2] = (Object) dateTimeFormat_StyleFormatter0;
      objectArray0[3] = (Object) "/";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) pipedInputStream0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("/", objectArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) printWriter0, (-434L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "AU8L?7OX5BJJ>Gm<\"";
      int int0 = 0;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(647, 0, 647);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      StringBuffer stringBuffer0 = new StringBuffer("AU8L?7OX5BJJ>Gm<\"");
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2146384628, true, 2145713257);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      Integer integer0 = new Integer(60);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      dateTimeFormatter1.printTo((Appendable) null, (ReadablePartial) localDateTime0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-25);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, (-1736));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ",?";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1517);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.minusSeconds(100);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.print((ReadablePartial) localTime1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146036556, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer("f,MdXBFgX!m&P");
      // Undeclared exception!
      dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, mutableDateTime0, (ReadableDateTime) null);
      Chronology chronology0 = limitChronology0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime1 = new MutableDateTime((long) 3, chronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime1, "DateTimeZone.setNameProvider", 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 2014-02-14T20:21:21.320Z (GJChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) buddhistChronology0);
      DateTime dateTime0 = mutableDateTime1.toDateTime(dateTimeZone0);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(5);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.print((ReadableInstant) dateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), 2355, (-1));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_Composite0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone.forOffsetMillis((-1));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.toDateTime((Chronology) buddhistChronology0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.parseDateTime("America/Indiana/Indianapolis");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-1125);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, (-312), (-1125));
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1125), (-312), (-2146294564));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormat_StyleFormatter0);
      int int1 = 3358;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3358);
      dateTimeZone0.convertLocalToUTC((long) (-1125), true);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      StringWriter stringWriter0 = new StringWriter(13);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) stringBuffer0, (long) 13);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      DateTimeZone dateTimeZone0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      StringBuffer stringBuffer0 = new StringBuffer("A#~\"P$Gk'^o");
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 3, dateTimeZone0);
      mutableDateTime0.setMillisOfSecond(192);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2147483052, false, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 3);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2);
      // Undeclared exception!
      dateTimeFormatter5.print((ReadableInstant) mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2146410978, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale0 = Locale.GERMAN;
      locale0.stripExtensions();
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, 1L, (Chronology) buddhistChronology0, 140, (DateTimeZone) null, locale0);
      Integer integer0 = new Integer(2220);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      dateTimeFormatter2.withZoneUTC();
      // Undeclared exception!
      dateTimeFormatter0.print((ReadablePartial) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146243761, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      Integer integer0 = new Integer(1570);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(ethiopicChronology0);
      StringWriter stringWriter0 = new StringWriter();
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-586));
      Period period0 = Period.ZERO;
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadablePeriod) period0);
      LocalDateTime localDateTime3 = localDateTime2.withPeriodAdded(period0, 2147483198);
      LocalDateTime localDateTime4 = localDateTime3.withYearOfEra(1);
      // Undeclared exception!
      dateTimeFormatter5.printTo((Writer) stringWriter0, (ReadablePartial) localDateTime4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(59);
      MutableDateTime mutableDateTime0 = new MutableDateTime(68L, dateTimeZone0);
      mutableDateTime0.setMillisOfSecond(26);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2132), (-1851), 3018);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      dateTimeFormatter0.withPivotYear(3018);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (-296L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("]'nD`x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.parseMutableDateTime("]'nD`x");
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("]'nD`x");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localDate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "z";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("z");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      
      int int0 = 690562340;
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('W');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("W", stringWriter0.toString());
      assertEquals("W", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("W", stringWriter0.toString());
      assertEquals("W", stringWriter1.toString());
      assertEquals("W", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      stringBuffer0.setLength(690562340);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(690562340, stringBuffer0.length());
      
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((-1L), (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1121);
      // Undeclared exception!
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      long long0 = dateTimeFormatter0.parseMillis("America/New_York");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(18000000L, long0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setMillisOfSecond(27);
      assertEquals(1392409281027L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      String string0 = "QO.npS|pK}dDTP]F)";
      MockFile mockFile0 = new MockFile("QO.npS|pK}dDTP]F)", "MaX>{SY:mU_|dh");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("");
      assertNull(dateTimeZone0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (-2343L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(":7]0^@8~V$");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 21);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:21", dateTimeZone0.toString());
      assertEquals("+01:21", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:21", dateTimeZone0.toString());
      assertEquals("+01:21", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(":7]0^@8~V$");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotNull(mutableDateTime0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setMillisOfSecond(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 79, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(79, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(79, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(79, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(79, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(79, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(79, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Years years0 = Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertNotNull(years0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) years0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(21);
      assertNotSame(localDateTime0, localDateTime2);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) null, (ReadablePartial) localDateTime2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      String string0 = "";
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      int int0 = 0;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      long long0 = (-153L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((-153L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 5062500, false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      int int0 = (-2114445437);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 5062500, (-2114445437));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-2114445437));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-2114445437), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(5062500, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2114445437), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-2114445437), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-2114445437), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      int int1 = 23034375;
      StringWriter stringWriter0 = new StringWriter(23034375);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      // Undeclared exception!
      dateTimeFormatter1.printTo((Writer) stringWriter0, (long) 23034375);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      System.setCurrentTimeMillis((-63L));
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, (-3987), true, (-3987));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(iSOChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(2047);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter4);
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2047, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      
      Integer integer0 = Integer.getInteger("Printing not supported");
      assertNull(integer0);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((Integer) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotNull(dateTimeFormatter5);
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-3987), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2047, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Printing not supported");
      assertNotNull(mockPrintStream0);
      
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      YearMonth yearMonth1 = yearMonth0.plusMonths((-3987));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotNull(yearMonth1);
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(9, yearMonth1.getMonthOfYear());
      assertEquals(1637, yearMonth1.getYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      
      YearMonth yearMonth2 = yearMonth1.minusYears(3942);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertNotNull(yearMonth2);
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(9, yearMonth1.getMonthOfYear());
      assertEquals(1637, yearMonth1.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals((-2305), yearMonth2.getYear());
      assertEquals(9, yearMonth2.getMonthOfYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.printTo((Appendable) mockPrintStream0, (ReadablePartial) yearMonth2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(3717);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(116);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(116, dateTimeFormatter3.getDefaultYear());
      assertEquals(3717, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3717);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:03.717", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.717", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter4);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(116, dateTimeFormatter3.getDefaultYear());
      assertEquals(3717, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals("+00:00:03.717", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.717", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(116, dateTimeFormatter4.getDefaultYear());
      
      Integer integer0 = new Integer(116);
      assertEquals(116, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter5);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(116, dateTimeFormatter3.getDefaultYear());
      assertEquals(3717, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals("+00:00:03.717", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.717", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(3717, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(116, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(116, dateTimeFormatter5.getDefaultYear());
      assertEquals(116, (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(1, EthiopicChronology.EE);
      
      try { 
        dateTimeFormatter5.printTo((Appendable) pipedWriter0, (ReadablePartial) localDate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-5101));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(linkedList0.contains((-5101)));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-5101), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      MockFile mockFile0 = new MockFile("org.joda.time.convert.ReadablePeriodConverter");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) mockFileWriter0, (ReadableInstant) instant0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(linkedList0.contains(""));
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotNull(dateTimeZone1);
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(linkedList0.contains(""));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setMillisOfSecond(1);
      assertEquals(1392409281001L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("LGJ;'wkO@");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      Integer integer0 = new Integer(2147483191);
      assertEquals(2147483191, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter4);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2147483191, (int)dateTimeFormatter4.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(gJChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotNull(dateTimeFormatter5);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2147483191, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2147483191, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withLocale((Locale) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter6);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
      assertNotNull(dateTimeFormatter6);
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals(2147483191, (int)dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(2147483191, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      assertEquals(2147483191, (int)dateTimeFormatter6.getPivotYear());
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isPrinter());
      assertTrue(dateTimeFormatter6.isParser());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("^):7uI3");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("^):7uI3", dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "a";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("a");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("a", "a", false, 2688, 2688);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("a");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("JU}O:c.ivl(3K^SG3");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("JU}O:c.ivl(3K^SG3", "JU}O:c.ivl(3K^SG3", true, 2688, 2688);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("JU}O:c.ivl(3K^SG3");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTime0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      String string0 = dateTimeFormatter1.print((long) 2688);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertEquals("JU}O:c.ivl(3K^SG3", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertNotNull(string0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("'", "'", true, 2688, 2688);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Integer integer0 = new Integer(1876);
      assertEquals(1876, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1876, (int)dateTimeFormatter2.getPivotYear());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Integer integer1 = new Integer((-805));
      assertEquals((-805), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-462L), gregorianChronology0, locale0, integer1, 1237);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-805), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(dateTimeZone0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-805), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter3);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1876, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-805), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1876, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(2688);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter4);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1876, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-805), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1876, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2688, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotNull(dateTimeFormatter5);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1876, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-805), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1876, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2688, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertEquals(2688, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      
      LocalDateTime localDateTime0 = dateTimeFormatter5.parseLocalDateTime("'");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotNull(localDateTime0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(1876, (int)dateTimeFormatter2.getPivotYear());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-805), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(1876, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2688, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertEquals(2688, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (ReadableInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2688, 2688);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotNull(localDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      long long0 = dateTimeFormatter1.parseMillis("");
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0L, long0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2688, 2688);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "JH/f4;u`Q*'t", 1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 2688, 2688);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-3761), false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-3761));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-3761), dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      int int0 = dateTimeFormatter3.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals((-3761), int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-3761), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals((-3761), dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      int int0 = dateTimeFormatter1.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("NPzYi7&]AEcI]PYqU");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("NX+u7fgNbVoDx~i");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("NX+u7fgNbVoDx~i", dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      
      LocalDate localDate0 = new LocalDate(1000L, (Chronology) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) localDate0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1), (-777));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-777), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-777), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals((-777), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-777), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("dXNLT]!4-!8%2E:o");
      assertNotNull(stringBuffer0);
      assertEquals("dXNLT]!4-!8%2E:o", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertNotNull(weeks0);
      assertEquals(Integer.MAX_VALUE, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      boolean boolean0 = dateTime0.isEqualNow();
      assertTrue(boolean0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) weeks0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(Integer.MAX_VALUE, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(1298799502114881320L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadableInstant) dateTime1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1022), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      
      Integer integer0 = Integer.getInteger((String) null, (Integer) 2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter3);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter4);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-1022), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertEquals(2, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(2, (int)dateTimeFormatter4.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter4.print((-47575136L));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(843, 19, 292272708);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("@tNqN7kXk4c");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology((Chronology) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter3);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(843);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertNotNull(dateTimeFormatter4);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(843, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      
      Integer integer0 = new Integer(19);
      assertEquals(19, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter5);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(843, (int)dateTimeFormatter4.getPivotYear());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(19, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2608L), (Chronology) null);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2608L), mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Instant instant0 = mutableDateTime0.toInstant();
      assertNotNull(instant0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2608L), mutableDateTime0.getMillis());
      assertEquals((-2608L), instant0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print((ReadableInstant) instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1024, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-2777));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-2777), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-2777), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-2777), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals((-2777), (int)integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(integer0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-2777), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-2777), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)110;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-77), (byte) (-83), (byte)110}, byteArray0);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotNull(mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotNull(string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VHz4`6jE@Tw");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) "VHz4`6jE@Tw";
      objectArray0[1] = (Object) dateTimeFormatter0;
      objectArray0[2] = (Object) dateTimeFormatter1;
      objectArray0[3] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      assertEquals(4, objectArray0.length);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotNull(printWriter0);
      
      dateTimeFormatter1.printTo((Writer) printWriter0, (long) (byte)110);
      assertEquals(4, objectArray0.length);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertEquals(0, (int)integer0);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertNotNull(integer0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("f[N0Jg");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "f[N0Jg", 4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals((-5), int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'J';
      charArray0[2] = '-';
      charArray0[3] = 'L';
      charArray0[4] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {']', 'J', '-', 'L', 'V'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals("]J-LV", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotNull(mutableDateTime1);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseInto(mutableDateTime1, "", (-845));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("HST");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(">t");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "", 5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals((-6), int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, 10000000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1), false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone1.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone1.getID());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadableInstant) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(16, 9, (-333));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(28);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(28, dateTimeFormatter2.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(16);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(28, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(28, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(16, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter4);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(28, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(28, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(16, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(28, dateTimeFormatter4.getDefaultYear());
      assertEquals(16, (int)dateTimeFormatter4.getPivotYear());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotNull(dateTimeFormatter5);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(28, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals(28, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(16, (int)dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals(28, dateTimeFormatter4.getDefaultYear());
      assertEquals(16, (int)dateTimeFormatter4.getPivotYear());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(16, (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertEquals(28, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableInterval mutableInterval0 = new MutableInterval((-761L), 9);
      assertNotNull(mutableInterval0);
      assertEquals((-761L), mutableInterval0.getStartMillis());
      assertEquals(9L, mutableInterval0.getEndMillis());
      
      Weeks weeks0 = Weeks.weeksIn(mutableInterval0);
      assertNotNull(weeks0);
      assertEquals((-761L), mutableInterval0.getStartMillis());
      assertEquals(9L, mutableInterval0.getEndMillis());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      Duration duration0 = weeks0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals((-761L), mutableInterval0.getStartMillis());
      assertEquals(9L, mutableInterval0.getEndMillis());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 28);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals((-761L), mutableInterval0.getStartMillis());
      assertEquals(9L, mutableInterval0.getEndMillis());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, instant1.getMillis());
      
      Instant instant2 = instant1.withDurationAdded((long) (-333), 61);
      assertNotSame(instant0, instant2);
      assertSame(instant0, instant1);
      assertNotSame(instant1, instant2);
      assertSame(instant1, instant0);
      assertNotSame(instant2, instant0);
      assertNotSame(instant2, instant1);
      assertFalse(instant2.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertNotNull(instant2);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals((-761L), mutableInterval0.getStartMillis());
      assertEquals(9L, mutableInterval0.getEndMillis());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, instant1.getMillis());
      assertEquals(1392409261007L, instant2.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.printTo((Appendable) null, (ReadableInstant) instant2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: it_IT
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "v";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("v");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "v");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("v", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      
      DateTime dateTime0 = new DateTime(3665696L);
      assertNotNull(dateTime0);
      assertEquals(3665696L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertEquals(3665696L, dateTime0.getMillis());
      assertEquals(3665696L, dateTime1.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, (ReadableInstant) dateTime1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">K");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, ",z gv>N2", (-1));
      assertEquals(0, int0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(">K");
      assertNotNull(localTime0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Partial partial0 = new Partial(buddhistChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Instant instant1 = instant0.withDurationAdded(62035200000L, 1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1454444481320L, instant1.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(gJChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1454444481320L, instant1.getMillis());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gJChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1454444481320L, instant1.getMillis());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter4);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1454444481320L, instant1.getMillis());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
      
      MutableDateTime mutableDateTime1 = MutableDateTime.parse("", dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotNull(mutableDateTime1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      String string0 = dateTimeFormatter4.print((ReadableInstant) instant0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertEquals("", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotNull(string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1454444481320L, instant1.getMillis());
      assertTrue(dateTimeFormatter3.isParser());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(1, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals(1, dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertTrue(dateTimeFormatter4.isPrinter());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-2975), true, (-2147483060));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(18);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(18, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-2147483060));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(18, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(18, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-2147483060), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber1 = (DateTimeFormatterBuilder.PaddedNumber)dateTimeFormatter2.getPrinter();
      assertSame(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder_PaddedNumber1, dateTimeFormatterBuilder_PaddedNumber0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber1);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(18, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(18, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-2147483060), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
      
      Integer integer0 = dateTimeFormatter2.getPivotYear();
      assertSame(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(18, (int)integer0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(integer0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-2975), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(18, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(18, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-2147483060), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), 2147483061, 1686);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(2147483061);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2147483061, dateTimeFormatter3.getDefaultYear());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter4);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2147483061, dateTimeFormatter3.getDefaultYear());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2147483061, dateTimeFormatter4.getDefaultYear());
      assertNull(dateTimeFormatter4.getPivotYear());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      assertNotNull(lenientChronology0);
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(lenientChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotNull(dateTimeFormatter5);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(2147483061, dateTimeFormatter3.getDefaultYear());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2147483061, dateTimeFormatter4.getDefaultYear());
      assertNull(dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2147483061, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isPrinter());
      assertNull(dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print(31083597720000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en_GB
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      long long0 = dateTimeFormatter1.parseMillis(">");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals((-3660000L), long0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(23034375);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(23034375, (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter2.getParser();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(23034375, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-733), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      dateTimeFormatter0.printTo(stringBuffer0, 10000L);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1023);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertEquals(1023, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber1 = (DateTimeFormatterBuilder.FixedNumber)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatterBuilder_FixedNumber1, dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatterBuilder_FixedNumber1);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber1.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("p=");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("p=");
      assertNotNull(mutableDateTime0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) copticChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime1 = localTime0.minusMinutes(1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotNull(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime2 = localTime1.withMillisOfDay(1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertNotNull(localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime3 = localTime2.withMillisOfSecond(1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertNotNull(localTime3);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(1, CopticChronology.AM);
      
      String string0 = dateTimeFormatter1.print((ReadablePartial) localTime3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime3, localTime1);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertEquals("", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime0));
      assertNotNull(string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = " }at!]";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(" }at!]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'v';
      charArray0[2] = 'H';
      charArray0[3] = 'L';
      charArray0[4] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'L', 'v', 'H', 'L', 'I'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LvHLI", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, 1298L);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-223), true, (-223));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      Integer integer0 = new Integer(2000);
      assertEquals(2000, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(2000);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-4911));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter3);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-4911), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter4);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals((-223), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2000, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-4911), dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertEquals(2000, (int)dateTimeFormatter4.getPivotYear());
      assertEquals((-4911), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-454), (-1408));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals((-1408), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1408), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals((-1408), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1408), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(236548278, (-1408), (-454));
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=7464676745376000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=236548159,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=155,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localTime0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-733), true, (-733));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Integer integer0 = new Integer((-733));
      assertEquals((-733), (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-733), (int)dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-733), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-733), (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-733));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-733), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-733), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-733), (int)dateTimeFormatter3.getPivotYear());
      assertEquals((-733), dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter4);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-733), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-733), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertEquals((-733), (int)dateTimeFormatter3.getPivotYear());
      assertEquals((-733), dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter4.isPrinter());
      assertTrue(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-733), dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals((-733), (int)dateTimeFormatter4.getPivotYear());
      
      String string0 = "EE";
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalDateTime("EE");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-929), false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter0.getPrinter();
      assertNull(dateTimePrinter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">K");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = dateTimeFormatter1.print((-3655392L));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(">K", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(string0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      String string0 = "*}b|y+X";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("*}b|y+X");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      String string0 = "org.joda.time.LocalDateTime$Property";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-3660000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      System.setCurrentTimeMillis(1);
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-3660000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LocalTime localTime0 = dateTimeFormatter1.parseLocalTime("");
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(localTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(4, localTime0.size());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(" at>]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      StringBuffer stringBuffer0 = new StringBuffer(" at>]");
      assertNotNull(stringBuffer0);
      assertEquals(" at>]", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Integer integer0 = new Integer((-1153));
      assertEquals((-1153), (int)integer0);
      assertNotNull(integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(7887072L, (Chronology) null, locale0, integer0, (-1153));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-1153), (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-1153), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, 7887072L, (Chronology) gJChronology0, 0, dateTimeZone0, locale0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, stringBuffer0.length());
      assertEquals(" at>] at>]", stringBuffer0.toString());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-1153), (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse(" at>]", dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-3660000L), dateTime0.getMillis());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      dateTimeFormatter1.printTo((Writer) stringWriter0, (-2505L));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals("", stringWriter0.toString());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotNull(localTime0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
      
      String string0 = dateTimeFormatter1.print((long) 1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(" at>]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(" at>]");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotNull(mutableDateTime1);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, " at>]", 4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertEquals((-5), int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime(" at>]");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTime0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter1.printTo((Appendable) pipedWriter0, (long) 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("at>]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("at>]");
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      Partial partial0 = new Partial(zonedChronology0);
      assertNotNull(partial0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, partial0.size());
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) partial0);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertEquals("at>]", string0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertNotNull(string0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, partial0.size());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral0.equals((Object)dateTimeFormatterBuilder_StringLiteral1));
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("at>]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("at>]");
      assertNotNull(mutableDateTime0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1139L), (Chronology) gregorianChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("7nN,YSY/wl32");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(12, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(12, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      assertNotSame(dateTimeZone2, dateTimeZone0);
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone0));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      assertNotNull(dateTimeZone2);
      assertEquals("Etc/UTC", dateTimeZone2.getID());
      assertEquals("Etc/UTC", dateTimeZone2.toString());
      assertTrue(dateTimeZone2.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone2);
      assertNotSame(dateTimeZone2, dateTimeZone0);
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone0));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      assertNotNull(ethiopicChronology0);
      assertEquals("Etc/UTC", dateTimeZone2.getID());
      assertEquals("Etc/UTC", dateTimeZone2.toString());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone2, dateTimeZone0);
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone0));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(12, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(12, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("Etc/UTC", dateTimeZone2.getID());
      assertEquals("Etc/UTC", dateTimeZone2.toString());
      assertTrue(dateTimeZone2.isFixed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.write(1);
      assertEquals("\u0001", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) stringWriter0, (-2505L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-733), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1023);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-733), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1023, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis(">K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">K\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("org.joda.time.field.ScaledDurationField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.field.ScaledDurati...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      // Undeclared exception!
      try { 
        MutableDateTime.parse("", dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("at>]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("at>]");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      MutableDateTime mutableDateTime1 = MutableDateTime.parse("at>]", dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotNull(mutableDateTime1);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      
      String string0 = dateTimeFormatter2.print((long) 3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals("at>]", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(string0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      int int0 = dateTimeFormatter3.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0, int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("at>]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral(">t");
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, (DateTimeParser) null);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertNotSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(boolean0);
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">K");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotNull(ethiopicChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) mockFileWriter0, (long) 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter3);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter4);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter4.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter5);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter5.isParser());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      
      DateTimeParser dateTimeParser0 = dateTimeFormatter5.getParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter5));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertNull(dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter2.getPivotYear());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertFalse(dateTimeFormatter4.isParser());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter5.isParser());
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertEquals((-1), (int)dateTimeFormatter5.getPivotYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("4V`2A|3X[6uf8|");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("4V`2A|3X[6uf8|"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("4V`2A|3X[6uf8|"));
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains("4V`2A|3X[6uf8|"));
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(linkedList0.contains("4V`2A|3X[6uf8|"));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("a>]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      Partial partial0 = new Partial(dateTimeFieldType0, 28, copticChronology0);
      assertNotNull(partial0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(1, CopticChronology.AM);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(1, CopticChronology.AM);
      
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) null, (ReadableInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeParserBucket");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(41, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(41, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(41, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(41, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(41, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(41, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (-1523L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("a>]");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("a>]");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      MutableDateTime mutableDateTime1 = MutableDateTime.parse("a>]", dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotNull(mutableDateTime1);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-2147483059));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(linkedList0.contains((-2147483059)));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1520));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(linkedList0.contains((-1520)));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter2.getPivotYear());
      assertEquals((-1520), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertFalse(linkedList0.contains((-1520)));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter2.getPivotYear());
      assertEquals((-1520), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-1520), dateTimeFormatter3.getDefaultYear());
      assertEquals((-2147483059), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertFalse(linkedList0.contains((-1520)));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter4);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter2.getPivotYear());
      assertEquals((-1520), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-1520), dateTimeFormatter3.getDefaultYear());
      assertEquals((-2147483059), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-2147483059), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals((-1520), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter5);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertFalse(linkedList0.contains((-1520)));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter4));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
      assertNotNull(dateTimeFormatter5);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertFalse(dateTimeFormatter2.isPrinter());
      assertEquals((-2147483059), (int)dateTimeFormatter2.getPivotYear());
      assertEquals((-1520), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals((-1520), dateTimeFormatter3.getDefaultYear());
      assertEquals((-2147483059), (int)dateTimeFormatter3.getPivotYear());
      assertFalse(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-2147483059), (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter4.isPrinter());
      assertEquals((-1520), dateTimeFormatter4.getDefaultYear());
      assertTrue(dateTimeFormatter4.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals((-1520), dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isParser());
      assertEquals((-2147483059), (int)dateTimeFormatter5.getPivotYear());
      assertFalse(dateTimeFormatter5.isPrinter());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseLocalDate("=dZjZW<X$");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId1 = (DateTimeFormatterBuilder.TimeZoneId)dateTimeFormatter2.getPrinter();
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(13);
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertNotNull(dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(13, dateTimeFormatter3.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, 3L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId1 = (DateTimeFormatterBuilder.TimeZoneId)dateTimeFormatter2.getPrinter();
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertTrue(boolean0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(2147483061);
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2147483061, (int)dateTimeFormatter3.getPivotYear());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isParser());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)dateTimeFormatter1.getChronolgy();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(ethiopicChronology1);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      
      String string0 = dateTimeFormatter1.print((long) 1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(">t", string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(string0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Minutes minutes0 = Minutes.ONE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      StringWriter stringWriter0 = new StringWriter(2931);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      dateTimeFormatter1.printTo((Writer) stringWriter0, (long) 2931);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(">t", stringWriter0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotNull(julianChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int[] intArray0 = julianChronology0.get((ReadablePeriod) minutes0, (long) 1, (long) 1);
      assertEquals(1, intArray0.length);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      int[] intArray1 = julianChronology0.get((ReadablePeriod) weeks0, 1196L);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "at>]";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2147483061, true, 2147483061);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.getChronolgy();
      long long0 = 1L;
      // Undeclared exception!
      dateTimeFormatter1.print(1L);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime.parse(">t", dateTimeFormatter0);
      Object object0 = new Object();
      Integer integer0 = new Integer(3);
      BuddhistChronology.getInstanceUTC();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      dateTimeFormatter1.getChronolgy();
      dateTimeFormatter1.print(0L);
      dateTimeFormatter1.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Minutes minutes0 = Minutes.ONE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      StringWriter stringWriter0 = new StringWriter(426);
      dateTimeFormatter0.printTo((Writer) stringWriter0, (-1989L));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone1);
      julianChronology0.get((ReadablePeriod) weeks0, (-3659488L));
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(1);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(1, (int)dateTimeFormatter3.getPivotYear());
      
      dateTimeFormatter2.parseLocalDateTime(">t");
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      StringWriter stringWriter0 = new StringWriter(2931);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(2931);
      dateTimeFormatter3.printTo((Writer) stringWriter0, (long) 2931);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2931, dateTimeFormatter3.getDefaultYear());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(3660000L, (Chronology) julianChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) days0);
      dateTimeFormatter1.printTo((Appendable) stringWriter0, (ReadableInstant) dateTime1);
      dateTimeFormatter1.printTo((Writer) stringWriter0, (ReadableInstant) dateTime1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      StringWriter stringWriter0 = new StringWriter(2931);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ">t");
      LocalDate localDate0 = new LocalDate();
      dateTimeFormatter2.printTo((Writer) charArrayWriter1, (ReadablePartial) localDate0);
      boolean boolean0 = dateTimeFormatter1.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(boolean0);
      
      Locale locale1 = dateTimeFormatter2.getLocale();
      assertNotNull(locale1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("at>]");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      StringWriter stringWriter0 = new StringWriter(28265625);
      dateTimeFormatter1.printTo((Appendable) stringWriter0, 21859200000L);
      MutableDateTime.parse("at>]", dateTimeFormatter1);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDateTime("&>4V)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"&>4V)\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("at>]");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime.parse("at>]", dateTimeFormatter1);
      Object object0 = new Object();
      Integer integer0 = new Integer(3);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter0.parseMutableDateTime("");
      LocalDateTime.parse("", dateTimeFormatter1);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.format.DateTimeFormatter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withOffsetParsed();
      BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1886);
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(">t");
      dateTimeFormatter0.parseInto(mutableDateTime0, "org.joda.time.DateMidnight", 12);
      dateTimeFormatter0.getDefaultYear();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("Nd4X3^!=08");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Nd4X3^!=08\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("#t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(3600L, (Chronology) buddhistChronology0);
      DateTimeUtils.setCurrentMillisOffset((-3659488L));
      dateTimeFormatter1.parseInto(mutableDateTime0, "#t", 7);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) null, (ReadableInstant) mutableDateTime1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      dateTimeFormatter1.getChronolgy();
      dateTimeFormatter1.print((long) 1);
      dateTimeFormatter0.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Minutes minutes0 = Minutes.ONE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      StringWriter stringWriter0 = new StringWriter(2931);
      dateTimeFormatter1.printTo((Writer) stringWriter0, (-1989L));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      julianChronology0.get((ReadablePeriod) weeks0, 1196L);
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(stringWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.io.StringWriter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(julianChronology0);
      dateTimeFormatter3.withChronology(julianChronology0);
      dateTimeFormatter2.getChronolgy();
      dateTimeFormatter3.print(1L);
      dateTimeFormatter1.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Minutes minutes0 = Minutes.ONE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      StringWriter stringWriter0 = new StringWriter(2931);
      dateTimeFormatter1.printTo((Writer) stringWriter0, 1L);
      julianChronology0.get((ReadablePeriod) weeks0, (-3135L));
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      BuddhistChronology.getInstanceUTC();
      dateTimeFormatter1.print(0L);
      dateTimeFormatter0.print(0L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      JulianChronology.getInstance((DateTimeZone) null, 1);
      julianChronology0.withUTC();
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter0.parseMillis("");
      dateTimeFormatter1.isOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDate("!Dj2t][veWrP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"!Dj2t][veWrP\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTime dateTime0 = new DateTime((-1L), (DateTimeZone) null);
      dateTimeFormatter1.print((ReadableInstant) dateTime0);
      String string0 = "";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withOffsetParsed();
      dateTimeFormatter2.getChronolgy();
      String string0 = dateTimeFormatter3.print(1L);
      assertEquals("UTC", string0);
      
      julianChronology0.withUTC();
      StringBuffer stringBuffer0 = new StringBuffer();
      long long0 = dateTimeFormatter2.parseMillis("UTC");
      assertSame(dateTimeFormatter2, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0L, long0);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter3.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withOffsetParsed();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("The partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The partial must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      boolean boolean0 = dateTimeFormatter1.isOffsetParsed();
      assertFalse(boolean0);
      
      dateTimeFormatter0.getPrinter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        MutableDateTime.parse(">t", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime.parse(">t", dateTimeFormatter0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = ">t";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(">t");
      dateTimeFormatter1.parseInto(mutableDateTime0, ">t", 12);
      dateTimeFormatter0.getDefaultYear();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("Nd4X3^!=08");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Nd4X3^!=08\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
      StringBuffer stringBuffer0 = new StringBuffer(355);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-2852L), (Chronology) null);
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localTime0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withZoneUTC();
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertFalse(dateTimeFormatter6.isOffsetParsed());
      
      Chronology chronology0 = dateTimeFormatter5.getChronolgy();
      assertEquals(2000, dateTimeFormatter5.getDefaultYear());
      assertNotNull(chronology0);
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "", 19);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals((-20), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = ">t";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(julianChronology0);
      StringBuffer stringBuffer0 = new StringBuffer(607);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(871L, (Chronology) julianChronology0);
      dateTimeFormatter1.printTo(stringBuffer0, (ReadablePartial) localTime0);
      dateTimeFormatter3.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter2.getChronolgy();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseInto(mutableDateTime0, "~:_5_obo:nr}6", 4660);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      dateTimeFormatter1.print(284L);
      dateTimeFormatter1.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimeFormatter2.withLocale(locale0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("W]8J/", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"W]8J/\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-712));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-712));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      dateTimeFormatter5.withChronology(buddhistChronology0);
      CharBuffer.allocate(0);
      linkedList0.addFirst(dateTimeFormatter2);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear((-712));
      // Undeclared exception!
      try { 
        LocalTime.parse("org.joda.time.format.DateTimeFormatter", dateTimeFormatter6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale1);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withChronology(julianChronology0);
      dateTimeFormatter3.getChronolgy();
      dateTimeFormatter2.print(1L);
      dateTimeFormatter3.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis("h^#3:;zoP.U9TWW@3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"h^#3:;zoP.U9TWW@3\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      Integer integer0 = new Integer(0);
      int int0 = dateTimeFormatter2.getDefaultYear();
      assertEquals(2000, int0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      LocalTime localTime0 = LocalTime.now();
      dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localTime0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(5);
      dateTimeFormatter3.isOffsetParsed();
      assertEquals(5, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear(1);
      assertEquals(1, (int)dateTimeFormatter4.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(julianChronology0);
      dateTimeFormatter3.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZoneUTC();
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      
      dateTimeFormatter2.getChronolgy();
      String string0 = dateTimeFormatter3.print(1L);
      assertEquals("UTC", string0);
      
      dateTimeFormatter1.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      long long0 = dateTimeFormatter2.parseMillis("UTC");
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(0L, long0);
      
      boolean boolean0 = dateTimeFormatter3.isOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = ">t";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(julianChronology0);
      dateTimeFormatter3.getChronolgy();
      long long0 = 1L;
      dateTimeFormatter3.print(0L);
      dateTimeFormatter2.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseMillis("\u0001|vc|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\u0001|vc|\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      dateTimeFormatter1.parseInto(mutableDateTime0, ">t", (-2375));
      dateTimeFormatter0.getDefaultYear();
      LocalTime localTime0 = dateTimeFormatter1.parseLocalTime(">t");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(julianChronology0);
      dateTimeFormatter3.withChronology(julianChronology0);
      dateTimeFormatter2.getChronolgy();
      dateTimeFormatter3.print(1L);
      dateTimeFormatter1.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatter2.parseMillis("UTC");
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("Subtracting time zone offset caused overflow");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Subtracting time zone offset cau...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ">t";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, ">t", (-1730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.getDefaultYear();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      dateTimeFormatter0.parseInto(mutableDateTime0, "", 1);
      dateTimeFormatter0.getDefaultYear();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-4353));
      dateTimeFormatter1.withZoneUTC();
      BuddhistChronology.getInstanceUTC();
      MutableDateTime.parse("", dateTimeFormatter1);
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1316), (-3756), 906);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.withOffsetParsed();
      String string0 = "4n#zvH?<?=cG.o";
      File file0 = MockFile.createTempFile("months", "4n#zvH?<?=cG.o", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      outputStreamWriter0.write(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(2, 359, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 359 for dayOfMonth must not be larger than 31
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(julianChronology0);
      Locale locale0 = Locale.FRANCE;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withPivotYear((-676));
      locale0.hasExtensions();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFormatter2.withChronology(julianChronology0);
      dateTimeFormatter1.withZoneUTC();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = ">t";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      BuddhistChronology.getInstanceUTC();
      MutableDateTime.parse(">t", dateTimeFormatter0);
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime("NST");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"NST\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      DateTimeFieldType.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1), true);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatter1.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      Writer writer0 = null;
      LocalDateTime localDateTime0 = LocalDateTime.parse(">t", dateTimeFormatter1);
      // Undeclared exception!
      try { 
        localDateTime0.withEra(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.withZoneUTC();
      BuddhistChronology.getInstanceUTC();
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(">t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Y');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatter0.print(2629800000L);
      dateTimeFormatter0.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      MutableDateTime mutableDateTime0 = new MutableDateTime(2629800000L, (Chronology) null);
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "u^SBdn?BQ`$@rJ", 2);
      assertEquals(2629800000L, mutableDateTime0.getMillis());
      assertEquals((-3), int0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ">t", (-2375));
      assertEquals(2374, int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeUtils.setCurrentMillisSystem();
      dateTimeFormatter0.print((-1109L));
      dateTimeFormatter1.getZone();
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-694));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      Locale locale0 = new Locale("mc>P36d", "mc>P36d", "mc>P36d");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      dateTimeFormatter5.getChronology();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals((-694), (int)dateTimeFormatter5.getPivotYear());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(0, dateTimeFormatter5.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 340, true, 340);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      String string0 = "Printing not supported";
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseDateTime("Printing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Printing not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter0.print((long) 0);
      dateTimeFormatter0.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      Object object1 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Y');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatter0.print(1L);
      dateTimeFormatter0.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      DateTime dateTime0 = new DateTime((Object) null);
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusWeeks(292271022);
      LocalDate localDate2 = localDate1.plusWeeks(86400000);
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) localDate2);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Y');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatter0.print(1L);
      dateTimeFormatter0.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      stringBuffer0.append((-2219));
      DateTime dateTime0 = new DateTime((Object) null);
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      dateTimeFormatter0.getLocale();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Y');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      String string0 = "QZ.-\"H";
      // Undeclared exception!
      try { 
        Instant.parse("QZ.-\"H", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"QZ.-\"H\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = ">t";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime.parse(">t", dateTimeFormatter1);
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((Object) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ">t", (-2375));
      assertEquals(2374, int0);
      
      dateTimeFormatter1.getPivotYear();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1), true);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      dateTimeFormatter0.parseLocalDate(">t");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      dateTimeFormatter1.parseInto(mutableDateTime0, ">t", (-2375));
      dateTimeFormatter0.getDefaultYear();
      LocalTime localTime0 = dateTimeFormatter1.parseLocalTime(">t");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Y');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.getChronolgy();
      dateTimeFormatter0.print(1L);
      dateTimeFormatter0.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      DateTime dateTime0 = new DateTime((Object) null);
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) dateTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      dateTimeFormatter0.getParser();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = 17;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 17, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(17);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      int int1 = (-1777);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1777));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        LocalDateTime.parse("", dateTimeFormatter5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) buddhistChronology0);
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 1);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(70);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withDefaultYear((-2375));
      // Undeclared exception!
      try { 
        dateTimeFormatter6.parseLocalDate("z]cFQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"z]cFQ\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int0 = (-323);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-323), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-323));
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      dateTimeFormatter5.isPrinter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) (-323));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatter0.withLocale(locale0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(11);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone1);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "", (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2375));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "AH", 1);
      assertEquals(2376L, mutableDateTime0.getMillis());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.JAPAN;
      dateTimeFormatter1.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withChronology(julianChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(julianChronology0);
      Integer integer0 = new Integer((-723));
      Integer integer1 = new Integer((-723));
      dateTimeFormatter3.withPivotYear(integer1);
      dateTimeFormatter1.isPrinter();
      Locale locale1 = Locale.ITALY;
      dateTimeFormatter3.withLocale(locale1);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("G");
      LocalDate localDate0 = new LocalDate((-223L), (DateTimeZone) null);
      // Undeclared exception!
      try { 
        LocalDate.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('S');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.withDefaultYear(53);
      int int0 = (-3599);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        DateTime.parse("mKaYP}Y4zhZ8>LHi3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"mKaYP}Y4zhZ8>LHi3\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 1190;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1643), 1190, (-1643));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeZone.getDefault();
      dateTimeFormatter1.withOffsetParsed();
      Integer integer0 = null;
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (long) 1190);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: de_DE
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(">t");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2734L), (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseInto(mutableDateTime0, (String) null, (-2375));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Y');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(copticChronology0);
      Partial partial0 = new Partial(yearMonth1);
      Minutes minutes0 = Minutes.MAX_VALUE;
      yearMonth0.withPeriodAdded(minutes0, 2000);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(1);
      dateTimeFormatter1.getZone();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDate("org.joda.time.format.DateTimeFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.DateTimeFor...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      int int0 = (-374);
      int int1 = 65535;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-374), (-374), 65535);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(65535);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-374));
      dateTimeFormatter3.withZone((DateTimeZone) null);
      int int2 = (-1355);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeUtils.setCurrentMillisSystem();
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(julianChronology0);
      dateTimeFormatter3.withChronology(julianChronology0);
      dateTimeFormatter2.getChronolgy();
      dateTimeFormatter3.print(1L);
      dateTimeFormatter1.getChronology();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1643), 1190, (-1643));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatter0.withLocale(locale0);
      DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      // Undeclared exception!
      try { 
        MutableDateTime.parse("JEr", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1677, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatter2.withLocale(locale0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(gJChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 17, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(17);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1777));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      dateTimeFormatter5.getChronolgy();
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals((-1777), dateTimeFormatter5.getDefaultYear());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals(17, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Locale locale0 = Locale.CHINESE;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = iSOChronology0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) null);
      dateTimeFormatter4.withZoneUTC();
      String string0 = "9iAR";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("9iAR", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-3805), 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(50);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(0);
      Integer integer0 = new Integer((-1));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      Locale locale0 = Locale.forLanguageTag("");
      dateTimeFormatter4.withLocale(locale0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-323), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear((-323));
      Integer integer0 = new Integer(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      dateTimeFormatter5.isPrinter();
      Locale locale0 = Locale.ITALY;
      dateTimeFormatter3.withLocale(locale0);
      LocalDate localDate0 = new LocalDate((-223L), (DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.minusYears(352831696);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -352829727 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      int int0 = 0;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      dateTimeFormatter4.withChronology(chronology0);
      Appendable appendable0 = null;
      int int1 = 0;
      int int2 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) null, (long) 0, (Chronology) lenientChronology0, (-960), dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.withZoneUTC();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.format.DateTimeFormatter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('S');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
      int int0 = 53;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(53);
      Locale locale0 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((StringBuffer) null, 0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      int int0 = 0;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      int int1 = (-1356);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1356));
      Integer integer0 = new Integer((-1356));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      dateTimeFormatter4.withOffsetParsed();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        CopticChronology.getInstance((DateTimeZone) null, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 29
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }
}
