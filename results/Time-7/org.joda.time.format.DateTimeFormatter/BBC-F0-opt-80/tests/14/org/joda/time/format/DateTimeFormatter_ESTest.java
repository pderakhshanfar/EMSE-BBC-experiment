/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 23:13:59 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("4O]uqp", "4O]uqp", true, 485, 485);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("4O]uqp");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(":");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("xD({w7'|}UPJ)(kV']", ":", false, 6, 6);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse(":", dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "nUew", true, 1073741823, 1073741823);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("nUew");
      assertNotNull(localTime0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 485, 485);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "c*P%8:o+:.r8@r8\"", 2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2, int0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Z");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "Z", 4);
      assertEquals((-5), int0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(54);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.054", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.054", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+00:00:00.054", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.054", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("x");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("+00:00:00.054", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.054", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-54L), mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 48, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(48);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.048", dateTimeZone0.getID());
      assertEquals("+00:00:00.048", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.048", dateTimeZone0.getID());
      assertEquals("+00:00:00.048", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      String string0 = dateTimeFormatter1.print((-1L));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("47", string0);
      assertNotNull(string0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.048", dateTimeZone0.getID());
      assertEquals("+00:00:00.048", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "nUew", true, 1073741824, 1073741824);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2000);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02", dateTimeZone0.getID());
      assertEquals("+00:00:02", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02", dateTimeZone0.getID());
      assertEquals("+00:00:02", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      String string0 = dateTimeFormatter1.print((long) 2000);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals("+00:00:02.000", string0);
      assertNotNull(string0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02", dateTimeZone0.getID());
      assertEquals("+00:00:02", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Etc/UTC");
      assertNotNull(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("Etc/UTC", stringBuffer0.toString());
      
      dateTimeFormatter0.printTo(stringBuffer0, 0L);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("Etc/UTCEtc/UTC", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      LocalTime localTime0 = new LocalTime(1641L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) localTime0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(4, localTime0.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("x");
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadableInstant) mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("x", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("x");
      assertNotNull(mockFileWriter0);
      
      dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (-2040L));
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("++g(=t");
      assertNotNull(mockPrintWriter0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, 1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(partial0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePartial) partial0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("81", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x");
      assertNotNull(mockPrintWriter0);
      
      dateTimeFormatter0.printTo((Writer) mockPrintWriter0, 0L);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-6327), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-6327));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-6327), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-6327), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-6327), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(14);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2063, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_MatchingParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-294L), buddhistChronology0, locale0, (Integer) 1, 18);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeFormatter3);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertTrue(dateTimeFormatter3.isParser());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, 0, gregorianChronology0);
      assertNotNull(partial0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), dateTimeFormatter1.getDefaultYear());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), dateTimeFormatter1.getDefaultYear());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-1), dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Integer integer0 = new Integer(2147483061);
      assertEquals(2147483061, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(2147483061, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3971, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Integer integer0 = Integer.getInteger("Kl", 4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(4, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Integer integer0 = new Integer(99);
      assertEquals(99, (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(99, (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-641), true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-641));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-641), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      
      Integer integer0 = new Integer((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-641), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-641), dateTimeFormatter2.getDefaultYear());
      assertEquals((-621), (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), (-1), (-1));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(6);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(6, (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-6327), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-6327));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-6327), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(99);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(99, (int)dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8 HY0");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(5, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isParser());
      assertEquals(0, (int)dateTimeFormatter2.getPivotYear());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-268));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-268), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-2437));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-268), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals((-2437), (int)dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals((-268), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 1181, 1181);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-268));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-268), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals((-268), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-268), dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-6327), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 11, true, (-660));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-268));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-268), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-268), dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertEquals((-268), dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("4-g#[~A6h#");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(299);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(299, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 1181, 1181);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeFormatter2);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1, true, 1);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(0, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-6327), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-6327));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-6327), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-6327), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertFalse(dateTimeFormatter2.isParser());
      assertEquals((-6327), dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) monthDay0);
      assertEquals("x", string0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(string0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-16), false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      
      String string0 = dateTimeFormatter0.print((ReadablePartial) monthDay0);
      assertEquals("", string0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) dateTime0);
      assertEquals("Etc/UTC", string0);
      assertNotNull(string0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-16), false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      String string0 = dateTimeFormatter0.print((ReadableInstant) dateTime0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals((-16), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "nUew", true, 1073741824, 1073741824);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      String string0 = dateTimeFormatter0.print((long) 1073741824);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 48, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("47");
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(47L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      long long0 = dateTimeFormatter0.parseMillis("");
      assertEquals(0L, long0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      long long0 = dateTimeFormatter1.parseMillis("x");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1L, long0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 48, true);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(48);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.048", dateTimeZone0.toString());
      assertEquals("+00:00:00.048", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.048", dateTimeZone0.toString());
      assertEquals("+00:00:00.048", dateTimeZone0.getID());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      long long0 = dateTimeFormatter1.parseMillis("47");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals((-1L), long0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.048", dateTimeZone0.toString());
      assertEquals("+00:00:00.048", dateTimeZone0.getID());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("x");
      assertNotNull(localDate0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("x");
      assertNotNull(dateTime0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("q]yG>Gz,JI");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(358);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.358", dateTimeZone0.toString());
      assertEquals("+00:00:00.358", dateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.358", dateTimeZone0.toString());
      assertEquals("+00:00:00.358", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("q]yG>Gz,JI");
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTime0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.358", dateTimeZone0.toString());
      assertEquals("+00:00:00.358", dateTimeZone0.getID());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals((-358L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter1.isOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertTrue(boolean0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 1181, 1181);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeZone0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isPrinter());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(17);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter0.getPrinter();
      assertNull(dateTimePrinter0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId1 = (DateTimeFormatterBuilder.TimeZoneId)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId1);
      assertSame(dateTimeFormatterBuilder_TimeZoneId1, dateTimeFormatterBuilder_TimeZoneId0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2201), false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber1 = (DateTimeFormatterBuilder.UnpaddedNumber)dateTimeFormatter0.getPrinter();
      assertSame(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber1);
      assertSame(dateTimeFormatterBuilder_UnpaddedNumber1, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber1.estimateParsedLength());
      assertEquals((-2201), dateTimeFormatterBuilder_UnpaddedNumber1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2063, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_MatchingParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2063);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2063, (int)dateTimeFormatter1.getPivotYear());
      
      Integer integer0 = dateTimeFormatter1.getPivotYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(2063, (int)integer0);
      assertNotNull(integer0);
      assertEquals(0, dateTimeParserArray0.length);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2063, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2063, (int)dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-641), true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Integer integer0 = new Integer((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-621), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      Integer integer1 = dateTimeFormatter1.getPivotYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals((-621), (int)integer1);
      assertNotNull(integer1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-641), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-621), (int)dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeParser dateTimeParser0 = dateTimeFormatter0.getParser();
      assertNull(dateTimeParser0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = (DateTimeFormatterBuilder.StringLiteral)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral1);
      assertSame(dateTimeFormatterBuilder_StringLiteral1, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), false, (-1));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber1 = (DateTimeFormatterBuilder.PaddedNumber)dateTimeFormatter0.getParser();
      assertSame(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber1);
      assertSame(dateTimeFormatterBuilder_PaddedNumber1, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber1.estimatePrintedLength());
      assertEquals((-1), dateTimeFormatterBuilder_PaddedNumber1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("G");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      Locale locale1 = dateTimeFormatter1.getLocale();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(locale0, locale1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(locale1, locale0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(locale1);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DEU", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 11, true, (-660));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      int int0 = dateTimeFormatter1.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(0, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(11, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      int int0 = dateTimeFormatter1.getDefaultYear();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals((-1), int0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-1), dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2146831312), true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)dateTimeFormatter1.getChronology();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-2146831312), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeFormatter1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)dateTimeFormatter1.getChronolgy();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      MonthDay monthDay0 = MonthDay.now((Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(13, monthDay0.getDayOfMonth());
      assertEquals(4, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) monthDay0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("G");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("G");
      assertNotNull(localDateTime0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      Instant instant0 = new Instant((long) (-980));
      assertNotNull(instant0);
      assertEquals((-980L), instant0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) instant0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) dateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (long) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3703, 2281, 2281);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Duration");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(8, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("0Y,zY|33c?n6% ");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("0Y,zY|33c?n6% ");
      assertNotNull(localTime0);
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(14, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(4, localTime0.size());
      
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) localTime0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Instant instant0 = Instant.parse("x", dateTimeFormatter0);
      assertNotNull(instant0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, instant0.getMillis());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "x", 0, 1);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("x", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) instant0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(28, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) dateTime0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), (-1), (-1));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("x");
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1564), false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals((-1564), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1564), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals((-1564), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals((-1564), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      LocalTime localTime0 = new LocalTime((-235L), dateTimeZone0);
      assertNotNull(localTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1392422399765L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charArrayWriter0, (ReadableInstant) dateTime0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Cannot convert to ");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 938);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("Cannot convert to ", dateTimeFormatter0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(18, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Y,_jL|+tOH>ve^~w$");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 25650000, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(25650000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(25650000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(17, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(25650000, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(25650000, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      // Undeclared exception!
      dateTimeFormatter0.printTo((Appendable) null, (-1513L));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Etc/UTC");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.limit());
      assertEquals("Etc/UTC", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 3180L);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 69L);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 1181, 1181);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isPrinter());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(2, byteArray0.length);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.capacity());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals(2, byteArray0.length);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 86L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 2147347937, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(2147347937, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2147347937, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2147347937, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(2147347937, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
      dateTimeFormatter0.printTo((Appendable) stringWriter0, 1968L);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (long) 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1025), false, (-1025));
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals((-1025), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-1025), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals((-1025), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals((-1025), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      MockFile mockFile0 = new MockFile("~DW");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) (-1025));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("P");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[9];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(9, dateTimeParserArray0.length);
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_MatchingParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(9, dateTimeParserArray0.length);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("America/Puerto_Rico");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(19, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      MockFile mockFile0 = new MockFile("=gyrD+CeWPm|");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      mockFileWriter0.close();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("=gyrD+CeWPm|", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("=gyrD+CeWPm|", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      try { 
        dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadablePartial) partial0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2615625, 2615625, 2615625);
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      StringWriter stringWriter0 = new StringWriter(2615625);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2082);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.082", dateTimeZone0.toString());
      assertEquals("+00:00:02.082", dateTimeZone0.getID());
      
      DateTime dateTime0 = new DateTime((long) 2615625, dateTimeZone0);
      assertNotNull(dateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.082", dateTimeZone0.toString());
      assertEquals("+00:00:02.082", dateTimeZone0.getID());
      assertEquals(2615625L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1054L);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1054L, mutableDateTime0.getMillis());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      assertNotNull(dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("^%cdTm");
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) mockFileWriter0, (long) 532);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2104533974), (-29), (-29));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (long) 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("S$n:");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(4, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, 100000000000L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2147483216, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      Calendar calendar0 = MockCalendar.getInstance();
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(calendar0);
      // Undeclared exception!
      dateTimeFormatter0.print((ReadablePartial) yearMonth0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-806), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-381), false, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1), 2450, (-205));
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("Z", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 623158436, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      dateTimeFormatter0.print((long) (-1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) 14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1073741853, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      dateTimeFormatter0.print((long) 1073741853);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-857), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) (-857));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1267, 1267, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print(1252L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1267
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 13, 25);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 48, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("99");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"99\": Value -1 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("Printing not supported");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("x");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[4];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_MatchingParser0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("v}(/+h");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), true, 3971);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("NoHours");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "nUew", true, 1073741824, 1073741824);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3971, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(156L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "", 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "nUew", true, 1073741824, 1073741824);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "", (-928));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1084L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, (-1999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1400), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("11");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"11\": Value -1389 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3971, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("0&>>2aJn$PwS_&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0&>>2aJn$PwS_&\" is malformed at \"&>>2aJn$PwS_&\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("t|Qn0TD3P*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"t|Qn0TD3P*\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("DD5F='>c.S,vS");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      StringBuffer stringBuffer0 = new StringBuffer(3137);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Instant instant0 = Instant.parse("x", dateTimeFormatter0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "x");
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) instant0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, (-603L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 683, 2368);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8 HY0");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.getPivotYear();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter0.getLocale();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1810, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gregorianChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalTime("31");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"31\": Value 1831 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("x");
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("nUew");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"nUew\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("Printing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Printing not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Z");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("Z");
      assertEquals(1L, dateTime0.getMillis());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("G");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1));
      Instant instant0 = Instant.parse("G", dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-1), dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("x", "", true, 18, 779);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("x", "", true, 18, 779);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.parseLocalDateTime("");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 0, gregorianChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("#?k/XqdkjD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"#?k/XqdkjD\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("Bbue{GNO<OkEQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Bbue{GNO<OkEQ\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1759, true, 93);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_PaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"4\": Value 4 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('[');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"x\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "CXg]B", 2);
      assertEquals((-3), int0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 485, 485);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "", 0);
      assertEquals(0, int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Cannot convert to ");
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, 938);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("Cannot convert to ", dateTimeFormatter0);
      int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, "qk4z'k)4}&A:Y7j0T", 3);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals((-4), int0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, "!lGbCmmf4W{76u=;F", 236548278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("x");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("T3|R");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MonthDay monthDay0 = new MonthDay((long) 2146918223);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      MonthDay monthDay0 = MonthDay.now((Chronology) islamicChronology0);
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) monthDay0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-641), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-641));
      Integer integer0 = new Integer((-621));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertEquals((-641), (int)dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(99);
      Integer integer0 = new Integer(99);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("G");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Locale locale0 = Locale.US;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 626, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.withLocale((Locale) null);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "nUew", true, 1073741824, 1073741824);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3971, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(boolean0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 299, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      dateTimeFormatter0.getZone();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.getChronolgy();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 11, true, (-660));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals(2000, int0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("[(7Mn");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[(7Mn");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2104533974), (-29), (-29));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (long) (-2104533974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Printing not supported");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("Printing not supported", dateTimeFormatter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8 HY0");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      Integer integer0 = dateTimeFormatter1.getPivotYear();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotNull(integer0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 683, 2368);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
      Locale locale0 = Locale.JAPANESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1104), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse("9e;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9e;\" is malformed at \"e;\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-6327), hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("5Rmv|/5lA*{KN{t+ml");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("nH?'.D\"|a0VR@7;>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"nH?'.D\"|a0VR@7;>\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      dateTimeFormatter0.getChronology();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }
}
