/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 00:38:31 GMT 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneId0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('E');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.CHINESE;
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) printWriter0, 2079L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (-1L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = "zv;1q";
      dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Etc/UTC");
      MonthDay monthDay0 = MonthDay.parse("");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadablePartial) monthDay0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 928;
      int int1 = (-1722);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(928, (-1722), (-2126));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1722));
      int int2 = 1158;
      dateTimeFormatter1.withPivotYear(1158);
      Integer integer0 = null;
      String string0 = "}N^n";
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1158, (Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withYear(2920);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) outputStreamWriter0, (ReadablePartial) localDateTime1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, (DateTimeParser) null);
      int int0 = (-427);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-427));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer("wkXLgxc*xl_'aZ6J!(|");
      CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      StringWriter stringWriter0 = new StringWriter(557);
      StringWriter stringWriter1 = stringWriter0.append(']');
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer1);
      MutableDateTime mutableDateTime0 = new MutableDateTime(899L);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.printTo(stringBuffer2, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      Locale locale0 = new Locale("", "7c{].g\"p", "7c{].g\"p");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(iSOChronology0);
      Integer integer0 = new Integer((-2145953010));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-2145953010));
      dateTimeFormatter5.withDefaultYear((-2924));
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      dateTimeFormatter5.parseInto(mutableDateTime0, "7c{].g\"p", (-1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-3484), true, (-1282));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) localDateTime0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1224, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(44);
      dateTimeFormatter0.withZone(dateTimeZone0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1+sSx+p");
      DateTime dateTime0 = new DateTime((long) 1224);
      dateTime0.withDurationAdded((long) 1224, 23);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (ReadableInstant) dateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2128646072, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.print(2839L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("01");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"01\": Value 2128646101 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      dateTimeFormatter1.parseInto(mutableDateTime0, "PNT", 2);
      dateTimeFormatter1.parseDateTime("Africa/Addis_Ababa");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1073741824, true, 2139095040);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+Z^+x");
      DateTime dateTime0 = new DateTime((-3793L));
      dateTime0.withDurationAdded(3L, (-2542));
      // Undeclared exception!
      dateTimeFormatter3.printTo((Appendable) mockPrintWriter0, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2146873740, 2146873740, 2146873740);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(194);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Locale locale0 = Locale.PRC;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(30617280288L, ethiopicChronology0, locale0, (Integer) 1, 1);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      dateTimeFormatter4.withZone(dateTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      int int0 = 2146824910;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2146824910, false, 2146115824);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Locale locale0 = null;
      Integer integer0 = new Integer(2146824910);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2146824910, julianChronology0, (Locale) null, integer0, (-1985));
      String string0 = "";
      dateTimeFormatterBuilder_PaddedNumber0.parseInto(dateTimeParserBucket0, "", 2146115824);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
      dateTimeFieldType0.getField(chronology0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(lenientChronology0);
      Partial partial0 = new Partial();
      // Undeclared exception!
      dateTimeFormatter1.print((ReadablePartial) partial0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.withZoneUTC();
      MonthDay monthDay0 = new MonthDay((DateTimeZone) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadablePartial) monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      Locale locale0 = Locale.KOREAN;
      dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology((Chronology) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1402);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      dateTimeFormatter5.getPivotYear();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = (-866);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-866), (-866));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Integer.getInteger("d<gXyG/(P.T5!\"2b");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      Locale locale0 = Locale.forLanguageTag("d<gXyG/(P.T5!\"2b");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-866));
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-866));
      DateTime dateTime0 = localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print((ReadableInstant) dateTime0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, 897L);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime.now();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 2);
      MutableDateTime.parse("", dateTimeFormatter4);
      DateTimeFormatter dateTimeFormatter5 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1122, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1122
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      long long0 = 151L;
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) bufferedWriter0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-1884);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber((DateTimeFieldType) null, (-1884), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(399);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1884));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter3.withZoneUTC();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char char0 = '(';
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Appendable) charArrayWriter0, (long) 399);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1073741823), false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.print(2872L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"00\": Value -1073741800 for minuteOfDay must be in the range [0,1439]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146396864, true);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("s`Iov", "s`Iov", true, 12, 2146396864);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(12);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(islamicChronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(1);
      DateTime dateTime0 = new DateTime((-42521587200000L));
      // Undeclared exception!
      dateTimeFormatter5.print((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, mutableDateTime0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(limitChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-735));
      Integer.getInteger("DurationField[");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) null);
      Locale locale0 = Locale.FRENCH;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      dateTimeFormatter5.withOffsetParsed();
      MutableDateTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseInto(mutableDateTime0, "DurationField[", 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 1970-01-01T00:00:00.000Z (GJChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 9, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateTimeFormatter0.print((long) 9);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(gregorianChronology0);
      dateTimeFormatter2.getPivotYear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Chronology chronology0 = islamicChronology0.withZone(fixedDateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(chronology0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter3.parseMutableDateTime("1");
      dateTimeFormatter1.parseInto(mutableDateTime0, "1", 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter1.getParser();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1434, 1434);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1434);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
      dateTimeFormatter3.withOffsetParsed();
      IslamicChronology.getInstanceUTC();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(0.0F);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo(stringBuffer0, (long) 1434);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 17971875, false, 17971875);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      // Undeclared exception!
      dateTimeFormatter1.print((-15L));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1332L));
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(2147153519, (-1), (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_TextField0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      dateTimeZone0.convertUTCToLocal(1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) stringWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (-4L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2145627568, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      dateTimeFormatter0.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gregorianChronology0);
      dateTimeFormatter0.parseInto(mutableDateTime0, "The partial must not be null", 1418);
      Integer integer0 = new Integer((-1723));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      dateTimeFormatter1.printTo((Appendable) charArrayWriter0, 3068L);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "5");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1610612736, (-2937));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2146835252));
      Integer integer0 = new Integer((-2146835252));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      int int0 = 3242;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Locale locale0 = Locale.KOREA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2146835252), gregorianChronology0, locale0, integer0, (-1127));
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      dateTimeFieldType0.getField(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(3242);
      GregorianChronology.getInstance(dateTimeZone0);
      String string0 = "";
      Locale locale1 = Locale.forLanguageTag("");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale1);
      Locale locale2 = Locale.UK;
      locale1.getDisplayScript(locale2);
      DateTimeUtils.setCurrentMillisOffset(3242);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter5.withDefaultYear((-2937));
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withLocale(locale1);
      dateTimeFormatter3.getDefaultYear();
      dateTimeFormatter3.withZone(dateTimeZone0);
      String string1 = "Cannot have two adjacent separators";
      // Undeclared exception!
      try { 
        dateTimeFormatter6.parseLocalDateTime("Cannot have two adjacent separators");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Cannot have two adjacent separators\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      MutableDateTime.now();
      StringBuffer stringBuffer0 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) charBuffer0, (long) 3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8vc<<@< XN1cCSCH");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      Locale locale0 = Locale.JAPAN;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockPrintWriter0, 1000000000000L, chronology0, 2147482529, dateTimeZone0, locale0);
      dateTimeFormatter0.print((-4000L));
      dateTimeFormatter0.parseMutableDateTime("Etc/UTC");
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime("8vc<<@< XN1cCSCH", dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8vc<<@< XN1cCSCH\" is malformed at \"vc<<@< XN1cCSCH\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(20587500);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      dateTimeFormatter2.getDefaultYear();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime("The partial must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The partial must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      dateTimeFormatter1.withZone(dateTimeZone0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)74;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 0, 2);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3000L));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      LocalDate localDate0 = new LocalDate();
      DateTimeUtils.setCurrentMillisOffset(0L);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("Etc/UTC");
      dateTimeFormatter0.isParser();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      try { 
        dateTimeFormatter1.printTo((Appendable) pipedWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      String string0 = "*NQP$)n\"&]_";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      int int0 = 1;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 885, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Appendable) null, (long) 885);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter(1244);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 10000, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'+1f:th");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      IslamicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
      dateTimeFormatter1.printTo((Writer) stringWriter0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter(4);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Chronology chronology0 = gregorianChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-536));
      dateTimeFormatter3.print((long) 0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = 1898;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-866), 1898);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      Integer.getInteger("d<gXyG/(P.T5!\"2b");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      Locale locale0 = Locale.forLanguageTag("d<gXyG/(P.T5!\"2b");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-866));
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-866));
      DateTime dateTime0 = localDateTime0.toDateTime();
      dateTimeFormatter5.print((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseMutableDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 2829, 2829);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((-3678L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 2, (-549));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-502));
      IslamicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-3344));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      dateTimeFormatter2.getParser();
      Locale locale0 = Locale.forLanguageTag("");
      Locale locale1 = new Locale("1zk");
      locale1.getDisplayLanguage();
      locale0.getDisplayScript(locale1);
      dateTimeFormatter2.withLocale(locale0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-3344), (-292275054), (-292275054), 1982292598);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3344 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "tyK,/zj ;5";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2146992794, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      dateTimeFormatter0.print(64944L);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(970L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TextField0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1569));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1));
      dateTimeFormatter2.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
      assertEquals("-00:00:01.569", stringWriter0.toString());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-109));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-109));
      Integer integer0 = new Integer((-109));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      Integer integer1 = dateTimeFormatter3.getPivotYear();
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals((-109), dateTimeFormatter3.getDefaultYear());
      assertEquals((-109), dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotNull(integer1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      dateTimeFormatter0.withZone(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(2077L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TextField0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1002);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      IslamicChronology.getInstanceUTC();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 7L, 5);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone1);
      ZonedChronology.getInstance(julianChronology0, dateTimeZone1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone1);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Appendable) stringWriter0, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1073741823), 12, (-1073741823));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormat_StyleFormatter0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType.millisOfSecond();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3264));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-3264));
      Locale locale0 = Locale.CHINA;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      dateTimeFormatter5.print((-178L));
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseMillis("Instant must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Instant must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, (DateTimeParser) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(792);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(792);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      dateTimeFormatter1.withZone(dateTimeZone1);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(stringWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.io.StringWriter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      String string0 = dateTimeFormatter1.print((long) 3);
      assertEquals("3", string0);
      
      long long0 = dateTimeFormatter1.parseMillis("Asia/Ho_Chi_Minh");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-25200000L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      dateTimeFormatter0.print((-29280000L));
      DateTimeZone.forID((String) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      dateTimeFormatter0.withZoneUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.toMutableDateTime((Chronology) gJChronology0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      MonthDay monthDay0 = MonthDay.now();
      dateTimeFormatter1.printTo(stringBuffer0, (ReadablePartial) monthDay0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      int int0 = 846;
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(4);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone1);
      dateTimeFormatter2.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 5);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.printTo((StringBuffer) null, (ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
      dateTimeFormatter1.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
      String string0 = "\\}@y1uxWop!mCj%WQe6";
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseDateTime("}@y1uxWop!mCj%WQe6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"}@y1uxWop!mCj%WQe6\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(8, 8);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
      dateTimeFormatter3.print((-206L));
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-144));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((-1));
      MockFile mockFile0 = new MockFile("\"C,jRXw$>;)S%Qb8", "Printing not supported");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      dateTimeFormatter2.printTo((Appendable) mockPrintStream0, (long) (-144));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone1);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals((-1), (int)dateTimeFormatter3.getPivotYear());
      
      MockFile mockFile1 = new MockFile("RO[qRqZ'E", "RO[qRqZ'E");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone1);
      DateTime dateTime0 = mutableDateTime1.toDateTime();
      dateTime0.withSecondOfMinute(1);
      dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (ReadableInstant) dateTime0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(dateTimeZone1);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals((-144), dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) 1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
      dateTimeFormatter5.getDefaultYear();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate localDate1 = localDate0.plusDays(1);
      LocalDate localDate2 = localDate1.withFields(localDate0);
      LocalDate localDate3 = localDate2.plusWeeks(1);
      LocalDate localDate4 = localDate3.minusDays(1);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer1, (ReadablePartial) localDate4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(5);
      dateTimeFormatter2.getPrinter();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertEquals(5, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.KOREAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(4);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone1);
      dateTimeFormatter2.printTo((Writer) stringWriter0, (ReadableInstant) mutableDateTime0);
      assertEquals("999", stringWriter0.toString());
      
      dateTimeFormatter1.withZone(dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('@');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(509);
      Integer integer0 = new Integer(509);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(5);
      Locale locale0 = Locale.US;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      Integer integer1 = dateTimeFormatter5.getPivotYear();
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(509, dateTimeFormatter2.getDefaultYear());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(509, dateTimeFormatter5.getDefaultYear());
      assertEquals(5, (int)integer1);
      assertNotNull(integer1);
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-25), true, 1126);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale1 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-236));
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Z C|[xE0,rR3.i5LF");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
      dateTimeFormatter4.getParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalDateTime(": ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \": \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 913, 41);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print(425L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print(4L);
      PipedWriter pipedWriter0 = new PipedWriter();
      ReadableInstant readableInstant0 = null;
      try { 
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadableInstant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = dateTimeFormatter0.print(63L);
      assertEquals("Etc/UTC", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("MST");
      assertEquals(25200000L, dateTime0.getMillis());
      
      long long0 = dateTimeFormatter0.parseMillis("MST");
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(25200000L, long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      mutableDateTime0.equals((Object) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer(3);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      int int0 = dateTimeFormatter2.parseInto(mutableDateTime0, "org.joda.time.chrono.GJChronology$LinkedDurationField", 5);
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-6), int0);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      dateTimeFormatter0.printTo((Appendable) stringWriter0, (-1L));
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) null);
      assertEquals("Etc/UTCEtc/UTC", stringWriter0.toString());
      
      dateTimeFormatter0.getChronology();
      dateTimeFormatter0.print((-1L));
      Integer integer0 = new Integer(1201);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      Locale locale0 = Locale.CANADA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.print((ReadableInstant) null);
      DateTime.parse("6");
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = dateTimeFormatter0.print(63L);
      assertEquals("Etc/UTC", string0);
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("MST");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(25200000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-3433));
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(gJChronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear((-3433));
      dateTimeFormatter5.getChronology();
      Locale locale0 = Locale.FRANCE;
      String string0 = ".Hb15E77vt>i{";
      StringBuffer stringBuffer0 = new StringBuffer(".Hb15E77vt>i{");
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 15, false, 15);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gregorianChronology0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(15, 15);
      dateTimeFormatter1.withZone(dateTimeZone0);
      dateTimeFormatter1.getChronolgy();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseLocalDateTime("org.joda.time.format.DateTimeFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.DateTimeFor...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Locale locale0 = new Locale("", "", "");
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      dateTimeFormatter1.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, (DateTimeParser) null);
      int int0 = (-427);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-427));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
      dateTimeFormatter2.withOffsetParsed();
      StringBuffer stringBuffer0 = new StringBuffer("wkXLgxc*xl_'aZ6J!(|");
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        monthDay0.minusDays(512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      int int0 = (-887);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-887), true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      dateTimeFormatter0.getPrinter();
      String string0 = "EcsvVGW!EU:";
      String string1 = "";
      Locale locale0 = new Locale("EcsvVGW!EU:", "EcsvVGW!EU:", "");
      locale0.getUnicodeLocaleKeys();
      int int1 = (-1203);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-887), "", (-887), 286, (-1203), (-887), 286, 2147483614, 2147483614, 1314);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -887
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 323;
      int int1 = 2302;
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(323, 323, 2302);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_StringLiteral0);
      long long0 = dateTimeFormatter0.parseMillis("");
      assertEquals(0L, long0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3600000L));
      Locale locale0 = Locale.CANADA;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTime dateTime0 = dateTimeFormatter2.parseDateTime("Etc/UTC");
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(0L, dateTime0.getMillis());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1071L);
      Locale locale0 = Locale.FRENCH;
      mutableDateTime0.equals((Object) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("MET");
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter3);
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(boolean0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = dateTimeFormatter0.print(0L);
      assertEquals("Etc/UTC", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1071L);
      Locale locale0 = Locale.FRENCH;
      mutableDateTime0.equals("Etc/UTC");
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "Etc/UTC", 0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(1071L, mutableDateTime0.getMillis());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "' is not recognised", 2147483614);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print(819L);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter2.parseMutableDateTime("MET");
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(236548278, (-2720), (-2720));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,Vzjr;5", "tyK,Vzjr;5", false, 157, 157);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withUTC();
      Locale locale0 = Locale.PRC;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1L), chronology0, locale0, (Integer) 1, (-509));
      dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "`BV", 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      String string0 = dateTimeFormatter0.print((long) 157);
      assertEquals("tyK,Vzjr;5", string0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("tyK,Vzjr;5", dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print(547L);
      dateTimeFormatter0.parseMillis("Etc/UTC");
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Etc/UTC", 7, 7);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) stringWriter1, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      StringWriter stringWriter0 = new StringWriter();
      dateTimeFormatter0.withPivotYear((-699));
      MockDate mockDate0 = new MockDate(25650000, 236548278, (-74), (-699), 236548278);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      localDate0.minusMonths(236548278);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("org.joda.time.DateTimeUtils$OffsetMillisProvider");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'org.joda.time.DateTimeUtils$OffsetMillisProvider' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,Vzjr;5", "tyK,Vzjr;5", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      PipedWriter pipedWriter0 = new PipedWriter();
      LocalDate localDate0 = new LocalDate();
      Integer integer0 = new Integer(157);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      dateTimeFormatter2.printTo((Writer) pipedWriter0, (ReadablePartial) localDate0);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("tyK,Vzjr;5");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 18, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_Composite0);
      StringBuffer stringBuffer0 = new StringBuffer("auZIforhutT|)oM4");
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (-2987L), (Chronology) buddhistChronology0, 1, dateTimeZone0, locale0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "", (-2117));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      String string0 = "DN:>05>%)Gt<c1S";
      dateTimeFormatter0.getPivotYear();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, 2053L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3000L));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      LocalDate localDate0 = new LocalDate();
      DateTimeUtils.setCurrentMillisOffset(0L);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("Etc/UTC");
      assertEquals(0L, mutableDateTime0.getMillis());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertTrue(boolean0);
      
      dateTimeFormatter0.parseLocalTime("Etc/UTC");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      int int0 = 1;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, (-1));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((long) 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1310;
      PipedReader pipedReader0 = new PipedReader();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"7L{b&ai4u");
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      String string0 = dateTimeFormatter0.print(0L);
      assertEquals("tyK,/zj ;5", string0);
      
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertTrue(boolean0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1261L));
      Locale locale0 = Locale.FRENCH;
      mutableDateTime0.equals(locale0);
      int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, "q", 3);
      assertEquals((-1261L), mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dateTimeFormatter0.print((-3000L));
      StringBuffer stringBuffer0 = new StringBuffer("Etc/UTC");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = julianChronology0.withUTC();
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, 100L, chronology0, 18, dateTimeZone0, (Locale) null);
      dateTimeFormatter0.parseMillis("Etc/UTC");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, "Etc/UTC", 1040);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeFormatter0.print((-3038L));
      dateTimeFormatter0.parseLocalDateTime("");
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(boolean0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("?pOR.cb2", "?pOR.cb2", true, 1, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      Integer.getInteger("");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1);
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(strictChronology0);
      Locale locale0 = Locale.CANADA;
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(fixedDateTimeZone0);
      dateTimeFormatter5.print(64498016L);
      PipedReader pipedReader0 = new PipedReader();
      LocalDate localDate0 = new LocalDate();
      dateTimeFormatter4.getLocale();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      dateTimeFormatter0.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3000L));
      PipedReader pipedReader0 = new PipedReader();
      Integer integer0 = new Integer(1310);
      dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      CopticChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseInto(mutableDateTime0, "", 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1310);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1310);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(islamicChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalDateTime("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer.getInteger("tyK,/zj ;5");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(157);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      MockPrintStream mockPrintStream0 = new MockPrintStream("r");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "tyK,/zj ;5";
      objectArray0[1] = (Object) "tyK,/zj ;5";
      objectArray0[2] = (Object) dateTimeFormatter4;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      LocalDate localDate0 = new LocalDate((Object) null, (Chronology) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 1);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      dateTimeFormatter5.printTo((Appendable) printStream0, (ReadableInstant) dateTime0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter5.parseMutableDateTime("tyK,/zj ;5");
      int int0 = dateTimeFormatter3.parseInto(mutableDateTime0, "tyK,/zj ;5", 2000);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(157, dateTimeFormatter5.getDefaultYear());
      assertEquals((-2001), int0);
      
      boolean boolean0 = dateTimeFormatter1.isParser();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.CANADA;
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(boolean0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1), true, 1247);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology((Chronology) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale((Locale) null);
      Integer integer0 = new Integer((-1));
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      StringWriter stringWriter0 = new StringWriter(1247);
      StringBuffer stringBuffer0 = new StringBuffer("], ");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      MonthDay monthDay1 = monthDay0.minusDays(1247);
      dateTimeFormatter5.printTo(stringBuffer1, (ReadablePartial) monthDay1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals((-1), dateTimeFormatter5.getDefaultYear());
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter4, dateTimeFormatter3);
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3000L));
      dateTimeFormatter0.parseLocalDateTime("Etc/UTC");
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3000L));
      dateTimeFormatter0.parseMillis("Etc/UTC");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.isOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMutableDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalDateTime("hbF/D_xBmCl2`R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"hbF/D_xBmCl2`R\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((StringBuffer) null, 431L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 58, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer0 = new Integer((-3042));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      Integer.getInteger("#WK");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, islamicChronology0, locale0, (Integer) null, 1);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(chronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseMutableDateTime("lZF+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"lZF+\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 15, false);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TimeZoneId0);
      Integer integer0 = new Integer(15);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-2594));
      Locale locale0 = Locale.PRC;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(zonedChronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withChronology(chronology0);
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
      assertFalse(dateTimeFormatter4.isOffsetParsed());
      assertEquals((-2594), dateTimeFormatter5.getDefaultYear());
      assertEquals((-2594), dateTimeFormatter6.getDefaultYear());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(936);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseInto(mutableDateTime0, "", 4007);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer.getInteger("tyK,/zj ;5");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      String string0 = dateTimeFormatter1.print((long) 157);
      assertEquals("tyK,/zj ;5", string0);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter3.parseMutableDateTime("tyK,/zj ;5");
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear((-2));
      assertEquals(2000, dateTimeFormatter4.getDefaultYear());
      assertEquals((-2), (int)dateTimeFormatter4.getPivotYear());
      
      dateTimeFormatter3.parseLocalDateTime("tyK,/zj ;5");
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) null);
      dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) null);
      dateTimeFormatter0.isPrinter();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "", 85);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3000L));
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      LocalDate localDate0 = LocalDate.parse("Etc/UTC", dateTimeFormatter0);
      LocalDate localDate1 = localDate0.plusDays(1310);
      dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localDate1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Wrapped field's minumum value must be zero", "", true, 157, 1522);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      dateTimeFormatter0.withLocale(locale0);
      Integer.getInteger("Instant must not be null");
      dateTimeFormatter1.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
      dateTimeFormatter1.withOffsetParsed();
      String string0 = "J2N;%esT";
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime("J2N;%esT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"J2N;%esT\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("up0Z");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) null);
      dateTimeFormatter0.isPrinter();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, "", 85);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Integer integer0 = new Integer((-176));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 2000;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(2000);
      String string0 = " instant is ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale0 = new Locale("", " instant is ");
      locale0.getExtensionKeys();
      Instant instant0 = Instant.now();
      dateTimeFormatter2.print((ReadableInstant) instant0);
      dateTimeFormatter0.withLocale(locale0);
      String string1 = "1|HER%i x6zDc\\`";
      // Undeclared exception!
      try { 
        Instant.parse("1|HER%i x6zDc`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1|HER%i x6zDc`\" is malformed at \"|HER%i x6zDc`\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Writer writer0 = null;
      dateTimeFormatter0.getParser();
      dateTimeFormatter0.withZoneUTC();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer.getInteger("tyK,/zj ;5");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(157);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      MutableDateTime mutableDateTime0 = dateTimeFormatter5.parseMutableDateTime("tyK,/zj ;5");
      int int0 = dateTimeFormatter3.parseInto(mutableDateTime0, "tyK,/zj ;5", 2000);
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
      assertEquals((-2001), int0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(157, dateTimeFormatter5.getDefaultYear());
      assertTrue(dateTimeFormatter5.isOffsetParsed());
      assertSame(dateTimeFormatter3, dateTimeFormatter2);
      
      dateTimeFormatter1.parseLocalDate("tyK,/zj ;5");
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MonthDay monthDay0 = new MonthDay(2326L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      dateTimeFormatter0.printTo((Appendable) printWriter0, (ReadablePartial) monthDay0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.isPrinter();
      PipedWriter pipedWriter0 = new PipedWriter();
      MonthDay monthDay0 = new MonthDay(10000000000000000L);
      try { 
        dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 5121, false, 5121);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{g3qt.WIP+$QG");
      Locale locale0 = Locale.UK;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      Integer integer0 = new Integer(5121);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFieldType0.getDurationType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{g3qt.WIP+$QG");
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(5121);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(431);
      locale0.getDisplayLanguage();
      String string0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseLocalDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 2033, 2033);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.parseMillis("tyK,/zj ;5");
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer.getInteger("tyK,/zj ;5");
      dateTimeFormatter2.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(2033);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter3.parseMutableDateTime("tyK,/zj ;5");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Locale locale1 = new Locale("7#hS", "tyK,/zj ;5");
      dateTimeFormatter4.withLocale((Locale) null);
      // Undeclared exception!
      try { 
        Instant.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.isParser();
      dateTimeFormatter0.getChronolgy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for dayOfWeek must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertTrue(boolean0);
      
      dateTimeFormatter0.getPrinter();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField1 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField1, dateTimeFormatterBuilder_TextField0);
      dateTimeFormatter0.withPivotYear(936);
      Locale locale0 = new Locale(" instant is ", "m~]+");
      dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        Instant.parse("1|HER% Mi x6zDc]@`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1|HER% Mi x6zDc]@`\" is malformed at \"|HER% Mi x6zDc]@`\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 2033, 2033);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer.getInteger("tyK,/zj ;5");
      dateTimeFormatter2.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(2033);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
      dateTimeFormatter3.parseMutableDateTime("tyK,/zj ;5");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringWriter stringWriter0 = new StringWriter(4);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "tyK,/zj ;5");
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      dateTimeFormatter1.printTo(stringBuffer1, 10000000000L);
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseLocalDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.print((-3025L));
      PipedReader pipedReader0 = new PipedReader(1310);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      LocalDate localDate0 = new LocalDate((-3025L));
      LocalDate localDate1 = localDate0.plusDays(1310);
      dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localDate1);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1579L, chronology0);
      dateTimeFormatter0.printTo((Appendable) pipedWriter0, (ReadableInstant) mutableDateTime0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("3@lWQp?z>Vu(6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3@lWQp?z>Vu(6\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      Locale locale0 = Locale.KOREA;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Integer.getInteger("tyK,/zj ;5");
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(157);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
      dateTimeFormatter5.parseMutableDateTime("tyK,/zj ;5");
      StringBuffer stringBuffer0 = new StringBuffer(4);
      dateTimeFormatter5.printTo(stringBuffer0, (long) 4);
      assertEquals("tyK,/zj ;5", stringBuffer0.toString());
      
      dateTimeFormatter2.parseLocalDate("tyK,/zj ;5");
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Locale locale0 = new Locale("", "", "");
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
      dateTimeFormatter0.isPrinter();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseDateTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFieldType.dayOfYear();
      int int0 = 15356250;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
      int int1 = 52;
      Integer integer0 = new Integer(52);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(15356250);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-426));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.print(2629800000L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      String string0 = "iPMawX`J";
      Locale locale0 = new Locale("iPMawX`J", "iPMawX`J", "iPMawX`J");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('*');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2095), false);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) (-2095), (Chronology) iSOChronology0, 1, dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      gJChronology0.withZone(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) stringWriter0, (ReadablePartial) yearMonth0, locale0);
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter2.printTo((Appendable) stringBuffer0, (long) 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFieldType.yearOfCentury();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-650), 2000, (-801));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-801));
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        dateTimeFormatter1.print((ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("months", "kdRA#{~Vj[", "nqd\"xk4*");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      dateTimeFormatter0.isPrinter();
      dateTimeFormatter0.getLocale();
      dateTimeFormatter0.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2019, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("", "", "");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) 2019, (Chronology) iSOChronology0, 292272984, dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.minusMonths((-1483));
      dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) yearMonth1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      DateTimeZone dateTimeZone1 = dateTimeFormatter1.getZone();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      dateTimeFormatter0.withPivotYear((Integer) null);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("Printing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      Integer integer0 = new Integer((-2894));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter4.parseLocalDateTime("org.joda.time.base.AbstractPartial");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.base.AbstractPartial\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2019, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2019);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("kdRA#{~Vj[", "kdRA#{~Vj[", "kdRA#{~Vj[");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(749);
      Integer integer0 = new Integer(749);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
      dateTimeFormatter5.printTo((Appendable) stringWriter0, (-3197L));
      dateTimeFormatter4.isPrinter();
      dateTimeFormatter0.getLocale();
      dateTimeFormatter3.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter2.parseMutableDateTime("n[#:.`{M)[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"n[#:.`{M)[\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 15356245, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      dateTimeFormatter0.getZone();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2019, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2019);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      String string0 = "kdRA#{~Vj[";
      String string1 = "p";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("kdRA#{~Vj[");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale((Locale) null);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2019);
      // Undeclared exception!
      try { 
        dateTimeFormatter5.parseLocalDate("p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatter0.withLocale(locale0);
      dateTimeFormatter0.withDefaultYear((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.withUTC();
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 29, 29);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormat_StyleFormatter0);
      dateTimeFormatter1.withChronology(buddhistChronology0);
      dateTimeFormatter1.withZone((DateTimeZone) null);
      MockDate mockDate0 = new MockDate((-1), (-1), 1, 902, 3183);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      dateTimeFormatter0.print((ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis("org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: en
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFieldType.yearOfCentury();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(611L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedList1.add((Object) localTime0);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('[');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
      Locale locale0 = Locale.ENGLISH;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone((DateTimeZone) null);
      dateTimeFormatter5.print((ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseMillis("`$pq-4@Sg-:l~@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"`$pq-4@Sg-:l~@\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      int int0 = 434;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 434, true);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_Composite0);
      dateTimeFormatter0.withZoneUTC();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(326L);
      dateTimeFormatter0.isOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2022, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("kdRA#{~Vj[", "kdRA#{~Vj[", "kdRA#{~Vj[");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (-3197L), (Chronology) iSOChronology0, 2022, dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) stringWriter0, 0L, (Chronology) iSOChronology0, (-1), dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(iSOChronology0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      
      dateTimeFormatter0.getPrinter();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      int int0 = 15356250;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 15356250, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
      Locale locale0 = Locale.CHINESE;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(15356250);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
      String string0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseMillis((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Q');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((int) 'Q');
      Integer integer0 = new Integer('Q');
      Integer.getInteger("dD]y#$-Sn}N#", integer0);
      dateTimeFormatter1.withPivotYear(integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "dD]y#$-Sn}N#", (-1031), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2022, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("kdRA#{~Vj[", "kdRA#{~Vj[", "kdRA#{~Vj[");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (-3197L), (Chronology) iSOChronology0, 2022, dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) stringWriter0, (ReadablePartial) yearMonth0, locale0);
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (-1377L));
      dateTimeFormatter0.isPrinter();
      dateTimeFormatter0.getLocale();
      dateTimeFormatter0.isParser();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("kdRA#{~Vj[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"kdRA#{~Vj[\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      dateTimeFormatter0.getChronology();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("@*6]I-ij|rR8(");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "tyK,/zj ;5";
      int int0 = 157;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "tyK,/zj ;5", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2610);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(2610);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeZone dateTimeZone0 = null;
      dateTimeFormatter4.print(1376L);
      dateTimeFormatter3.withZone((DateTimeZone) null);
      try { 
        Integer.decode("tyK,/zj ;5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"tyK,/zj ;5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 252, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_UnpaddedNumber0);
      String string0 = "";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      System.setCurrentTimeMillis(21260793600000L);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(':');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(20587500);
      String string0 = "dD]\\y#$-Sn}N#";
      Integer integer0 = new Integer((-2));
      Integer integer1 = Integer.getInteger("dD]y#$-Sn}N#", integer0);
      dateTimeFormatter1.withPivotYear(integer1);
      int int0 = 1333;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "dD]y#$-Sn}N#", 1, (-753));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4364));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-4364));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1524);
      dateTimeFormatter3.withZoneUTC();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3219, "=Fv{.9^E9V}\")q82", (-4364), 0, (-4364), 1, 1, (-2), 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day -2
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 157, 157);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(29);
      Integer integer0 = new Integer((-1743));
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      Integer integer1 = new Integer(29);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer1);
      dateTimeFormatter0.withPivotYear(0);
      dateTimeFormatter1.withZoneUTC();
      DateTimeZone dateTimeZone0 = null;
      dateTimeFormatter4.withZone((DateTimeZone) null);
      String string0 = "QTHr";
      // Undeclared exception!
      try { 
        MutableDateTime.parse("QTHr", dateTimeFormatter4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"QTHr\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1051, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.withZoneUTC();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      stringBuffer0.append(stringBuffer1);
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) null);
      assertEquals("02", stringWriter0.toString());
      
      dateTimeFormatter0.getDefaultYear();
      dateTimeFormatter0.getLocale();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2019, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("kdRA#{~Vj[", "kdRA#{~Vj[", "kdRA#{~Vj[");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (-3197L), (Chronology) iSOChronology0, 2019, dateTimeZone0, locale0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kdRA#{~Vj[");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (-1377L));
      dateTimeFormatter0.isPrinter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("kdRA#{~Vj[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"kdRA#{~Vj[\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 157;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "org.joda.time.chrono.StrictChronology", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2581);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(2581);
      dateTimeFormatter3.withZoneUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatter3.withZone(fixedDateTimeZone0);
      dateTimeFormatter1.getDefaultYear();
      StringWriter stringWriter0 = new StringWriter(2581);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(337L);
      Integer integer0 = new Integer(0);
      dateTimeFormatter0.withPivotYear(integer0);
      linkedList0.add((Object) localTime0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) localTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2019, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("No file directory provided", "Types array must not contain duplicate: ", "");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (-3197L), (Chronology) iSOChronology0, 2019, dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      dateTimeFormatter0.isPrinter();
      // Undeclared exception!
      try { 
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 15356250, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      stringBuffer0.append(stringBuffer1);
      dateTimeFormatter1.printTo((Writer) stringWriter1, (ReadableInstant) null);
      assertEquals("07", stringWriter1.toString());
      
      int int0 = dateTimeFormatter1.getDefaultYear();
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      Integer integer0 = new Integer(747);
      Integer integer1 = new Integer(858);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(747);
      assertEquals(747, (int)dateTimeFormatter2.getPivotYear());
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(0);
      DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZone((DateTimeZone) null);
      assertEquals(2000, dateTimeFormatter6.getDefaultYear());
      assertTrue(dateTimeFormatter6.isOffsetParsed());
      
      int int0 = dateTimeFormatter1.getDefaultYear();
      assertEquals(2000, int0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertFalse(dateTimeFormatter1.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = (-771);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-771), hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter1.withDefaultYear((-771));
      int int1 = 0;
      Integer integer0 = new Integer(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 0, 0, (-1868), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1868 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(936);
      Locale locale0 = new Locale("NoLimit", "NoLimit");
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter3.parseLocalDateTime("O=o'rAV(g.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13421772, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
      int int0 = (-1);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(chronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      dateTimeFormatter4.withZoneUTC();
      MockDate mockDate0 = new MockDate(1242L);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 743 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatterBuilder_TimeZoneId0.parseInto((DateTimeParserBucket) null, "org.joda.time.chrono.ZonedChronology$ZonedDurationField", 0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMutableDateTime("Printing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Printing not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('w');
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      int int0 = 2154;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2154);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.GERMANY;
      int int1 = (-140);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, copticChronology0, locale0, (Integer) 1, (-140));
      dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, ")eZ", 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_MatchingParser0);
      dateTimeFormatter0.getPivotYear();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalTime("\"594XH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"594XH\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2019, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("kdRA#{~Vj[", "kdRA#{~Vj[", "kdRA#{~Vj[");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (-3197L), (Chronology) iSOChronology0, 2019, dateTimeZone0, locale0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertTrue(boolean0);
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatter0.withOffsetParsed();
      String string0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      Locale locale0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
      int int0 = 31;
      Integer integer0 = new Integer(31);
      dateTimeFormatter1.withPivotYear(integer0);
      String string0 = "Q5";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("Q5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Q5\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("tyK,/zj ;5", "org.joda.time.chrono.StrictChronology", false, 157, 157);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2581);
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(2581);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone((DateTimeZone) null);
      int int0 = dateTimeFormatter5.getDefaultYear();
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
      assertFalse(dateTimeFormatter5.isOffsetParsed());
      assertEquals(2581, int0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter3.isOffsetParsed());
      assertEquals(2581, (int)dateTimeFormatter5.getPivotYear());
      assertEquals(2581, dateTimeFormatter2.getDefaultYear());
      assertEquals(2581, dateTimeFormatter4.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("The partial must not be null");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(0);
      Locale locale0 = Locale.CHINA;
      dateTimeFormatter3.withLocale(locale0);
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalTime("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      LocalTime.fromMillisOfDay(337L);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      dateTimeFormatter0.withPivotYear(integer0);
      String string0 = "I";
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseMillis("I");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeFieldType.minuteOfDay();
      int int0 = (-1090);
      DateTimeZone.getDefault();
      String string0 = "";
      // Undeclared exception!
      try { 
        Instant.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("rH7Yl,T");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.nextTransition(0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      dateTimeFormatter2.withChronology(iSOChronology0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(3057);
      dateTimeFormatter4.withPivotYear(0);
      LocalDate localDate1 = localDate0.plusWeeks((-482));
      // Undeclared exception!
      try { 
        localDate1.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('>');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      Integer integer0 = new Integer(1);
      Integer integer1 = Integer.getInteger((String) null, integer0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer1);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1);
      dateTimeFormatter0.printTo((Writer) bufferedWriter0, (long) 1);
      dateTimeFormatter4.withPivotYear(1);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 11, (-742));
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-44), hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(11);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.withPivotYear((-44));
      MockFile mockFile0 = new MockFile("XLWv{2k`)jSpY:.");
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File directory doesn't exist: XLWv{2k`)jSpY:.
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }
}
