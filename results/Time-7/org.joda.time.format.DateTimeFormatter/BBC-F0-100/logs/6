* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.joda.time.format.DateTimeFormatter
* Starting Client-0
* Connecting to master process on port 8300
* Analyzing classpath: 
  - subjects/buggy-versions/Time-7/target/classes
  - defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar
* Finished analyzing classpath
* Generating tests for class org.joda.time.format.DateTimeFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 984
* Using seed 3411378554
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 473 / 984
[MASTER] 03:44:35.399 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;: I79 Branch 29 IFNULL L821 - true: 30298,25572,20981| Number of FF evals: 74771
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I36 Branch 36 IFLT L900 - false: 56,0,0| Number of FF evals: 6173
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMillis(Ljava/lang/String;)J: I37 Branch 24 IFLT L748 - false: 86,0,0| Number of FF evals: 4847
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/StringBuffer;J)V: Line 499: 12,0,0| Number of FF evals: 81
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;: I36 Branch 30 IFLT L855 - false: 136,0,0| Number of FF evals: 7717
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.getChronology()Lorg/joda/time/Chronology;: root-Branch: 28,0,0| Number of FF evals: 40
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/Appendable;J)V: root-Branch: 378,0,0| Number of FF evals: 333
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: I43 Branch 17 IFLT L644 - false: 32496,27543,0| Number of FF evals: 74771
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/Appendable;J)V: Line 521: 378,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseLocalTime(Ljava/lang/String;)Lorg/joda/time/LocalTime;: root-Branch: 1045,0,0| Number of FF evals: 6689
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;: I57 Branch 33 IFNULL L858 - false: 33683,28956,18386| Number of FF evals: 74358
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/Appendable;J)V: Line 522: 378,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;: I7 Branch 4 IFNULL L190 - true: 3767,0,0| Number of FF evals: 10696
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.isOffsetParsed()Z: root-Branch: 1045,0,0| Number of FF evals: 593
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I54 Branch 38 IFEQ L903 - false: 28,0,0| Number of FF evals: 2340
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseLocalTime(Ljava/lang/String;)Lorg/joda/time/LocalTime;: Line 791: 1045,0,0| Number of FF evals: 563
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;: I5 Branch 3 IF_ACMPEQ L190 - true: 109,0,0| Number of FF evals: 2434
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: I98 Branch 21 IFNULL L716 - false: 39722,33395,4179| Number of FF evals: 74358
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;: I42 Branch 31 IF_ICMPLT L856 - false: 171,0,0| Number of FF evals: 7346
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I42 Branch 37 IF_ICMPLT L901 - true: 95,0,0| Number of FF evals: 871
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;: I42 Branch 31 IF_ICMPLT L856 - true: 181,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;Lorg/joda/time/ReadableInstant;)V: root-Branch: 1238,0,0| Number of FF evals: 3828
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V: Line 634: 7,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: I122 Branch 22 IFNULL L720 - true: 49178,41483,5614| Number of FF evals: 74358
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;: I54 Branch 32 IFEQ L858 - true: 10,0,0| Number of FF evals: 2523
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: Line 638: 12,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: Line 641: 12,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: Line 642: 12,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.getChronology()Lorg/joda/time/Chronology;: Line 271: 28,0,0| Number of FF evals: 38
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V: I36 Branch 14 IFGE L627 - false: 2852,0,0| Number of FF evals: 8238
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.getDefaultYear()I: Line 450: 285,0,0| Number of FF evals: 208
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.isPrinter()Z: I4 Branch 1 IFNULL L147 - false: 1335,0,0| Number of FF evals: 743
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: Line 643: 12,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: Line 715: 60,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/Appendable;Lorg/joda/time/ReadablePartial;)V: Line 571: 75,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: Line 644: 12,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: Line 716: 60,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: Line 650: 12,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.isPrinter()Z: I4 Branch 1 IFNULL L147 - true: 1598,0,0| Number of FF evals: 1257
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.getChronolgy()Lorg/joda/time/Chronology;: root-Branch: 665,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I101 Branch 41 IFNULL L911 - false: 80,0,0| Number of FF evals: 507
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.print(J)Ljava/lang/String;: Line 601: 378,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: Line 651: 26,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: Line 723: 60,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: Line 724: 60,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.print(J)Ljava/lang/String;: Line 600: 378,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: Line 727: 60,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.print(J)Ljava/lang/String;: Line 599: 378,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.isParser()Z: I4 Branch 2 IFNULL L165 - true: 1107,0,0| Number of FF evals: 1973
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;: I101 Branch 35 IFNULL L866 - false: 44,0,0| Number of FF evals: 400
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.getChronolgy()Lorg/joda/time/Chronology;: Line 282: 665,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.requireParser()Lorg/joda/time/format/DateTimeParser;: I8 Branch 42 IFNONNULL L929 - false: 172,0,0| Number of FF evals: 464
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: Line 701: 757,0,0| Number of FF evals: 404
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;: I81 Branch 34 IFNULL L862 - true: 43568,37225,26448| Number of FF evals: 74358
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: Line 702: 757,0,0| Number of FF evals: 404
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I42 Branch 37 IF_ICMPLT L901 - false: 67,0,0| Number of FF evals: 5914
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;Lorg/joda/time/ReadablePartial;)V: I8 Branch 13 IFNONNULL L553 - false: 130,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.isPrinter()Z: Line 147: 1335,0,0| Number of FF evals: 682
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.withPivotYear(Ljava/lang/Integer;)Lorg/joda/time/format/DateTimeFormatter;: I5 Branch 9 IF_ACMPEQ L369 - true: 243,0,0| Number of FF evals: 750
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V: I8 Branch 12 IFNONNULL L536 - false: 186,0,0| Number of FF evals: 616
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.print(J)Ljava/lang/String;: root-Branch: 378,0,0| Number of FF evals: 2461
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;Lorg/joda/time/ReadableInstant;)V: Line 476: 1238,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMillis(Ljava/lang/String;)J: I43 Branch 25 IF_ICMPLT L749 - true: 146,0,0| Number of FF evals: 819
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;Lorg/joda/time/ReadableInstant;)V: Line 474: 1238,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I57 Branch 39 IFNULL L903 - false: 14429,8891,4953| Number of FF evals: 32557
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: I139 Branch 23 IFNULL L724 - false: 13,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/Appendable;Lorg/joda/time/ReadableInstant;)V: Line 487: 26,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;Lorg/joda/time/ReadableInstant;)V: Line 475: 1238,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMillis(Ljava/lang/String;)J: I43 Branch 25 IF_ICMPLT L749 - false: 101,0,0| Number of FF evals: 4550
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V: I43 Branch 15 IFLT L627 - true: 2877,0,0| Number of FF evals: 8248
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I57 Branch 39 IFNULL L903 - true: 28,0,0| Number of FF evals: 2339
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;Lorg/joda/time/ReadableInstant;)V: Line 473: 1238,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: I36 Branch 16 IFGE L644 - true: 12,0,0| Number of FF evals: 2856
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.isOffsetParsed()Z: Line 237: 1045,0,0| Number of FF evals: 571
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V: I43 Branch 15 IFLT L627 - false: 6747,2061,0| Number of FF evals: 18248
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;: I12 Branch 5 IFEQ L190 - false: 49455,45220,6850| Number of FF evals: 74750
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: I43 Branch 17 IFLT L644 - true: 6669,1716,0| Number of FF evals: 17631
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;JLorg/joda/time/Chronology;)V: I36 Branch 16 IFGE L644 - false: 6662,1954,0| Number of FF evals: 17610
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/io/Writer;J)V: Line 510: 26,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseMutableDateTime(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;: I81 Branch 40 IFNULL L907 - true: 40594,33246,21195| Number of FF evals: 74408
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: I8 Branch 19 IFNONNULL L702 - false: 827,0,0| Number of FF evals: 1653
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;: Line 586: 26,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V: Line 464: 26,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.getDefaultYear()I: root-Branch: 285,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.withPivotYear(Ljava/lang/Integer;)Lorg/joda/time/format/DateTimeFormatter;: I13 Branch 11 IFEQ L369 - false: 70,0,0| Number of FF evals: 593
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;: I55 Branch 28 IFNULL L817 - false: 1005,0,0| Number of FF evals: 2704
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: I95 Branch 20 IFEQ L716 - false: 60,0,0| Number of FF evals: 3271
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: I95 Branch 20 IFEQ L716 - true: 73,0,0| Number of FF evals: 3707
Number of times BBC is called, activated, and useful for org.joda.time.format.DateTimeFormatter.parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I: I8 Branch 19 IFNONNULL L702 - true: 757,0,0| Number of FF evals: 8165
* Search finished after 602s and 1702 generations, 702189 statements, best individual has fitness: 155.0
* Minimizing test suite
[MASTER] 03:55:07.355 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 208
* Number of covered goals: 197
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 113
* Number of covered goals: 105
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 92
* Number of covered goals: 92
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 325
* Number of covered goals: 305
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 147
* Number of covered goals: 121
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 113
* Number of covered goals: 98
* Generated 196 tests with total length 2822
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:55:48.609 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6766166666666666% of time used, but only 50/196 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
[MASTER] 03:56:13.606 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:56:42.188 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected not same
[MASTER] 03:56:42.211 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());

DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertNotNull(dateTimeFormatter0);

Locale locale0 = Locale.ITALY;
assertEquals("it_IT", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("IT", locale0.getCountry());
assertEquals("ITA", locale0.getISO3Country());
assertEquals("it", locale0.getLanguage());
assertEquals("ita", locale0.getISO3Language());
assertNotNull(locale0);

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
assertFalse(boolean0);

DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertNotNull(dateTimeZone0);

GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertNotNull(gJChronology0);

DateTimeZone dateTimeZone1 = gJChronology0.getZone();
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertNotNull(dateTimeZone1);

DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone1);
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2000, dateTimeFormatter1.getDefaultYear());
assertFalse(dateTimeFormatter1.isOffsetParsed());
assertTrue(dateTimeFormatter1.isPrinter());
assertTrue(dateTimeFormatter1.isParser());
assertNull(dateTimeFormatter1.getPivotYear());
assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
assertNotNull(dateTimeFormatter1);

Integer integer0 = new Integer(3263);
assertEquals(3263, (int)integer0);
assertNotNull(integer0);

DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2000, dateTimeFormatter1.getDefaultYear());
assertFalse(dateTimeFormatter1.isOffsetParsed());
assertTrue(dateTimeFormatter1.isPrinter());
assertTrue(dateTimeFormatter1.isParser());
assertNull(dateTimeFormatter1.getPivotYear());
assertTrue(dateTimeFormatter2.isPrinter());
assertFalse(dateTimeFormatter2.isOffsetParsed());
assertTrue(dateTimeFormatter2.isParser());
assertEquals(2000, dateTimeFormatter2.getDefaultYear());
assertEquals(3263, (int)dateTimeFormatter2.getPivotYear());
assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
assertNotNull(dateTimeFormatter2);

MonthDay monthDay0 = new MonthDay(dateTimeZone1);
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2, monthDay0.getMonthOfYear());
assertEquals(14, monthDay0.getDayOfMonth());
assertEquals(2, monthDay0.size());
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertNotNull(monthDay0);
assertEquals(0, MonthDay.MONTH_OF_YEAR);
assertEquals(1, MonthDay.DAY_OF_MONTH);

DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone1);
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2000, dateTimeFormatter1.getDefaultYear());
assertFalse(dateTimeFormatter1.isOffsetParsed());
assertTrue(dateTimeFormatter1.isPrinter());
assertTrue(dateTimeFormatter1.isParser());
assertNull(dateTimeFormatter1.getPivotYear());
assertTrue(dateTimeFormatter2.isPrinter());
assertFalse(dateTimeFormatter2.isOffsetParsed());
assertTrue(dateTimeFormatter2.isParser());
assertEquals(2000, dateTimeFormatter2.getDefaultYear());
assertEquals(3263, (int)dateTimeFormatter2.getPivotYear());
assertEquals(2000, dateTimeFormatter3.getDefaultYear());
assertEquals(3263, (int)dateTimeFormatter3.getPivotYear());
assertFalse(dateTimeFormatter3.isOffsetParsed());
assertTrue(dateTimeFormatter3.isPrinter());
assertTrue(dateTimeFormatter3.isParser());
assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
assertSame(dateTimeFormatter2, dateTimeFormatter3);
assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
assertSame(dateTimeFormatter3, dateTimeFormatter2);
assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
assertNotNull(dateTimeFormatter3);

DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2000, dateTimeFormatter1.getDefaultYear());
assertFalse(dateTimeFormatter1.isOffsetParsed());
assertTrue(dateTimeFormatter1.isPrinter());
assertTrue(dateTimeFormatter1.isParser());
assertNull(dateTimeFormatter1.getPivotYear());
assertTrue(dateTimeFormatter2.isPrinter());
assertFalse(dateTimeFormatter2.isOffsetParsed());
assertTrue(dateTimeFormatter2.isParser());
assertEquals(2000, dateTimeFormatter2.getDefaultYear());
assertEquals(3263, (int)dateTimeFormatter2.getPivotYear());
assertEquals(3263, (int)dateTimeFormatter4.getPivotYear());
assertEquals(2000, dateTimeFormatter4.getDefaultYear());
assertTrue(dateTimeFormatter4.isOffsetParsed());
assertTrue(dateTimeFormatter4.isParser());
assertTrue(dateTimeFormatter4.isPrinter());
assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
assertSame(dateTimeFormatter2, dateTimeFormatter3);
assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
assertNotSame(dateTimeFormatter2, dateTimeFormatter4);
assertNotSame(dateTimeFormatter4, dateTimeFormatter3);
assertNotSame(dateTimeFormatter4, dateTimeFormatter1);
assertNotSame(dateTimeFormatter4, dateTimeFormatter0);
assertNotSame(dateTimeFormatter4, dateTimeFormatter2);
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter4.equals((Object)dateTimeFormatter2));
assertNotNull(dateTimeFormatter4);

DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withPivotYear(0);
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2000, dateTimeFormatter1.getDefaultYear());
assertFalse(dateTimeFormatter1.isOffsetParsed());
assertTrue(dateTimeFormatter1.isPrinter());
assertTrue(dateTimeFormatter1.isParser());
assertNull(dateTimeFormatter1.getPivotYear());
assertEquals(2000, dateTimeFormatter5.getDefaultYear());
assertTrue(dateTimeFormatter5.isParser());
assertEquals(0, (int)dateTimeFormatter5.getPivotYear());
assertTrue(dateTimeFormatter5.isPrinter());
assertFalse(dateTimeFormatter5.isOffsetParsed());
assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
assertNotSame(dateTimeFormatter5, dateTimeFormatter1);
assertNotSame(dateTimeFormatter5, dateTimeFormatter4);
assertNotSame(dateTimeFormatter5, dateTimeFormatter2);
assertNotSame(dateTimeFormatter5, dateTimeFormatter0);
assertNotSame(dateTimeFormatter5, dateTimeFormatter3);
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter5.equals((Object)dateTimeFormatter3));
assertNotNull(dateTimeFormatter5);

Locale locale1 = Locale.SIMPLIFIED_CHINESE;
assertEquals("zh", locale1.getLanguage());
assertEquals("CHN", locale1.getISO3Country());
assertEquals("zho", locale1.getISO3Language());
assertEquals("zh_CN", locale1.toString());
assertEquals("", locale1.getVariant());
assertEquals("CN", locale1.getCountry());
assertNotSame(locale1, locale0);
assertFalse(locale1.equals((Object)locale0));
assertNotNull(locale1);

String string0 = "org.joda.time.field.BaseDateTimeField";
DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withDefaultYear(3263);
assertTrue(dateTimeFormatter6.isPrinter());
assertNull(dateTimeFormatter6.getPivotYear());
assertTrue(dateTimeFormatter6.isParser());
assertFalse(dateTimeFormatter6.isOffsetParsed());
assertEquals(3263, dateTimeFormatter6.getDefaultYear());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2000, dateTimeFormatter1.getDefaultYear());
assertFalse(dateTimeFormatter1.isOffsetParsed());
assertTrue(dateTimeFormatter1.isPrinter());
assertTrue(dateTimeFormatter1.isParser());
assertNull(dateTimeFormatter1.getPivotYear());
assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
assertNotNull(dateTimeFormatter6);

DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withChronology(gJChronology0);
assertTrue(dateTimeFormatter6.isPrinter());
assertNull(dateTimeFormatter6.getPivotYear());
assertTrue(dateTimeFormatter6.isParser());
assertFalse(dateTimeFormatter6.isOffsetParsed());
assertEquals(3263, dateTimeFormatter6.getDefaultYear());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
assertEquals(3263, dateTimeFormatter7.getDefaultYear());
assertTrue(dateTimeFormatter7.isParser());
assertFalse(dateTimeFormatter7.isOffsetParsed());
assertNull(dateTimeFormatter7.getPivotYear());
assertTrue(dateTimeFormatter7.isPrinter());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isPrinter());
assertTrue(dateTimeZone0.isFixed());
assertEquals("Etc/UTC", dateTimeZone0.getID());
assertEquals("Etc/UTC", dateTimeZone0.toString());
assertEquals("Etc/UTC", dateTimeZone1.getID());
assertEquals("Etc/UTC", dateTimeZone1.toString());
assertTrue(dateTimeZone1.isFixed());
assertEquals(2000, dateTimeFormatter1.getDefaultYear());
assertFalse(dateTimeFormatter1.isOffsetParsed());
assertTrue(dateTimeFormatter1.isPrinter());
assertTrue(dateTimeFormatter1.isParser());
assertNull(dateTimeFormatter1.getPivotYear());
assertNotSame(dateTimeFormatter6, dateTimeFormatter3);
assertNotSame(dateTimeFormatter6, dateTimeFormatter4);
assertNotSame(dateTimeFormatter6, dateTimeFormatter7);
assertNotSame(dateTimeFormatter6, dateTimeFormatter5);
assertNotSame(dateTimeFormatter6, dateTimeFormatter0);
assertNotSame(dateTimeFormatter6, dateTimeFormatter2);
assertNotSame(dateTimeFormatter6, dateTimeFormatter1);
assertNotSame(dateTimeFormatter7, dateTimeFormatter3);
assertNotSame(dateTimeFormatter7, dateTimeFormatter4);
assertNotSame(dateTimeFormatter7, dateTimeFormatter0);
assertNotSame(dateTimeFormatter7, dateTimeFormatter2);
assertNotSame(dateTimeFormatter7, dateTimeFormatter1);
assertNotSame(dateTimeFormatter7, dateTimeFormatter6);
assertNotSame(dateTimeFormatter7, dateTimeFormatter5);
assertNotSame(dateTimeFormatter0, dateTimeFormatter5);
assertNotSame(dateTimeFormatter0, dateTimeFormatter7);
assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
assertNotSame(dateTimeFormatter0, dateTimeFormatter4);
assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
assertNotSame(dateTimeFormatter0, dateTimeFormatter6);
assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
assertNotSame(dateTimeZone0, dateTimeZone1);
assertNotSame(dateTimeZone1, dateTimeZone0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter5);
assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
assertNotSame(dateTimeFormatter1, dateTimeFormatter6);
assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
assertNotSame(dateTimeFormatter1, dateTimeFormatter4);
assertNotSame(dateTimeFormatter1, dateTimeFormatter7);
assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter5));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter6.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter6));
assertFalse(dateTimeFormatter7.equals((Object)dateTimeFormatter5));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter5));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter6));
assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter5));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter6));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter4));
assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
assertNotNull(dateTimeFormatter7);

dateTimeFormatter7.parseMutableDateTime("B8YUVJ_+i;tp//|]");

[MASTER] 03:56:52.952 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'DateTimeFormatter_ESTest' to results/Time-7/org.joda.time.format.DateTimeFormatter/BBC-F0-100/tests/6
* Done!

* Computation finished
