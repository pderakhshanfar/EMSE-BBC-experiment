/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:20:32 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.ResolverStyle;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      timeSeries1.setMaximumItemCount(23);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(23, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 55);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, ", but the TimeSeries is expecting an instance of ", "");
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 1241);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1241);
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (double) 1241);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1356.65947184321);
      timeSeries0.update((RegularTimePeriod) fixedMillisecond1, (Number) 53);
      assertEquals(1356.65947184321, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 59);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1078);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 23);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 59);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1078);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) bigInteger0);
      timeSeries0.getRawDataItem(fixedMillisecond0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 59);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-752.15));
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 785.1889847797878);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(10.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2620);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "IIV)(,rCt$?ve#4;+", "");
      timeSeries0.setRangeDescription("-&gCuX`!IOb={");
      assertEquals("-&gCuX`!IOb={", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.delete((-350), Integer.MAX_VALUE);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-229.6760410801117), true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals((-229.6760410801117), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-70);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(186.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.getValue(0);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Class<ResolverStyle> class0 = ResolverStyle.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.getTimePeriodClass();
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.getTimePeriod(0);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.getRawDataItem(0);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1601);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, ", but the TimeSeries is expecting an instance of ", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(", but the TimeSeries is expecting an instance of ", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 1241);
      timeSeries0.getNextTimePeriod();
      assertEquals(1241.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 59);
      double double0 = timeSeries0.getMinY();
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(59.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Week week0 = new Week((-1652), (-1667));
      TimeSeries timeSeries0 = new TimeSeries(week0, "Yo4pwZHe|,7", "B");
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) (-1652));
      double double0 = timeSeries0.getMinY();
      assertEquals((-1652.0), timeSeries0.getMaxY(), 0.01);
      assertEquals((-1652.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      double double0 = timeSeries0.getMaxY();
      assertEquals(23.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-169), (-169), (-179));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(623);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) (-169), false);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-169.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-169.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "&");
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 1);
      timeSeries0.getItemCount();
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 23);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "8HG)Oa(v6v#Fq7f$", " ]+Yf7y(0R,");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(" ]+Yf7y(0R,", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("8HG)Oa(v6v#Fq7f$", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(494);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1135.373551457567));
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(23, 23);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(2659, 2058005162);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 0);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-334.34299757044));
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "m.]T&f7.8", "Description");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-177L));
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "You are trying to add data where the time period class is ", "JA86H");
      Float float0 = new Float((double) 3004);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-1349), (Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("])", "])", "])");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((-1070L), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Sk-_KpTxX<|i3", "Sk-_KpTxX<|i3", "Sk-_KpTxX<|i3");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      ArrayList<FixedMillisecond> arrayList0 = new ArrayList<FixedMillisecond>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      arrayList0.add(fixedMillisecond0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.time.RegularTimePeriod", "A;ajzDOr<=9ry", "org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-2620));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("og.jfree.chart.til.SortOrder", "%", "og.jfree.cFar_.til.S>rtOrder");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(1241);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      LinkedList<Year> linkedList0 = new LinkedList<Year>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      LinkedList<Year> linkedList0 = new LinkedList<Year>();
      Year year0 = new Year(23);
      linkedList0.add(year0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("og.jfree.chart.til.SortOrder", "%", "og.jfree.cFar_.til.S>rtOrder");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.time.RegularTimePeriod");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getIndex(fixedMillisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(2.0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Year year0 = new Year(952);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((Integer) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) year0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      ArrayList<DefaultTableModel> arrayList0 = new ArrayList<DefaultTableModel>();
      Vector<Second> vector0 = new Vector<Second>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      arrayList0.add(defaultTableModel0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.delete(3310, 2958465, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3310, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2259), 1997, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2747), (-306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.delete(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, ", but the TimeSeries is expecting an instance of ", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 1241);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("og.jfree.chart.til.SortOrder", "%", "og.jfree.cFar_.til.S>rtOrder");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      Minute minute0 = new Minute();
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Vector<FixedMillisecond> vector0 = new Vector<FixedMillisecond>();
      JList<FixedMillisecond> jList0 = new JList<FixedMillisecond>(vector0);
      List<FixedMillisecond> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2581);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      ArrayList<DefaultTableModel> arrayList0 = new ArrayList<DefaultTableModel>();
      Vector<Second> vector0 = new Vector<Second>(0, 23);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      arrayList0.add(defaultTableModel0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(5, hour0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) 3);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.chart.util.SortOrder", "org.jfree.data.jdbc.JDBCXYDataset");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1477L);
      TimeSeries timeSeries0 = new TimeSeries("og.jfree.cFar_.til.S>rtOrder", "Null 'date' argument.", (String) null);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0, "Y5GwL3&", "");
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 1);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1642L);
      Day day0 = new Day(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1-January-1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 1241);
      Week week0 = new Week(1241, 1241);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2592);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "Year constructor: year (", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-2931.569080081386));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond[] fixedMillisecondArray0 = new FixedMillisecond[1];
      JList<FixedMillisecond> jList0 = new JList<FixedMillisecond>(fixedMillisecondArray0);
      List<FixedMillisecond> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Stack<RegularTimePeriod> stack0 = new Stack<RegularTimePeriod>();
      stack0.add((RegularTimePeriod) hour0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3907L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.FRANCE;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, (String) null, "You are trying to add data where the time period class ");
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (-1095.6));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, 1545.69678784074, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q1/1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      timeSeries0.data = (List) linkedList0;
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 1.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 1.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 1.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("])", "])", "])");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-341.0172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "Unable to add cloned data item.", ")>\"j+-oZ(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2592);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(59, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 785.1889847797878);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.removeAgedItems(false);
      assertEquals(10.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.removeAgedItems(false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("S+fR[pTbxX<|3");
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      timeSeries0.add(regularTimePeriod0, (Number) 23);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (-261.7175041734642));
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.update(0, (Number) bigInteger0);
      assertEquals((-261.7175041734642), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.update(0, (Number) 0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(494);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries("");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-1562.6938421574));
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(955, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~k?XN|[", "Gl#IZ'9j");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, "'! dsy1?\"PYw/hG MJ");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("'! dsy1?\"PYw/hG MJ", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      timeSeries0.add(regularTimePeriod0, Double.NaN, true);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Hour hour0 = new Hour();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (-303.3804837));
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(4L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (double) 23, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, Double.NaN);
      Week week0 = new Week(6, 4);
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Hour hour0 = new Hour();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "tUnX/GorDxfE.Q", "tUnX/GorDxfE.Q");
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-1398.8989));
      FixedMillisecond fixedMillisecond2 = new FixedMillisecond((-170L));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, 1241.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond2, (Number) 23);
      timeSeries0.hashCode();
      assertEquals((-1398.8989), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Hour hour0 = new Hour();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "tUnX/GorDxfE.Q", "tUnX/GorDxfE.Q");
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-1398.8989));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, 1241.0);
      timeSeries0.hashCode();
      assertEquals(1241.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.hashCode();
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "7q+", (String) null);
      timeSeries0.hashCode();
      assertEquals("7q+", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, "");
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries timeSeries1 = new TimeSeries(hour0);
      timeSeries1.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      timeSeries1.setMaximumItemCount(23);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(23, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = new TimeSeries(hour0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      timeSeries1.timePeriodClass = class0;
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("og.jfree.chart.til.SortOrder", "og.jfree.chart.til.SortOrder", "og.jfree.cFar_.til.S>rtOrder");
      TimeSeries timeSeries1 = new TimeSeries("og.jfree.chart.til.SortOrder", "og.jfree.chart.til.SortOrder", "wgm!25S@#xdn");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("og.jfree.chart.til.SortOrder", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      TimeSeries timeSeries1 = new TimeSeries("wgm!25S@#xdn");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      boolean boolean0 = timeSeries0.equals(hour0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, "", "");
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond((-4075L));
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, "&7!1TXUh", "&7!1TXUh");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(23, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "og.jfree.chart.til.SortOrder");
      MockDate mockDate0 = new MockDate(1604, 91, 28, 1029, 2401, (-1359));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-4), (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org2jfreePchart.util.SotOrder");
      timeSeries0.delete((-312), Integer.MAX_VALUE, false);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 23);
      timeSeries0.delete(0, 0, true);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2592);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(4, (-5438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      MockDate mockDate0 = new MockDate(59, 1078, 365, (-2556), 2);
      Hour hour0 = new Hour(mockDate0);
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2592);
      Date date0 = spreadsheetDate0.toDate();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-2.147483648E9));
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      timeSeries0.clear();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Week week0 = new Week(0, 0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.removeAgedItems((-1855L), true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Week week0 = new Week(0, 0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.removeAgedItems((-1855L), false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      timeSeries0.removeAgedItems((long) (-1723), true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.removeAgedItems(1L, false);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1241);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) bigInteger0);
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      timeSeries0.setMaximumItemAge(0L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) bigInteger0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries("", "", (String) null);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (-1.0));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(fixedMillisecond0);
      assertNotNull(timeSeriesDataItem0);
      
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 23);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 23);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Week week0 = new Week((-1652), (-1667));
      TimeSeries timeSeries0 = new TimeSeries(week0, "Yo4pwZHe|,7", "B");
      timeSeries0.add((RegularTimePeriod) week0, (double) 53);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) (-1652));
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "W9", "W9");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 2607);
      Week week0 = new Week(Integer.MAX_VALUE, 3);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 1);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 1241);
      TimeSeries timeSeries1 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "wgm!25S@#xdn");
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1241.0, timeSeries0.getMinY(), 0.01);
      assertNotSame(timeSeries1, timeSeries2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1135.373551457567));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-1135.373551457567), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1241);
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (double) 1241);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1356.65947184321);
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) null);
      assertEquals(1241.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) null);
      timeSeries0.update(0, (Number) null);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Week week0 = new Week(1241, 1241);
      TimeSeries timeSeries0 = new TimeSeries(week0, "& FL}IS", "");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1241);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 23);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (-1519.300260250248));
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-1519.300260250248));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-2), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("og.jfree.chart.til.SortOrder", "og.jfree.chart.til.SortOrder", "og.jfree.cFar_.til.S>rtOrder");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Week week0 = new Week((-1652), (-1667));
      TimeSeries timeSeries0 = new TimeSeries(week0, "Yo4pwZHe|,7", "B");
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals("B", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Yo4pwZHe|,7", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(5, hour0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) 3);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.getTimePeriods();
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      timeSeries0.getRawDataItem(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "W9", "W9");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 2607);
      Week week0 = new Week(Integer.MAX_VALUE, 3);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(2607.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("& FL}IS");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-942L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1135), (-49), 2958465, 251, 2592);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(5, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.NaN);
      timeSeries0.update(0, (Number) 23);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2747), (-306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertTrue(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(1960);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1960, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, "There is no database to execute the query.", "");
      timeSeries0.getTimePeriodClass();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("There is no database to execute the query.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.chart.util.SortOrder");
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.chart.util.SortOrder", "org.jfree.chart.util.SortOrder");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.chart.util.SortOrder", "org.jfree.data.jdbc.JDBCXYDataset");
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription("org.jfree.data.jdbc.JDBCXYDataset");
      assertEquals("org.jfree.data.jdbc.JDBCXYDataset", timeSeries0.getDomainDescription());
  }
}
