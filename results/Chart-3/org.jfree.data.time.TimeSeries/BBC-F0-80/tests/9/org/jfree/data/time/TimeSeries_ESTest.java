/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:16:27 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, Double.NaN);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, 2992.08);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
      TimeSeries timeSeries1 = new TimeSeries(millisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) year0, 2138.39573778517);
      timeSeries1.setMaximumItemCount(9999);
      Object object0 = timeSeries1.clone();
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(9999, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      timeSeries1.setMaximumItemAge(9999);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9999L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (-1900.069281372));
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 103, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, regularTimePeriod0);
      assertEquals("X6", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("X6", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "XLb6", "XLb6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      timeSeries0.add(regularTimePeriod0, (double) 2216, false);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(2130);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, 1.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.5);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, true);
      timeSeries0.add(regularTimePeriod0, (double) 1, true);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(0);
      TimeSeries timeSeries0 = new TimeSeries(year1);
      timeSeries0.add((RegularTimePeriod) year1, (double) 0, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, true);
      timeSeries0.add(regularTimePeriod0, (double) 1, true);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Year year0 = new Year((-1444));
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (double) 0, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "Q1/2014", (String) null);
      timeSeries0.setRangeDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Q1/2014", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(17L, 17L);
      TimeSeries timeSeries0 = new TimeSeries(instant0, "", ",s");
      timeSeries0.setDomainDescription("Ez(_?T");
      assertEquals("Ez(_?T", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, true);
      timeSeries0.add(regularTimePeriod0, (double) 1, true);
      timeSeries0.getValue(1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.delete((-2147483647), 151);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-1664.70031614));
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getTimePeriodClass();
      assertEquals((-1664.70031614), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
      timeSeries0.getRawDataItem(0);
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("X6", (String) null, (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(17L, 17L);
      TimeSeries timeSeries0 = new TimeSeries(instant0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year1, (double) (-9999), false);
      timeSeries0.getNextTimePeriod();
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(86);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "COgx;PQz%}#c65WAMX", "COgx;PQz%}#c65WAMX");
      Date date0 = serialDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 9999);
      timeSeries0.getNextTimePeriod();
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0, timeZone0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "HWt{=K,1.DB*utSX@[", "HWt{=K,1.DB*utSX@[");
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, true);
      double double0 = timeSeries0.getMinY();
      assertEquals(9999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(17L, 17L);
      Year year0 = new Year(400);
      TimeSeries timeSeries0 = new TimeSeries(instant0);
      timeSeries0.add((RegularTimePeriod) year0, (-3488.1577), true);
      double double0 = timeSeries0.getMinY();
      assertEquals((-3488.1577), timeSeries0.getMaxY(), 0.01);
      assertEquals((-3488.1577), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1646.81647885846, 1646.81647885846);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      Minute minute0 = new Minute();
      Second second0 = new Second(554, minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 9999);
      double double0 = timeSeries0.getMaxY();
      assertEquals(9999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-3890.83330919));
      timeSeries0.add(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-3890.83330919), timeSeries0.getMinY(), 0.01);
      assertEquals((-3890.83330919), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(79);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "COgx;PQz%}#465WAMX", "COgx;PQz%}#465WAMX");
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("COgx;PQz%}#465WAMX", timeSeries0.getDomainDescription());
      assertEquals("COgx;PQz%}#465WAMX", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 9999);
      timeSeries0.getItemCount();
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, true);
      timeSeries0.getIndex(year0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      timeSeries0.add(regularTimePeriod0, (double) 575L, false);
      timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(575.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("", string0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "d*&$ P8z", "d*&$ P8z");
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.getDataItem(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("%?pfY{b=O'O");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) bigInteger0);
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Byte byte0 = new Byte((byte) (-25));
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) byte0);
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals((-25.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 999);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 31);
      assertNotSame(timeSeries0, timeSeries1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) (-9999));
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, (String) null, "uN}8\"G=Ul?'_kDiZox");
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 9999);
      Byte byte0 = new Byte((byte)34);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) byte0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (-1888.28607235), true);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries1 = new TimeSeries(millisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 0);
      timeSeries1.add(timeSeriesDataItem0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals((-1888.28607235), timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.update(9999, (Number) (-9999));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-202), (Number) (-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4081L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 4081L, false);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((-154L), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) quarter0.LAST_QUARTER);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(quarter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(443.7089609508626, 443.7089609508626);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "Requires start <= end.", ") is not recognised.");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1955L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(2607);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2607, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(474.287, 474.287);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "Requires start <= end.", ") is not recognised.");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-858), 4, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2147483558), 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(2000, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1824), (-1824), (-123));
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1824), 892);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(3, 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 3283);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<Minute> stack0 = new Stack<Minute>();
      stack0.add((Minute) null);
      Vector<Minute> vector0 = new Vector<Minute>(stack0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 4
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) year0, 9999.0, true);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) (-9999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1600);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "<K9wU$[", "<K9wU$[");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (-3890.83330919), true);
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 4.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COg;PQz%}#465WAMv", "COg;PQz%}#465WAMv", "COg;PQz%}#465WAMv");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 847);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COg;PQz%}#465WAMv", "COg;PQz%}#465WAMv", "COg;PQz%}#465WAMv");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) (-9999), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMX");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(86);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "COgx;PQz%}#c65WAMX", "COgx;PQz%}#c65WAMX");
      Date date0 = serialDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, Double.NaN, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(443.7089609508626, 443.7089609508626);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "Requires start <= end.", ") is not recognised.");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 1003.72994, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(86);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "COgx;PQz%}#c65WAMX", "COgx;PQz%}#c65WAMX");
      Date date0 = serialDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (double) 1900);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.XYSeriesCollection");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-617.73598550062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "Null 'data' argument.", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, true);
      timeSeries0.delete(Integer.MIN_VALUE, 3051, true);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), (-1596), (-1596));
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", (String) null);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) (-1596), false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.removeAgedItems(true);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.removeAgedItems(true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("X6", timeSeries0.getDomainDescription());
      assertEquals("X6", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (-1.5812951303601777), true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.add(timeSeriesDataItem0, true);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.addOrUpdate(timeSeriesDataItem1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Month month0 = new Month();
      MockDate mockDate0 = new MockDate(2885, 2885, 2885, 2885, Integer.MAX_VALUE, (-4112));
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, (String) null, (String) null);
      timeSeries0.add((RegularTimePeriod) month0, (double) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      timeSeries0.add(regularTimePeriod0, Double.NEGATIVE_INFINITY, true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 999);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getTimePeriod(0);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.update(0, (Number) 999);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Year year0 = new Year((-1444));
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (double) 0, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 999.0);
      timeSeries0.update(1, (Number) 999);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Month month0 = new Month();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.update(0, (Number) 999);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, true);
      Quarter quarter1 = new Quarter(4, 1);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter1, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, "I2");
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.add((RegularTimePeriod) second0, 1588.321, true);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q3/234 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getIndex(year0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1824), 1, (-123));
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0, " but the series already contains an observation", " but the series already contains an observation");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, long0);
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "B1kJT}I6", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("B1kJT}I6", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1596));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-1664.70031614));
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "B1kJT}I6", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("B1kJT}I6", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WA?v", "COgx;PQz%}#465WA?v", "COgx;PQz%}#465WA?v");
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, Double.NaN);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Year year0 = new Year((-1444));
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (double) 0, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
      LinkedList<Quarter> linkedList0 = new LinkedList<Quarter>();
      timeSeries0.data = (List) linkedList0;
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) (-1444));
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv");
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      RegularTimePeriod regularTimePeriod0 = year1.previous();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add(regularTimePeriod0, (-3688.99713681245), false);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 9999);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.hashCode();
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      timeSeries0.add(regularTimePeriod0, (double) 2216, false);
      timeSeries0.hashCode();
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv");
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("COgx;PQz%}#465WAMv", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv", "COgx;PQz%}#465WAMv");
      timeSeries0.hashCode();
      assertEquals("COgx;PQz%}#465WAMv", timeSeries0.getRangeDescription());
      assertEquals("COgx;PQz%}#465WAMv", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, (-2147483643));
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      timeSeries1.setMaximumItemCount(243);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(243, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      timeSeries1.setMaximumItemAge(0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = new TimeSeries(quarter0, "Time", "nlhFG(0~D");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Year year0 = quarter0.getYear();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = new TimeSeries(year0, "", "Q.D3`n.Oitb3:J");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Q.D3`n.Oitb3:J", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      boolean boolean0 = timeSeries0.equals((Object) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", (String) null);
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1955L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(9223372036854775807L);
      TimeSeries timeSeries0 = new TimeSeries(instant0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(641, (-2457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1955L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-569), 228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, 0.0);
      timeSeries0.delete(0, 0, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) (-9999));
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(9999, (-2), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals("X6", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("X6", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Year year0 = new Year((-1444));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 0, true);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.clear();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Year year0 = new Year(999);
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "_k_bFg+QEPd(&_");
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 3556.1212);
      timeSeries0.removeAgedItems(2209L, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Year year0 = new Year(999);
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "_k_bFg+QEPd(&_");
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 3556.1212);
      assertEquals(3556.1212, timeSeries0.getMinY(), 0.01);
      
      timeSeries0.removeAgedItems(2209L, false);
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      timeSeries0.removeAgedItems((-2034L), false);
      timeSeries0.removeAgedItems((long) 1, false);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(17L, 17L);
      TimeSeries timeSeries0 = new TimeSeries(instant0, "", ",s");
      timeSeries0.removeAgedItems((-1295L), true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(",s", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv");
      Class<TimeSeries> class0 = TimeSeries.class;
      timeSeries0.timePeriodClass = class0;
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.TimeSeries.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "B1kJT}I6", "");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      TimeSeries timeSeries1 = new TimeSeries(mockDate0, "X6", "X6");
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (-1888.28607235), true);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-1888.28607235), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-9999));
      TimeSeries timeSeries0 = new TimeSeries(year1);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 9999);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
      Year year2 = new Year(977);
      timeSeries0.addOrUpdate((RegularTimePeriod) year2, (-2396.0));
      timeSeries0.update((RegularTimePeriod) year2, (Number) 9999);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
      Year year1 = new Year(977);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (-2396.0));
      timeSeries0.update((RegularTimePeriod) year1, (Number) 9999);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, Double.NaN);
      timeSeries0.update((RegularTimePeriod) millisecond0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update(0, (Number) null);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Year year0 = quarter0.getYear();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) year0, (Number) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year1, (double) (-9999), false);
      timeSeries0.add((RegularTimePeriod) year0, 2576.44808235333, false);
      timeSeries0.setMaximumItemAge(4L);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), (-1596), (-1596), 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, true);
      timeSeries0.add(regularTimePeriod0, (Number) 4);
      assertEquals(2, timeSeries0.getItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Class<Locale> class0 = Locale.class;
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465WAMv");
      Minute minute0 = new Minute();
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("COgx;PQz%}#465W*AMX");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 9999);
      TimeSeries timeSeries1 = new TimeSeries(millisecond0, "", "org.jfree.data.statistics.HistogramType");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, false);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1596), (-1596), 103, 103, 2216, Integer.MAX_VALUE);
      Quarter quarter0 = new Quarter(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "X6", "X6");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1, true);
      timeSeries0.getRawDataItem(quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "B1kJT}I6", "");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.getRawDataItem(millisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("B1kJT}I6", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(999, 999);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("u", "Q.D3`n.Oitb3:J", "Q.D3`n.Oitb3:J");
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (-1.0));
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Object object0 = timeSeries0.clone();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999, false);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(443.7089609508626, 443.7089609508626);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "Requires start <= end.", ") is not recognised.");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1824), 1, (-123));
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1, 892);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Q1/2014");
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("u", "Q.D3`n.Oitb3:J", "Q.D3`n.Oitb3:J");
      timeSeries0.getItems();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Q.D3`n.Oitb3:J", timeSeries0.getDomainDescription());
      assertEquals("Q.D3`n.Oitb3:J", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }
}
