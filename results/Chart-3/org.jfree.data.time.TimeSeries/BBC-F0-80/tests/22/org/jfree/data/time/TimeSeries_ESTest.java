/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:28:17 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeriesDataItem0.setValue(bigInteger0);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries1.setMaximumItemCount(4);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(4, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.createCopy((RegularTimePeriod) minute0, regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 59);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      Year year0 = new Year(mockDate0);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeriesDataItem0.setValue(bigInteger0);
      timeSeries0.update((RegularTimePeriod) minute0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (-900.6));
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals((-900.6), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 4, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (-900.6));
      timeSeries0.getRawDataItem(quarter0);
      assertEquals((-900.6), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.add(regularTimePeriod0, (double) 4);
      timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.addOrUpdate(regularTimePeriod0, (-721.25904654723));
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 1);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.*free.data.tiue.RegularTimePeriod", "org.*free.data.tiue.RegularTimePeriod", "PeA~M!D+G`&z&+VW");
      assertEquals("PeA~M!D+G`&z&+VW", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.*free.data.tiue.RegularTimePeriod", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "V6o>68/mqDf.<:", "?!z2YcMm2");
      assertEquals("V6o>68/mqDf.<:", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("?!z2YcMm2", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getValue(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.delete((-2135619096), 2146224872);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(243);
      Date date0 = spreadsheetDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Month month0 = new Month();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 1);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Day day0 = minute0.getDay();
      timeSeries0.add((RegularTimePeriod) day0, 2.0, false);
      assertEquals(2.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeriesDataItem0.setValue(bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2911, "Range");
      Month month0 = new Month(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, "");
      timeSeries0.add((RegularTimePeriod) month0, 2132.371834352408);
      timeSeries0.getTimePeriodClass();
      assertEquals(2132.371834352408, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Week week0 = new Week(mockDate0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, 1046.85942625);
      timeSeries0.getTimePeriod(1);
      assertEquals(1046.85942625, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.getRawDataItem(0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2911, "Range");
      Month month0 = new Month(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, "");
      String string0 = timeSeries0.getRangeDescription();
      assertNotNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) 90);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getNextTimePeriod();
      assertEquals(90.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      Minute minute0 = new Minute(date0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRpv?y\"(Gicc5", "4+?|sRpv?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 2, false);
      double double0 = timeSeries0.getMinY();
      assertEquals(2.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1881, 1881, 1881);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1881, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-197.02219054402352));
      double double0 = timeSeries0.getMinY();
      assertEquals((-197.02219054402352), timeSeries0.getMaxY(), 0.01);
      assertEquals((-197.02219054402352), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(243);
      Date date0 = spreadsheetDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Month month0 = new Month();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 1);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("qV", "V6o>68/mqDf.<:", "?!z2YcMm2");
      Quarter quarter0 = new Quarter();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (-1154.16));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-1154.16), timeSeries0.getMinY(), 0.01);
      assertEquals((-1154.16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("KfP^3Y>0=zzWIe@t~ (");
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) 90);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getItemCount();
      assertEquals(90.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      Minute minute0 = new Minute(date0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) 90);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getIndex(minute0);
      assertEquals(90.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.getIndex(quarter0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2911, "Range");
      Month month0 = new Month(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.getDataItem(0);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getDataItem(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("Requires star  <=~end.", "Requires star  <=~end.", "Requires star  <=~end.");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals("Requires star  <=~end.", timeSeries1.getRangeDescription());
      assertEquals("Requires star  <=~end.", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("^", "^", "^");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Hour hour0 = new Hour();
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("2", "2", "2");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(494, 494);
      assertEquals("2", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("2", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (-49.59717145566405));
      timeSeries0.createCopy(0, 0);
      assertEquals((-49.59717145566405), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, 1308.6833728361407);
      assertEquals(1308.6833728361407, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, 2.0);
      assertEquals(2.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) quarter0, (Number) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update(7, (Number) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.delete(0, 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-3658), (Number) second0.FIRST_SECOND_IN_MINUTE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) 90);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(1392409281320L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1374.78, 1374.78);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(70.1, 1374.78);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRpv?y\"(Gicc5", "4+?|sRpv?y\"(Gicc5");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("n`*&_>a", "n`*&_>a", "n`*&_>a");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      linkedList0.add(integer0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("n;._>d", "n;._>d", "n;._>d");
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      stack0.add(integer0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, "4+?|sRp]?y\"(Gicc5");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(243);
      Date date0 = spreadsheetDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) quarter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1650.5062160548505, 1650.5062160548505);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1015), 244, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("^", "^", "^");
      // Undeclared exception!
      try { 
        timeSeries0.delete(7, 7, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate(698, (-1010), 2664);
      TimeZone timeZone0 = TimeZone.getTimeZone("Z'~\"Vq, o");
      Locale locale0 = Locale.GERMANY;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0, "", "i@yeuXqV*>F2bhzeA");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1010), 698, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "V6o>68/mqDf.<:", "?!z2YcMm2");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-5379), (-5379));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("?!z2YcMm2", "", "F4vdU Y|aX:{vF]tv");
      Quarter quarter0 = new Quarter();
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?||sRp]?y\"(Gicc5", "4+?||sRp]?y\"(Gicc5", "4+?||sRp]?y\"(Gicc5");
      Vector<Quarter> vector0 = new Vector<Quarter>();
      timeSeries0.data = (List) vector0;
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("2", "2", "2");
      TimeSeries timeSeries1 = timeSeries0.createCopy(520, 520);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries1.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(243);
      Date date0 = spreadsheetDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Month month0 = new Month();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 1);
      Vector<Week> vector0 = new Vector<Week>();
      JList<Week> jList0 = new JList<Week>(vector0);
      List<Week> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, false);
      MockDate mockDate0 = new MockDate(1, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Integer[] integerArray0 = new Integer[3];
      JList<Integer> jList0 = new JList<Integer>(integerArray0);
      List<Integer> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-5L), (-5L));
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      Long long0 = new Long((-5L));
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(535);
      Date date0 = spreadsheetDate0.toDate();
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 7, true);
      Minute minute0 = new Minute(3004, hour0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (-1653.850993));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Vector<Millisecond> vector0 = new Vector<Millisecond>(0);
      JList<Millisecond> jList0 = new JList<Millisecond>(vector0);
      List<Millisecond> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (-49.59717145566405));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 694.30181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      timeSeries0.data = (List) linkedList0;
      linkedList0.addFirst((Integer) 4);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TimeSeries timeSeries0 = new TimeSeries(instant0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2911, "Range");
      Month month0 = new Month(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, "");
      timeSeries0.add((RegularTimePeriod) month0, 2132.371834352408);
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      Minute minute0 = new Minute(date0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRpv?y\"(Gicc5", "4+?|sRpv?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 2, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(70.1, 1374.78);
      Number number0 = xYDataItem0.getY();
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, number0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "1>+GE0gY&zZfU]`o=5P", "1>+GE0gY&zZfU]`o=5P");
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, 0.5);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(70.1, 1375.0);
      Double double0 = (Double)xYDataItem0.getY();
      TimeSeries timeSeries0 = new TimeSeries(double0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1881, 1881, 2);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1881, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1.7976931348623157E308));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 3937 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1881, 1881, 669);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1881, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 2005.73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?||sRp]?y\"(Gicc5", "4+?||sRp]?y\"(Gicc5", "4+?||sRp]?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.delete(0, 0, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2911, "Range");
      Month month0 = new Month(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(2911, (-3147), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 29, 29);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "4+?|sRp]?y\"(Gicc5");
      Quarter quarter1 = new Quarter(date0, simpleTimeZone0);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 1, true);
      timeSeries0.removeAgedItems(true);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.removeAgedItems(true);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      timeSeries0.add((RegularTimePeriod) quarter0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, 4277.358639565651);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(4277.358639565651, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeriesDataItem0.setValue(bigInteger0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setValue((Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(243);
      Date date0 = spreadsheetDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      Month month0 = new Month();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (double) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 1);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) null);
      timeSeries0.update(0, (Number) null);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.add((RegularTimePeriod) quarter1, 1.0);
      timeSeries0.update(1, (Number) 4);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1881, 1881, 1881);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1881, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-197.02219054402352));
      timeSeries0.update(0, (Number) 1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1881, 1881, 2);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1881, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 1881.0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.getIndex(quarter0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("2", "2", "2");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("j", "j", "j");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-2.147483648E9), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", "[c;Rj");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals("[c;Rj", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1881, 1881, 669);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(1881, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(400);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, " XfgAnlg]h`", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(" XfgAnlg]h`", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter2 = new Quarter(1, (-2));
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter2, (-896.8992998979634));
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) bigInteger0);
      timeSeries0.delete((RegularTimePeriod) quarter1);
      assertEquals((-896.8992998979634), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, Double.NaN);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter2 = new Quarter(1, (-2));
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter2, (-896.8992998979634));
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) bigInteger0);
      timeSeries0.hashCode();
      assertEquals((-896.8992998979634), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4391.918226111716);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, Double.NaN);
      timeSeries0.hashCode();
      assertEquals(4391.918226111716, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      timeSeries0.add((RegularTimePeriod) quarter0, Double.NaN);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("F4vdU Y|aX:{vF]tv", (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.setMaximumItemCount(1);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(1, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries1.clear();
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries0.setRangeDescription("',S-[Q7;");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("',S-[Q7;", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      TimeSeries timeSeries1 = new TimeSeries(date0, "", "");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      boolean boolean0 = timeSeries0.equals(minute0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (-224.0600023892));
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      MockDate mockDate0 = new MockDate(182, 3725, 1, (-1614), 695, 182);
      Day day0 = new Day(mockDate0);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
      assertEquals((-224.0600023892), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter1);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("j", "j", "j");
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, (String) null, "2$#uM@k");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-5L), (-5L));
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(4, (-716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-885), 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.delete(1, 1, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (-900.6));
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.clear();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.setMaximumItemAge(4);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, 384.1511939);
      timeSeries0.removeAgedItems((long) 1, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.setMaximumItemAge(4);
      Quarter quarter1 = new Quarter(2, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, 1262.800152615866);
      timeSeries0.removeAgedItems(4L, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.removeAgedItems((long) 4, true);
      timeSeries0.removeAgedItems((-2912L), true);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      timeSeries0.removeAgedItems((-185L), false);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 1);
      timeSeries0.setMaximumItemAge(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.add((RegularTimePeriod) quarter1, 1.0);
      Quarter quarter2 = new Quarter(1, (-2));
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter2, (-896.8992998979634));
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) bigInteger0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(" ", " ", " ");
      Year year0 = new Year(504);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999, true);
      TimeSeries timeSeries1 = new TimeSeries(" ");
      Class<Week> class0 = Week.class;
      timeSeries1.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries1.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "V6o>68/mqDf.<:", "?!z2YcMm2");
      TimeSeries timeSeries1 = new TimeSeries("?!z2YcMm2", "", "F4vdU Y|aX:{vF]tv");
      Quarter quarter0 = new Quarter();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, Double.NaN);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter2 = new Quarter(1, (-2));
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter2, (-895.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) bigInteger0);
      timeSeries0.update(1, (Number) 4);
      assertEquals((-895.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, 300.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (Number) 4);
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) minute0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "the tm peiod ", "the tm peiod ");
      timeSeries0.add((RegularTimePeriod) quarter0, Double.NaN);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) null);
      assertEquals("the tm peiod ", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1132);
      Date date0 = serialDate0.toDate();
      Minute minute0 = new Minute(date0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "[l,9(rd~SAE7hqT_D", "4+?|sRp]?y\"(Gicc5");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (-1.7976931348623157E308));
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?|sRp]?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 1);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) quarter0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      Class<Month> class0 = Month.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("j");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, " U{-", "5<gt2)g'D!)h?)8");
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(" U{-", timeSeries0.getDomainDescription());
      assertEquals("5<gt2)g'D!)h?)8", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (double) (-1L));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(")", "4+?|sRp]?y\"(Gicc5", ")");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, false);
      TimeSeries timeSeries1 = new TimeSeries("4+?|sRp]?y\"(Gicc5");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.getRawDataItem(quarter0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("2", "2", "2");
      Year year0 = new Year(494);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("2", timeSeries0.getDomainDescription());
      assertEquals("2", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "V6o>68/mqDf.<:", "?!z2YcMm2");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      timeSeries0.addOrUpdate(regularTimePeriod0, (-81.342225345));
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(1, 4);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "1>+GE0gY&zZfU]`o=5P", "1>+GE0gY&zZfU]`o=5P");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemAge(4);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(4L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      Date date0 = serialDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "4+?|sRp]?y\"(Gicc5", "4+?|sRp]?y\"(Gicc5");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.getTimePeriodClass();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("j");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-1137.1834603));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }
}
