/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:53:12 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.ParsePosition;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.setMaximumItemCount(9999);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9999, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeZone timeZone0 = TimeZone.getTimeZone("$(.k-");
      Day day1 = new Day(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (double) 281);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
      assertEquals(281.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "iv@d+P6I=/4~[9");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-1081.2968689715033));
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      timeSeries0.add(regularTimePeriod0, (Number) double0, true);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals((-1081.2968689715033), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "y+|T2m)EV", "y+|T2m)EV");
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 3758.787);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) day0, 3758.787);
      timeSeries0.add(timeSeriesDataItem1, true);
      timeSeries0.add(timeSeriesDataItem0, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(8944, (-628), (-1276), (-1276), (-1703));
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "+H=N", "$(.k-");
      RegularTimePeriod regularTimePeriod1 = year0.next();
      timeSeries0.add(regularTimePeriod1, (double) 8944);
      timeSeries0.add((RegularTimePeriod) year0, 614.1577428333713);
      timeSeries0.update(regularTimePeriod0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeZone timeZone0 = TimeZone.getTimeZone("$(.k-");
      Day day1 = new Day(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (double) 281);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) day0, 3758.787);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(timeSeriesDataItem1, true);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "", "iv@d+P6I=/4~[9");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-1081.2968689715033));
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      timeSeries0.add(regularTimePeriod0, (Number) double0, true);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 1013.949);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Double double0 = new Double(133L);
      timeSeries0.add(regularTimePeriod0, (Number) double0, true);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "+H=N");
      timeSeries0.add(regularTimePeriod0, 14.644637813);
      Double double0 = new Double(2.147483647E9);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, true);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Negative 'periods' argument.", "lO1o>4\"c1;e>`XRL", "Negative 'periods' argument.");
      timeSeries0.setRangeDescription("Negative 'periods' argument.");
      assertEquals("lO1o>4\"c1;e>`XRL", timeSeries0.getDomainDescription());
      assertEquals("Negative 'periods' argument.", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate(22, 22, 22, Integer.MAX_VALUE, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$g.k-", "$g.k-");
      timeSeries0.setDomainDescription("{(OB%HC08ACv9~PMh");
      assertEquals("{(OB%HC08ACv9~PMh", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 31);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "+H=N");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 12.636658543498072);
      timeSeries0.getValue(0);
      assertEquals(12.636658543498072, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "$(.k-", "$(.k-");
      timeSeries0.delete((-279), Integer.MAX_VALUE);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("$(.k-", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("$(.k-", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Week week0 = new Week(23, (-272));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(65.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "$(.k-", "$(.k-");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      timeSeries0.getTimePeriodClass();
      assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 1551);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.xy.AbstractXYZDatset", "org.jfree.data.xy.AbstractXYZDatset");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 1551);
      timeSeries0.getTimePeriod(0);
      assertEquals(1551.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", parsePosition0);
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries("yyyy-MM-dd", "{5M234v&4O g", "{5M234v&4O g");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(0);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "(NspF}:", "(NspF}:");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(NspF}:", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("(NspF}:", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(date0, "", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiI'9", "-]2g4tZiI'9");
      timeSeries0.add((RegularTimePeriod) year1, (double) (-9999));
      timeSeries0.getNextTimePeriod();
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 0.5);
      timeSeries0.getNextTimePeriod();
      assertEquals(0.5, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, (-3609), 1551);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "l/:7V2}B[S/KMxS", "v;keL;");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 0.0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Week week0 = new Week(17, 17);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
      double double0 = timeSeries0.getMinY();
      assertEquals(53.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "$(.k-", "$(.k-");
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      double double0 = timeSeries0.getMinY();
      assertEquals((-9999.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 624, 31);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "+H=N");
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 1551);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.xy.AbstractXYZDatset", "org.jfree.data.xy.AbstractXYZDatset");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals("org.jfree.data.xy.AbstractXYZDatset", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 214);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$R.k-", "+H=N");
      timeSeries0.add(regularTimePeriod0, (double) 0);
      Double double0 = new Double(214);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, true);
      Year year0 = new Year(mockDate0);
      timeSeries0.delete((RegularTimePeriod) year0);
      double double1 = timeSeries0.getMaxY();
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      timeSeries0.add(timeSeriesDataItem0, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals(2.147483647E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.add(timeSeriesDataItem0, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-9999.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 59);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      Short short0 = new Short((short) (-2528));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) short0);
      timeSeries0.getItemCount();
      assertEquals((-2528.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "/:[Q}sv>", "/:[Q}sv>");
      timeSeries0.add(regularTimePeriod0, (double) 0);
      Double double0 = new Double(0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, false);
      int int0 = timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(2144527631, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, "nj^~J!!ujPn,q#");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("nj^~J!!ujPn,q#", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "`L4[&I hB,a^1M<8", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("`L4[&I hB,a^1M<8", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.getDataItem(0);
      assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setNotify(false);
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Year year0 = new Year(0);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 1551);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.xy.AbstractXYZDatset", "org.jfree.data.xy.AbstractXYZDatset");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals("org.jfree.data.xy.AbstractXYZDatset", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("iv@d+P6I=/4~[9", "iv@d+P6I=/4~[9", "iv@d+P6I=/4~[9");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, 0.0);
      timeSeries0.add(timeSeriesDataItem0);
      Second second0 = new Second();
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "Z@5>_::,ipbi}^X\"");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(2123, 9999);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "+H=N");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(29, Integer.MAX_VALUE);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1551, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "WjT1(xD.U!{", "WjT1(xD.U!{");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertNotSame(timeSeries0, timeSeries1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1551, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "WjT1(xD.U!{", "WjT1(xD.U!{");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Year year0 = new Year((-2648));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate(281, 281, 281, 281, 281);
      TimeZone timeZone0 = TimeZone.getTimeZone("$(.k-");
      Day day0 = new Day(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 281);
      timeSeriesDataItem0.setSelected(true);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(281.0, timeSeries0.getMinY(), 0.01);
      
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      timeSeries0.add(timeSeriesDataItem0, false);
      TimeSeries timeSeries1 = new TimeSeries("`L4[&I hB,a^1M<8", "", "y)(");
      timeSeries1.add((RegularTimePeriod) fixedMillisecond0, 0.0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "(NspF}:", "(NspF}:");
      // Undeclared exception!
      try { 
        timeSeries0.update(9999, (Number) 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, (-2147483645), 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "NTL", "NTL");
      Double double0 = new Double((-2147483645));
      // Undeclared exception!
      try { 
        timeSeries0.update((-3083), (Number) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "$(.k-", "$(.k-");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((-593L), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiv'9", (String) null);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate(22, Integer.MAX_VALUE, 1107, 22, 22);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1107);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1107, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiv'9", (String) null);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", parsePosition0);
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "org.jfree.data.statistics.DefaultMultiValueCategoryDataset", "yyyy-MM-dd");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1372));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("\"?hp_NBWsyK", "?_-YUjc,G[$q.[v*rY", "\"?hp_NBWsyK");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultMultiValueCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-2575));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("org.ifree.data&statistics.DefaultMultiValueCategoryDataset", parsePosition0);
      TimeSeries timeSeries0 = new TimeSeries(date0, "", "b");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(2, 4082, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(2015, 2015);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Week week0 = new Week((-497), (-497));
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-497), 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Year year0 = new Year((-2648));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(1519, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1519, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Vector<XYDatasetTableModel> vector0 = new Vector<XYDatasetTableModel>();
      JList<XYDatasetTableModel> jList0 = new JList<XYDatasetTableModel>(vector0);
      List<XYDatasetTableModel> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "$(.k-", "$(.k-");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 4387.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      LinkedList<Day> linkedList0 = new LinkedList<Day>();
      timeSeries0.data = (List) linkedList0;
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      linkedList0.add(day0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Day cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      Hour hour0 = new Hour();
      timeSeries1.add((RegularTimePeriod) hour0, (-1788.498401));
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Kk{`eTD0cje1a", " for that time period. Duplicates are not ", " for that time period. Duplicates are not ");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Year year0 = new Year((-2648));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, 2.147483647E9);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period -2648 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 281);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      Double double0 = new Double(3758.787);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) double0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("iv@+P6I=/4~[9", "iv@+P6I=/4~[9", "iv@+P6I=/4~[9");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      Week week0 = new Week(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add("");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 31);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "+H=N");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      timeSeries0.add(timeSeriesDataItem0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Oct 08 07:00:00 GMT 246883 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.time.TimeTableXYDataset");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 23.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "@dX04l4:Z|ov+l", "@dX04l4:Z|ov+l");
      Vector<Object> vector0 = new Vector<Object>(23, (-9999));
      vector0.add((Object) "@dX04l4:Z|ov+l");
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "org.jfree.data.time.TimeSeriesCollection", "org.jfree.data.statistics.DefaultMultiValueCategoryDataset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond((-9999), second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) (-9999));
      timeSeries0.createCopy(0, 0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 59);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      timeSeries0.delete((-2147483647), Integer.MAX_VALUE, true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("$(.k-", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-2.147483648E9));
      timeSeries0.delete((-2147483647), Integer.MAX_VALUE, false);
      assertEquals((-2.147483648E9), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "(NspF}:", "(NspF}:");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-9999), 2, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "$(.k-");
      // Undeclared exception!
      try { 
        timeSeries0.delete(3200, 1039, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "y+|T2m)EV", "y+|T2m)EV");
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 3758.787);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) day0, 3758.787);
      timeSeries0.add(timeSeriesDataItem1, true);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.removeAgedItems(false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 59);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      timeSeries0.removeAgedItems(true);
      assertEquals("$(.k-", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "y+|T2m)EV", "y+|T2m)EV");
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 3758.787);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(3758.787, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 1058.976);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Class<Month> class0 = Month.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 624, 31);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "+H=N");
      timeSeries0.add(regularTimePeriod0, 14.644637813);
      Double double0 = new Double(2.147483647E9);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, true);
      timeSeries0.update(0, (Number) double0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "y+|T2m)EV", "y+|T2m)EV");
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 3758.787);
      timeSeries0.add(timeSeriesDataItem0, false);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      timeSeries0.update(0, (Number) integer0);
      assertEquals(400.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 281);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) day0, 3758.787);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(timeSeriesDataItem1, true);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
      assertEquals(3758.787, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimeSeries timeSeries0 = new TimeSeries("", "", (String) null);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
      Quarter quarter0 = new Quarter();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "Z@5>_::,ipbi}^X\"");
      timeSeries0.getIndex(year0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "$(.k-", "$(.k-");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 1551);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.xy.AbstractXYZDatset", "org.jfree.data.xy.AbstractXYZDatset");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Year year0 = new Year((-2648));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeZone timeZone0 = TimeZone.getTimeZone("y-");
      Day day1 = new Day(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, (double) 281);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add((RegularTimePeriod) day0, Double.NaN);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 0.5);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeriesDataItem0.setValue((Number) null);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 1058.976);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem(regularTimePeriod0, (-4779.276));
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(timeSeriesDataItem1, true);
      timeSeries0.hashCode();
      assertEquals((-4779.276), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 281);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.hashCode();
      assertEquals(281.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiv'9", (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("-]2g4tZiv'9", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("iv@d+P6I=/4~[9", (String) null, "<T}C%SzQ");
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("<T}C%SzQ", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      timeSeries1.setMaximumItemCount(9999);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9999, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.setMaximumItemAge(9999);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9999L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Year year0 = new Year((-2648));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      TimeSeries timeSeries1 = new TimeSeries(year0, ".TP", ".TP");
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries1);
      boolean boolean0 = timeSeries2.equals(timeSeries0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries("", "", (String) null);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "No observation for x = ", "org.jfree.data.time.Second");
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      boolean boolean0 = timeSeries0.equals(day0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.data.time.Second", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("No observation for x = ", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "+H=N");
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("$(.k-", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("+H=N", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("iv@d+P6I/4~[9", "iv@d+P6I/4~[9", "iv@d+P6I/4~[9");
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      Short short0 = new Short((short) (-541));
      timeSeries0.add(regularTimePeriod0, (Number) short0);
      Quarter quarter0 = new Quarter();
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) quarter0);
      assertEquals((-541.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeZone timeZone0 = TimeZone.getTimeZone("$(.k-");
      Day day1 = new Day(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 3758.787);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
      assertEquals(3758.787, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "y+|T2m)EV", "y+|T2m)EV");
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) day0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-");
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1551, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "WjT1(xD.U!{", "WjT1(xD.U!{");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, (-2144669120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", ".E~ld", (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-16), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "$(.k-");
      // Undeclared exception!
      try { 
        timeSeries0.delete(701, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 1058.976);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem(regularTimePeriod0, (-4779.276));
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(timeSeriesDataItem1, true);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiI'9", "-]2g4tZiI'9");
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("tm+N");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 17);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, bigInteger0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "No observation for x = ", "org.jfree.data.time.Second");
      timeSeries0.clear();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("No observation for x = ", timeSeries0.getDomainDescription());
      assertEquals("org.jfree.data.time.Second", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockDate mockDate0 = new MockDate(12, 12, 12, 29, 120);
      Hour hour0 = new Hour(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries("t'hLP&5AVE", "Fg$p}", "");
      timeSeries0.setMaximumItemAge(1L);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 29);
      assertEquals(29.0, timeSeries0.getMinY(), 0.01);
      
      timeSeries0.removeAgedItems((long) 23, false);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockDate mockDate0 = new MockDate(12, 12, 12, 12, 120);
      Hour hour0 = new Hour(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries("t'hLP&5AVE", "Fg$p}", "t'hLP&5AVE");
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 12);
      timeSeries0.removeAgedItems(2L, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("8,:Qj`_y", "$(.k-", "$(.k-");
      timeSeries0.removeAgedItems(2169L, false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("$(.k-", timeSeries0.getDomainDescription());
      assertEquals("$(.k-", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.removeAgedItems((long) 9999, true);
      timeSeries0.removeAgedItems((long) 9999, true);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "/:[Q}sv>", "/:[Q}sv>");
      timeSeries0.add(regularTimePeriod0, (double) 0);
      Double double0 = new Double(0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, false);
      timeSeries0.setMaximumItemAge(0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 1551);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond1, "org.jfree.data.xy.AbstractXYZDatset", "org.jfree.data.xy.AbstractXYZDatset");
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (double) 1551);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate(281, 281, 281, 281, 281);
      TimeZone timeZone0 = TimeZone.getTimeZone("$(.k-");
      Day day0 = new Day(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 281);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertTrue(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
      
      timeSeriesDataItem1.setValue((Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem1);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 17);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, bigInteger0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) (byte)32);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 281);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem1);
      assertEquals(281.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, (-1788.498401));
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) Integer.MAX_VALUE);
      timeSeries0.add(timeSeriesDataItem0, false);
      TimeSeries timeSeries1 = new TimeSeries("`L4[&I hB,a^1M<8", "", "y)(");
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(2.147483647E9, timeSeries0.getMinY(), 0.01);
      assertEquals(2.147483647E9, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, (-1788.498401));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-1788.498401), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      timeSeries0.update(0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiI'9", "-]2g4tZiI'9");
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.add((RegularTimePeriod) year1, (double) (-9999));
      timeSeries0.update((RegularTimePeriod) year0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "org.jfree.data.xy.DefaultHighLowDataset", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.update(0, (Number) null);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.xy.DefaultHighLowDataset", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) (-9999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, Double.NaN);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) day0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 1058.976);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem(regularTimePeriod0, 1058.976);
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(timeSeriesDataItem1, true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1058.976, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", parsePosition0);
      TimeSeries timeSeries0 = new TimeSeries("yyyy-MM-dd", "{5M234v&4O g", "{5M234v&4O g");
      Second second0 = new Second(date0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
      Day day0 = new Day(date0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (double) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "$(.k-", "$(.k-");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Week week0 = new Week(0, 0);
      TimeSeries timeSeries0 = new TimeSeries("", "", (String) null);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("iv@d+P6I=/4~[9", "iv@d+P6I=/4~[9", "U.#Y99G%");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
      Long long0 = new Long(4);
      TimeSeries timeSeries1 = new TimeSeries(long0, "", "");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Year year0 = new Year((-2648));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getTimePeriods();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", parsePosition0);
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, "org.jfree.data.statistics.DefaultMultiValueCategoryDataset", "yyyy-MM-dd");
      timeSeries0.getRawDataItem(hour0);
      assertEquals("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals("yyyy-MM-dd", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "Z@5>_::,ipbi}^X\"");
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Week week0 = new Week(0, 2000);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiv'9", "-]2g4tZiv'9");
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.add(regularTimePeriod0, (double) 9999);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Year year0 = new Year(53);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("$(.k-", "No observation for x = ", "org.jfree.data.time.Second");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("org.jfree.data.time.Second", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("No observation for x = ", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "-]2g4tZiI'9", "-]2g4tZiI'9");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 17);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(fixedMillisecond0, bigInteger0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(2015, 2015);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2015, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null);
      TimeSeries timeSeries1 = new TimeSeries(year0, (String) null, "");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, Integer.MAX_VALUE, 17);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "$(.k-", "");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("$(.k-", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 281);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.add(timeSeriesDataItem0, true);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6, 7, 7, 7, 281, 7);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.getItems();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.statistics.DefaultMultiValueCategoryDataset");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }
}
