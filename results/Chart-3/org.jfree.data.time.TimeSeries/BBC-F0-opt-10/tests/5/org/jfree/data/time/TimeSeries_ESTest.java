/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:40:12 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.general.DefaultKeyedValueDataset", "org.jfree.data.general.DefaultKeyedValueDataset");
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.general.DefaultKeyedValueDataset", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.general.DefaultKeyedValueDataset", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemCount(1);
      boolean boolean0 = object0.equals(timeSeries0);
      assertEquals(1, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      timeSeries1.setMaximumItemAge(0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 4, false);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, 1167.50588, true);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.add(regularTimePeriod0, (Number) 1, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.general.DefaultKeyedValueDataset", "org.jfree.data.general.DefaultKeyedValueDataset");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 4, true);
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 1, false);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (-2405.17143507015), false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 1, true);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999, false);
      timeSeries0.getValue(0);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(".\"$@]Bx9mDp6R~zo", ".\"$@]Bx9mDp6R~zo", ".\"$@]Bx9mDp6R~zo");
      timeSeries0.delete((-1168), Integer.MAX_VALUE);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(".\"$@]Bx9mDp6R~zo", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(".\"$@]Bx9mDp6R~zo", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, 999.0);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
      Class<Object> class0 = Object.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "+X9%sn${r*_U9<~", "+X9%sn${r*_U9<~");
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) bigInteger0, false);
      timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) bigInteger0, false);
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(10.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
      timeSeries0.getTimePeriodClass();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
      timeSeries0.getTimePeriod(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("permitted.  Try using the addOrUpdate() method.", "?B>l$(Rn", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(string0);
      assertEquals("?B>l$(Rn", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getEnd();
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) null, true);
      timeSeries0.getNextTimePeriod();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) bigInteger0, false);
      double double0 = timeSeries0.getMinY();
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, false);
      double double0 = timeSeries0.getMinY();
      assertEquals((-30000.0), timeSeries0.getMaxY(), 0.01);
      assertEquals((-30000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "Null 'start' argument.", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 0, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals(999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-30000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      timeSeries0.getItemCount();
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 3, 5, 0, (-621.0));
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0);
      Second second0 = new Second(mockDate0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 3, false);
      Week week0 = new Week(777, 5111);
      timeSeries0.getIndex(week0);
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 1, true);
      timeSeries0.getIndex(quarter0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.setDomainDescription("");
      timeSeries0.getDomainDescription();
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, (String) null);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      timeSeries0.getDataItem(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, false);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, (String) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy(999, 1977);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (-1008.9809981), false);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, 2321.0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2321.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, false);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-30000.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) serialDate0.SUNDAY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.update(364, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 364, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.update((-6), (Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "k=");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(9223372036854775807L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-2296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "mYpVwaOtG'l&%", "mYpVwaOtG'l&%");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-2816));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      Vector<Millisecond> vector0 = new Vector<Millisecond>();
      timeSeries0.data = (List) vector0;
      vector0.add(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.equals(timeSeries1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(".\"$@]Bx9mDp6R~zo", ".\"$@]Bx9mDp6R~zo", ".\"$@]Bx9mDp6R~zo");
      Vector<Month> vector0 = new Vector<Month>();
      timeSeries0.data = (List) vector0;
      vector0.add((Month) null);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2288), Integer.MAX_VALUE, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(400, 400, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 400, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, ">k`~6N}G", ">k`~6N}G");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-399), 243, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(999, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(4, (-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Vector<LinkedList<XYDatasetTableModel>> vector0 = new Vector<LinkedList<XYDatasetTableModel>>(0, 59);
      timeSeries0.data = (List) vector0;
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, true);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(3, 1610612736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      Vector<Millisecond> vector0 = new Vector<Millisecond>();
      timeSeries0.data = (List) vector0;
      vector0.add(millisecond0);
      try { 
        timeSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) serialDate0.THIRD_WEEK_IN_MONTH);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-2203.83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (-1187.11409799082));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      JList<Object> jList0 = new JList<Object>();
      List<Object> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) integer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, 2321.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Vector<LinkedList<XYDatasetTableModel>> vector0 = new Vector<LinkedList<XYDatasetTableModel>>(0, Integer.MAX_VALUE);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries("Aa}i`YdaKAK@ePm?", "", "jP8k:");
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, true);
      timeSeries0.delete((-2147483606), 59, true);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.general.DefaultKeyedValueDataset", "org.jfree.data.general.DefaultKeyedValueDataset");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 4, true);
      timeSeries0.removeAgedItems(false);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "is ", ".");
      timeSeries0.removeAgedItems(true);
      assertEquals("is ", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(".", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "org.jfree.chart.util.SortOrder", (String) null);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.chart.util.SortOrder", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, Double.NaN, true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
      
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      Minute minute0 = new Minute();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (-517.16));
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.general.DefaultKeyedValueDataset", "org.jfree.data.general.DefaultKeyedValueDataset");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 4, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.update(1, (Number) bigInteger0);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, Double.NaN, true);
      timeSeries0.update(0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) second0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
      
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter1, (Number) 4);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      MockDate mockDate0 = new MockDate(999, 90, 1, 1, 2, 999);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 4);
      Hour hour0 = new Hour(mockDate0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 999, true);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 4);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.getIndex(quarter0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("permitted.  Try using the addOrUpdate() method.", "?B>l$(Rn", (String) null);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("?B>l$(Rn", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(9223372036854775807L, long0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 3, 5, 0, (-621.0));
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "GfX|q_QPQZ=");
      String string0 = timeSeries0.getDomainDescription();
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GfX|q_QPQZ=", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "mYpVwaOtG'l&%", "mYpVwaOtG'l&%");
      // Undeclared exception!
      try { 
        timeSeries0.getValue(366);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 366, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 1, true);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, Double.NaN, true);
      timeSeries0.delete((RegularTimePeriod) second0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) null, true);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, Double.NaN, true);
      timeSeries0.hashCode();
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 3, 5, 0, (-621.0));
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(1, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 1, true);
      TimeSeries timeSeries1 = new TimeSeries(quarter1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries1.addOrUpdate(timeSeriesDataItem0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.setMaximumItemAge(12L);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(12L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 0L);
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      TimeSeries timeSeries1 = new TimeSeries(mockDate0, "i0v", "s");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("i0v", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("s", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(207);
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      TimeSeries timeSeries1 = new TimeSeries(integer0, "O2hJLkiE", "O2hJLkiE");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("O2hJLkiE", timeSeries1.getRangeDescription());
      assertEquals("O2hJLkiE", timeSeries1.getDomainDescription());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(1);
      boolean boolean0 = timeSeries0.equals(week0.LAST_WEEK_IN_YEAR);
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("i0v", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("i0v", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      Day day0 = new Day(mockDate0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 0, true);
      timeSeries0.createCopy((RegularTimePeriod) day0, regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(1, second0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(4, (-1478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999, false);
      timeSeries0.delete(0, 0, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, (-396), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 4, false);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) bigInteger0, false);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Week week0 = new Week((-1), 274);
      timeSeries0.add((RegularTimePeriod) week0, (Number) week0.FIRST_WEEK_IN_YEAR, true);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.removeAgedItems(0L, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Week week0 = new Week(274, (-1126));
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "");
      timeSeries0.add((RegularTimePeriod) week0, (Number) week0.FIRST_WEEK_IN_YEAR, true);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.removeAgedItems(24L, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      timeSeries0.removeAgedItems(1982L, true);
      timeSeries0.removeAgedItems(1982L, true);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.removeAgedItems(3113L, true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.general.DefaultKeyedValueDataset", "org.jfree.data.general.DefaultKeyedValueDataset");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 4, true);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.general.DefaultKeyedValueDataset", "org.jfree.data.general.DefaultKeyedValueDataset");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 4);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 4, true);
      timeSeries0.setMaximumItemAge(1);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getStart();
      TimeSeries timeSeries0 = new TimeSeries(date0, "", (String) null);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (-2.147483648E9));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 1, true);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "i0v", "i0v");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      Day day0 = new Day(mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) null);
      timeSeries0.update(0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.general.DefaultKeyedValueDataset", "org.jfree.data.general.DefaultKeyedValueDataset");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, false);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 1, false);
      timeSeries0.update(1, (Number) 1);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) millisecond0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getStart();
      TimeSeries timeSeries0 = new TimeSeries(date0, "", (String) null);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) millisecond0, 1167.50588);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, (String) null);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, Double.NaN);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 1, false);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Integer integer0 = new Integer(207);
      TimeSeries timeSeries0 = new TimeSeries(integer0, "O2hJLkiE", "O2hJLkiE");
      Class<TimeSeries> class0 = TimeSeries.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.TimeSeries.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, (String) null);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Integer integer0 = new Integer(207);
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      TimeSeries timeSeries1 = new TimeSeries(integer0, "O2hJLkiE", "O2hJLkiE");
      timeSeries1.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("+<Pb=abjN*g8Xj/X\"H");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1, false);
      timeSeries0.getRawDataItem(quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      Week week0 = new Week();
      timeSeries0.getRawDataItem(week0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.getDataItem((RegularTimePeriod) second0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getStart();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 195.93916, (-621.0), (-1224.16957), 1537.572575047, (-377.218462));
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "\"|OBiZ~2D");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-814L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (Number) 1, true);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 3, 5, 0, (-621.0));
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "GfX|q_QPQZ=");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-97));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "0", "0");
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemCount(4);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(4, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("GfX|q_QPQZ=", "GfX|q_QPQZ=", "GfX|q_QPQZ=");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (-0.056375543292130174));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", (String) null, ", but the TimeSeries is expecting an instance of ");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2218), 366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, (-517.16));
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, "");
      assertEquals("", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription("_Z@2^he}o'x");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, (String) null, (String) null);
      timeSeries0.setDomainDescription((String) null);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }
}
