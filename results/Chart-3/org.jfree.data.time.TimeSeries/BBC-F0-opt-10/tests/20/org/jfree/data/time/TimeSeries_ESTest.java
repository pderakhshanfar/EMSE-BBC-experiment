/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:54:42 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemAge(9999);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9999L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year1);
      timeSeries0.add((RegularTimePeriod) year1, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year1);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      timeSeries0.createCopy((RegularTimePeriod) year0, regularTimePeriod0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      timeSeries0.setMaximumItemAge(0L);
      Year year1 = new Year((-9999));
      timeSeries0.add((RegularTimePeriod) year1, (Number) 9999);
      timeSeries0.add((RegularTimePeriod) year0, (Number) null, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), false);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), false);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      Year year1 = new Year(973);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 973);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      timeSeries0.add(regularTimePeriod0, (Number) 9999);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, "org.jfree.data.time.TimeSeries", "org.jfree.data.time.TimeSeries");
      timeSeries0.setRangeDescription("mpo>Nn%SUN4");
      assertEquals("mpo>Nn%SUN4", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-9999));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.add((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.getValue(1);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "zs2'p:%!f7CW)B", "zs2'p:%!f7CW)B");
      Float float0 = new Float(0.0F);
      timeSeries0.add((RegularTimePeriod) month0, (Number) float0, true);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.update((RegularTimePeriod) year0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.getTimePeriodClass();
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) null, true);
      timeSeries0.getTimePeriod(0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) null);
      timeSeries0.getRawDataItem(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Year year0 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.getNextTimePeriod();
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999, false);
      timeSeries0.getNextTimePeriod();
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Day day0 = new Day();
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 0);
      timeSeries0.clear();
      timeSeries0.add(timeSeriesDataItem0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) year0.MAXIMUM_YEAR);
      timeSeries0.add(timeSeriesDataItem0, true);
      double double0 = timeSeries0.getMinY();
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      double double0 = timeSeries0.getMinY();
      assertEquals((-9999.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "org.jfree.data.time.RegularTimePeriod", "/k.'jU]4E<y");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      double double0 = timeSeries0.getMaxY();
      assertEquals(9999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      double double0 = timeSeries0.getMaxY();
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-9999.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) year0.MINIMUM_YEAR);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getItemCount();
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      timeSeries0.getIndex(regularTimePeriod0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Day day0 = new Day(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) null, false);
      timeSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "XZxf]tau<uVEH*", "");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "X<$I<+Tf)GF", "X<$I<+Tf)GF");
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) minute0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Day day0 = new Day(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(410, 410);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy(3, 5);
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
      
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, Double.NaN);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Negative 'periods' argument.", "");
      timeSeries0.add((RegularTimePeriod) millisecond0, 0.0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) year0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update((-859), (Number) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.update(59, (Number) (-9999));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "zs2'p:f7CW)B", "zs2'p:f7CW)B");
      // Undeclared exception!
      try { 
        timeSeries0.update((-2670), (Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "org.jfree.data.xy.AbstractXYZDataset", "org.jfree.data.xy.AbstractXYZDataset");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@B*nYr$ >o27$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) year0.MAXIMUM_YEAR);
      timeSeries1.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(673L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "Null 'group' argument.", "");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate(30, 29, 991, 831, 991, 29);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2736), ".[~48!IZA4%a(?ki");
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "B,@8", "i");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1251.384285, 2521.02);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "", "");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) timeSeries0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeries cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getIndex(year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries1.getDataItem((-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "q", "B");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(2190);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2190, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries1.equals(timeSeries0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("{$UB}TAW6uByMm");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(1968526677, 1968526677, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-812), 9999, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      DefaultListModel<Quarter> defaultListModel0 = new DefaultListModel<Quarter>();
      JList<Quarter> jList0 = new JList<Quarter>(defaultListModel0);
      List<Quarter> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.delete(993, 993);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1481, 1481);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1481, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((Integer) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(9999, 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "zs2'p:f7CW)B", "zs2'p:f7CW)B");
      timeSeries0.add((RegularTimePeriod) month0, (-1353.675399229387));
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "jY(e<M>", "TZ2");
      timeSeries0.add((RegularTimePeriod) hour0, (-1283.049984));
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      JList<TimeSeries> jList0 = new JList<TimeSeries>(stack0);
      List<TimeSeries> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((Integer) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) year0.MAXIMUM_YEAR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-1541.70772654079));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      ArrayList<TimeSeriesDataItem> arrayList0 = new ArrayList<TimeSeriesDataItem>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((TimeSeriesDataItem) null);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 2562.110055061);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Vector<Month> vector0 = new Vector<Month>();
      timeSeries0.data = (List) vector0;
      Month month0 = new Month();
      vector0.add(month0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Month cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Day day0 = new Day(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      Day day0 = new Day();
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-1353.675399229387));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      JList<TimeSeries> jList0 = new JList<TimeSeries>(stack0);
      List<TimeSeries> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Year year0 = new Year(1935);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      JList<TimeSeries> jList0 = new JList<TimeSeries>(stack0);
      List<TimeSeries> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 9999, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 1.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((Integer) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 9999, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      JList<TimeSeries> jList0 = new JList<TimeSeries>();
      List<TimeSeries> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-2264), 400, 0, 32);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 400, (-2264), 1.0);
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, "Dw6", "[d!*'kw^}.9G#Oz_v");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "_^X</uq,t+WCMXpk=t", "_^X</uq,t+WCMXpk=t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.delete((-2603), Integer.MAX_VALUE, true);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(1968526677, 1968526677, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1968526677, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-9999), year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(529, (-300), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year1);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (Number) 9999);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), false);
      timeSeries0.removeAgedItems(false);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@B*nYr$ >o27$|,\"");
      timeSeries0.removeAgedItems(false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getIndex(year0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year1);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (Number) 9999);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), false);
      timeSeries0.update(1, (Number) 9999);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.update(0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "java.util.Date", "java.util.Date");
      Year year1 = new Year((-9999));
      Long long0 = new Long(9999);
      timeSeries0.add((RegularTimePeriod) year0, (Number) long0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (Number) 9999);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 9999);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Locale locale0 = Locale.UK;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) 9999, true);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9999));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      Day day0 = new Day();
      timeSeries0.getIndex(day0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1.0, 1.0, 1.0, 1.0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, "-V>J_G$kG/Xi4[@J", "-V>J_G$kG/Xi4[@J");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, true);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "zs2'p:f7CW)B", "zs2'p:f7CW)B");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("zs2'p:f7CW)B", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("zs2'p:f7CW)B", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Day day0 = new Day(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) null, true);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      Year year1 = new Year((-9999));
      timeSeries0.add(regularTimePeriod0, (Number) 9999, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (Number) 9999);
      timeSeries0.hashCode();
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      timeSeries0.hashCode();
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@B*nYr$ >o27$|,\"");
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 9999);
      TimeSeries timeSeries1 = new TimeSeries(timeSeriesDataItem0);
      timeSeries1.add(timeSeriesDataItem0, true);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals((-9999.0), timeSeries1.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(2398);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(2398, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.setMaximumItemAge(2512L);
      TimeSeries timeSeries1 = new TimeSeries(month0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(2512L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      timeSeries1.setRangeDescription("");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      TimeSeries timeSeries1 = new TimeSeries(xYDataItem0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getRangeDescription());
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      Day day0 = new Day();
      boolean boolean0 = timeSeries0.equals(day0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "Can't evaluate the month.", "Can't evaluate the month.");
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) 9999, false);
      timeSeries0.createCopy((RegularTimePeriod) year0, regularTimePeriod0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(9999, 87);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1), 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.delete((-9999), Integer.MAX_VALUE, false);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >o27$|,\"", "@B*nYr$ >o27$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.delete(676, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      timeSeries0.add(regularTimePeriod0, (Number) 9999);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, ":`B`+l/BE Tbu2", "|Y.ikqXX}BlM|ST");
      timeSeries0.clear();
      assertEquals("|Y.ikqXX}BlM|ST", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(":`B`+l/BE Tbu2", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, ">pz", ">pz");
      timeSeries0.setMaximumItemAge(236L);
      Year year1 = new Year((-9999));
      timeSeries0.add((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.removeAgedItems((long) 9999, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, ">1", ">1");
      timeSeries0.setMaximumItemAge(9999);
      Year year1 = new Year((-9999));
      timeSeries0.add((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.removeAgedItems((long) 9999, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) null);
      timeSeries0.removeAgedItems(2522L, true);
      timeSeries0.removeAgedItems(2522L, false);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "'-DNA$(Fi", "t'hf_");
      timeSeries0.removeAgedItems((-570L), false);
      assertEquals("t'hf_", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("'-DNA$(Fi", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "X<$I<+Tf)GF", "X<$I<+Tf)GF");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((-641L), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-9999));
      TimeSeries timeSeries0 = new TimeSeries(year1);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 9999);
      timeSeries0.setMaximumItemAge(2202L);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "", "");
      timeSeries0.setMaximumItemCount(0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      Year year1 = new Year(9999);
      timeSeries0.add((RegularTimePeriod) year1, (Number) (-9999));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeriesDataItem0.setValue(bigInteger0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 9999);
      TimeSeries timeSeries1 = new TimeSeries(timeSeriesDataItem0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Class<Month> class0 = Month.class;
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, ">pz", ">pz");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Float float0 = new Float((float) 9999);
      timeSeries0.add((RegularTimePeriod) year0, (Number) float0);
      Week week0 = new Week((-4), year0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, "");
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.update(0, (Number) 9999);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "N?!ty+L:mZY^d2nJT", "N?!ty+L:mZY^d2nJT");
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.update(0, (Number) null);
      assertEquals("N?!ty+L:mZY^d2nJT", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("N?!ty+L:mZY^d2nJT", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      timeSeries0.update(0, (Number) null);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), false);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
      Year year1 = new Year(9999);
      timeSeries0.add((RegularTimePeriod) year1, (Number) 9999);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Class<Minute> class0 = Minute.class;
      timeSeries0.add((RegularTimePeriod) year0, (-2753.0));
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals((-2753.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@B*r$ >o27$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-2042.0), (-2042.0));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >o27$|,\"", "Overwritten values from: ");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0);
      TimeSeries timeSeries1 = new TimeSeries("@B*nYr$ >o27$|,\"");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "org.jfree.data.time.RegularTimePeriod", "/k.'jU]4E<y");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getTimePeriods();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getRawDataItem(month0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >2$|,\"", "@B*nYr$ >2$|,\"");
      Day day0 = new Day();
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("@B*nYr$ >2$|,\"", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9999, 9999, 2141382842, 9999, 2141382842);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "-V>J_G$kG/Xi4[@J", "J|~#HP\"o/qi%|%AW(");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1558L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@B*nYr$ >o27$|,\"");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-2037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(",");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999), true);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.update(regularTimePeriod0, (Number) (-9999));
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getItems();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "@B*nYr$ >o27$|,\"", "@B*nYr$ >o27$|,\"");
      timeSeries0.setDomainDescription(",");
      assertEquals(",", timeSeries0.getDomainDescription());
  }
}
