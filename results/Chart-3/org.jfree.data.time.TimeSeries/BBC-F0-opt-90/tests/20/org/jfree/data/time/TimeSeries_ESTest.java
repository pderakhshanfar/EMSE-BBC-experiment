/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 13:02:23 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.KeyStroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 858.8976468931002);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(858.8976468931002, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      timeSeries1.setMaximumItemCount(1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(999, 9999);
      timeSeries1.setMaximumItemAge(9999);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9999L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "qMSs?H/");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.add(regularTimePeriod0, 2504.303);
      timeSeries0.createCopy((RegularTimePeriod) day0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Date date0 = fixedMillisecond0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.add(regularTimePeriod0, (Number) integer0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-1745.11));
      Month month0 = new Month();
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) month0);
      assertEquals(200.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3186), 3, 1138, 2576, 1548);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "]cnS~DQSCWU0GK)S", "Null 'item' argument.");
      timeSeries0.add(regularTimePeriod0, 928.6180077492669);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(928.6180077492669, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2504.303);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.update(regularTimePeriod0, (Number) 1);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "org.jfree.data.xy.XIntervalSeries", "org.jfree.data.xy.XIntervalSeries");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 2504.303);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.add((RegularTimePeriod) day0, 2504.303);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2504.303);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-133.08397));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals((-133.08397), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Date date0 = fixedMillisecond0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.add(regularTimePeriod0, (Number) integer0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-1745.8534881388384));
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals((-1745.8534881388384), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "qMSs?H/");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.add(regularTimePeriod0, 2504.303);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.add((RegularTimePeriod) day0, 2505.6370035350187);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 1L);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.setRangeDescription("SortOrder.DESCENDING");
      assertEquals("SortOrder.DESCENDING", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.add((RegularTimePeriod) day0, (Number) 999, false);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "bk5N4", (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals((-512.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]c~SDQSCWU0G0(K)S", "]c~SDQSCWU0G0(K)S");
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "ck>Z", "ck>Z");
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(10.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "bk5N4", (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals(153.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) bigInteger0);
      timeSeries0.getValue(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      BigInteger bigInteger0 = BigInteger.TEN;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getValue(0);
      assertEquals(10.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (-333.38494433569446));
      timeSeries0.getTimePeriodClass();
      assertEquals((-333.38494433569446), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, (-283.520612509));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-283.520612509));
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.getTimePeriod(1);
      assertEquals((-283.520612509), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]UnS~DQSCWU0GK)S", "]UnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (-333.38494433569446));
      timeSeries0.getRawDataItem(0);
      assertEquals((-333.38494433569446), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("]cnS~DQSCWU0GK)S", "", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "Value", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "Null 'tasks' argument.", "qMSs?H/");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getNextTimePeriod();
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMinY();
      assertEquals(2504.303, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnSy~DQSCWU0GK)S", "]cnSy~DQSCWU0GK)S");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-1388.888660623));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMinY();
      assertEquals((-1388.888660623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]c~nS~DQSCWU0G0(K)S", "]c~nS~DQSCWU0G0(K)S");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals("]c~nS~DQSCWU0G0(K)S", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add(timeSeriesDataItem0, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(2504.303, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnSy~DQSCWU0GK)S", "]cnSy~DQSCWU0GK)S");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-1388.888660623));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-1388.888660623), timeSeries0.getMinY(), 0.01);
      assertEquals((-1388.888660623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 999);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getItemCount();
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getIndex(day0);
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.add((RegularTimePeriod) day0, 2505.6370035350187);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getIndex(regularTimePeriod0);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, "Ic?eyaj>^p");
      String string0 = timeSeries0.getDomainDescription();
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Ic?eyaj>^p", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "", "?DdHrs@W");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals("?DdHrs@W", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getDataItem(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2505.6370035350187);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getDataItem(1);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) millisecond0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]c~SDQSCWU0G0(K)S", "]c~SDQSCWU0G0(K)S");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Hour hour0 = new Hour(mockDate0);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) hour0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (-333.38494433569446));
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) millisecond0);
      assertEquals((-333.38494433569446), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(19, 19);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(999, 999);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(day0);
      assertNotNull(timeSeriesDataItem0);
      
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "ck>Z", (String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) bigInteger0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnSy~DQSCWU0GK)S", "]cnSy~DQSCWU0GK)S");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.update(1911, (Number) 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1911, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-3475), (Number) float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1092));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("`i_VRxXeD|#");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "The 'row' argument is out of bounds.", "");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.statistics.SimpleHistogramDataset", "org.jfree.data.statistics.SimpleHistogramDataset");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-2225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      LinkedList<Second> linkedList0 = new LinkedList<Second>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4841), 2369, 2147416503);
      Year year0 = new Year(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "w");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) (-4841));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-21556) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "The 'seriesKey' cannot be null.", "SeriesChangeType.ADD");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "The 'row' argument is out of bounds.", "");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-2180));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "The 'row' argument is out of bounds.", "");
      timeSeries0.data = null;
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) week0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "The 'row' argument is out of bounds.", "");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(23, 3295, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.statistics.SimpleHistogramDataset", "org.jfree.data.statistics.SimpleHistogramDataset");
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 2, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), 4, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", ".");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(31, (-284), 339, (-284), 31);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(44, minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.delete(740, 881);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 740, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "_{**8%tvfv9k", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-153), (-153));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Second second0 = new Second();
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      timeSeries0.data = (List) linkedList0;
      Second second0 = new Second(date0);
      linkedList0.add((Integer) 59);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) second0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 999);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 619);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Stack<FixedMillisecond> stack0 = new Stack<FixedMillisecond>();
      timeSeries0.data = (List) stack0;
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries1.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3424, 2672, 2672, (-1352), 2672, 2672);
      Week week0 = new Week(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      ArrayList<RegularTimePeriod> arrayList0 = new ArrayList<RegularTimePeriod>();
      Year year0 = new Year(mockDate0);
      arrayList0.add((RegularTimePeriod) year0);
      timeSeries0.data = (List) arrayList0;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 1393.71429429348);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Year cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries("]cnS~DQSCWU0GK)S", "sO", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, 2211.2588525667993);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "The 'row' argument is out of bounds.", "");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(646L, 646L);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      Vector<KeyStroke> vector0 = new Vector<KeyStroke>();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(36, (-1318), false);
      vector0.add(keyStroke0);
      timeSeries0.data = (List) vector0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.add((RegularTimePeriod) day0, 2504.303);
      TimeZone timeZone0 = TimeZone.getTimeZone("]cnS~DQSCWU0GK)S");
      Week week0 = new Week(date0, timeZone0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (-2.147483648E9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnSy~DQSCWU0GK)S", "]cnSy~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (-262.0636247314972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("]cnSDQSCWU0G'K)", "]cnSDQSCWU0G'K)", "]cnSDQSCWU0G'K)");
      timeSeries0.add((RegularTimePeriod) day0, (-283.520612509));
      TimeSeries timeSeries1 = new TimeSeries(day0);
      Locale locale0 = Locale.forLanguageTag("%");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("%", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Hour hour0 = new Hour(date0);
      timeSeries1.add((RegularTimePeriod) hour0, (Number) 23);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "!L@xsS", "/j!UI+F;eU");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 999);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:00 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 999);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "{PlwKG+dO?`6gS'");
      timeSeries0.add((RegularTimePeriod) day0, 1158.167942016982);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Stack<TimeSeriesDataItem> stack0 = new Stack<TimeSeriesDataItem>();
      JList<TimeSeriesDataItem> jList0 = new JList<TimeSeriesDataItem>(stack0);
      List<TimeSeriesDataItem> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Vector<Day> vector0 = new Vector<Day>();
      timeSeries0.data = (List) vector0;
      Instant instant0 = MockInstant.ofEpochSecond((long) 999);
      Date date0 = Date.from(instant0);
      Day day0 = new Day(date0);
      vector0.add(day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Day cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.add((RegularTimePeriod) day0, 2505.6370035350187);
      TimeZone timeZone0 = TimeZone.getTimeZone("]cnS~DQSCWU0GK)S");
      Week week0 = new Week(mockDate0, timeZone0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (double) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.statistics.SimpleHistogramDataset", "org.jfree.data.statistics.SimpleHistogramDataset");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 801.088018, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 24L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:00 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      Stack<TimeSeriesDataItem> stack0 = new Stack<TimeSeriesDataItem>();
      JList<TimeSeriesDataItem> jList0 = new JList<TimeSeriesDataItem>(stack0);
      List<TimeSeriesDataItem> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (-75.05981436746055));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("`i_VRxXeD|#");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (-1507.9422803968007));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-1745.11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "!Lx", ";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.delete((-4285), 2147483645, true);
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(1156, 1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Date date0 = fixedMillisecond0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      timeSeries0.add(regularTimePeriod0, (Number) integer0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-1745.11));
      timeSeries0.removeAgedItems(false);
      assertEquals((-1745.11), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "_**8}tv|fv9", "_**8}tv|fv9");
      timeSeries0.removeAgedItems(false);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("_**8}tv|fv9", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("_**8}tv|fv9", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 999);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.add((RegularTimePeriod) day0, 2505.6370035350187);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 0);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) 999);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getIndex(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "_**8}tv|fv9", "_**8}tv|fv9");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("_**8}tv|fv9", timeSeries0.getRangeDescription());
      assertEquals("_**8}tv|fv9", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(9223372036854775807L, long0);
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("k~", "k~", "k~");
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) integer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getRangeDescription());
      assertEquals("]cnS~DQSCWU0GK)S", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.statistics.SimpleHistogramDataset", "org.jfree.data.statistics.SimpleHistogramDataset");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.statistics.SimpleHistogramDataset", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.statistics.SimpleHistogramDataset", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.statistics.SimpleHistogramDataset", "org.jfree.data.statistics.SimpleHistogramDataset");
      timeSeries0.getItemCount();
      assertEquals("org.jfree.data.statistics.SimpleHistogramDataset", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.data.statistics.SimpleHistogramDataset", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, (String) null, "");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2504.303);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, Double.NaN);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2504.303);
      timeSeries0.add((RegularTimePeriod) day0, (double) 1);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod1, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.hashCode();
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2504.303);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.hashCode();
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("]cn8S~DQSCWU0GK)S", "]cn8S~DQSCWU0GK)S", "]cn8S~DQSCWU0GK)S");
      MockDate mockDate0 = new MockDate(3, 3, 3);
      TimeZone timeZone0 = TimeZone.getTimeZone("]cn8S~DQSCWU0GK)S");
      Week week0 = new Week(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.hashCode();
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (-1.0));
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 999.0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.setMaximumItemCount(0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(0, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      timeSeries1.setMaximumItemAge(999);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(999L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 999);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      TimeSeries timeSeries1 = new TimeSeries(timeSeriesDataItem0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "Null 'tasks' argument.", "qMSs?H/");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      TimeSeries timeSeries1 = new TimeSeries(timeSeriesDataItem0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("qMSs?H/", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Null 'tasks' argument.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      boolean boolean0 = timeSeries0.equals((Object) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getDomainDescription());
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("q}0'ZBzbbHjyQ&3% E", "q}0'ZBzbbHjyQ&3% E", "java.laxg.Cl6ss");
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertTrue(boolean0);
      assertEquals("q}0'ZBzbbHjyQ&3% E", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("java.laxg.Cl6ss", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 858.8976468931002);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(858.8976468931002, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries("+sK", "+sK", "+sK");
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(300.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      timeSeries1.setRangeDescription("org.jfree.data.time.TimeSeries");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("org.jfree.data.time.TimeSeries", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "Null 'tasks' argument.", "qMSs?H/");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "Requires start <= end.", "Requires start <= end.");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(158, (-831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-3010), 1192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Day day0 = new Day();
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.add((RegularTimePeriod) day0, 2505.6370035350187);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.delete(1, 1, false);
      assertEquals(2505.6370035350187, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, "!L@xsS", "/j!UI+F;eU");
      // Undeclared exception!
      try { 
        timeSeries0.delete(638, 260);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      RegularTimePeriod regularTimePeriod0 = day0.next();
      timeSeries0.add(regularTimePeriod0, 2504.303);
      timeSeries0.add((RegularTimePeriod) day0, 999.0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Hour hour0 = new Hour();
      timeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      timeSeries0.delete((RegularTimePeriod) millisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Jm?EPLit,G", "Jm?EPLit,G");
      timeSeries0.setMaximumItemAge(133L);
      Year year0 = new Year(53);
      timeSeries0.add((RegularTimePeriod) year0, (-1214.899204069912));
      timeSeries0.removeAgedItems((-5672L), true);
      assertEquals(133L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Jm?EPLit,G", "&Gi,");
      timeSeries0.setMaximumItemAge(2L);
      Year year0 = new Year(60);
      timeSeries0.add((RegularTimePeriod) year0, (double) 2L);
      assertEquals(2.0, timeSeries0.getMaxY(), 0.01);
      
      timeSeries0.removeAgedItems((-385L), false);
      assertEquals("Jm?EPLit,G", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "qMSs?H/");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2504.303);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.removeAgedItems((-1902L), true);
      timeSeries0.removeAgedItems(1721L, true);
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.statistics.SimpleHistogramDataset", "org.jfree.data.statistics.SimpleHistogramDataset");
      timeSeries0.removeAgedItems(1798L, true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.statistics.SimpleHistogramDataset", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.statistics.SimpleHistogramDataset", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Date date0 = fixedMillisecond0.getTime();
      TimeSeries timeSeries0 = new TimeSeries(date0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(2599L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) null);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, 2535.093584);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) null);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, 2505.6370035350187);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 1158.167942016982);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1158.167942016982, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Day day0 = new Day();
      RegularTimePeriod regularTimePeriod0 = day0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 2498.3850403959086);
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "]cnS~DQSCWU0GK)S", "{PlwKG+dO?`6gS'");
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.add((RegularTimePeriod) day0, 1158.16794202);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1158.16794202, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Day day0 = new Day();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) day0, 2504.303);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, 2504.303);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(date0, "Requires start <= end.", "Requires start <= end.");
      timeSeries0.add((RegularTimePeriod) day0, 2504.303);
      TimeSeries timeSeries1 = new TimeSeries(day0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(2504.303, timeSeries0.getMaxY(), 0.01);
      assertEquals("Requires start <= end.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.update(0, (Number) null);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, Double.NaN);
      timeSeries0.update(0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 999);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.update(0, (Number) 999);
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
      timeSeries0.add(timeSeriesDataItem0);
      Integer integer0 = new Integer((-2885));
      timeSeries0.update((RegularTimePeriod) day0, (Number) integer0);
      assertEquals((-2885.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-146.62652604925742));
      RegularTimePeriod regularTimePeriod0 = day0.next();
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.update(1, (Number) bigInteger0);
      assertEquals((-146.62652604925742), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.add((RegularTimePeriod) day0, (-146.62652604925742));
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries("+(;", "+(;", "+(;");
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("+(;", timeSeries0.getRangeDescription());
      assertEquals("+(;", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "_**8}tv|fv9", "_**8}tv|fv9");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (-333.38494433569446));
      TimeSeries timeSeries1 = new TimeSeries(date0, "]cnS~DQSCWU0GK)S", "");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "!L@xsS", "/j!UI+F;eU");
      timeSeries0.getRawDataItem(fixedMillisecond0);
      assertEquals("!L@xsS", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("/j!UI+F;eU", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("]cnS~DQSCWU0GK)S", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "]cnS~DQSCWU0GK)S", "]cnS~DQSCWU0GK)S");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("+sK", "+sK", "+sK");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 999);
      Class<Hour> class0 = Hour.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.delete((-2147483647), 29);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.getValue(2146603892);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146603892, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) 999);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "!L@xsS", "/j!UI+F;eU");
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("!L@xsS", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("/j!UI+F;eU", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "_{**8%tvfv9k", "");
      timeSeries0.getItems();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("_{**8%tvfv9k", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries("]anS~HQMCWU0GK)", "]anS~HQMCWU0GK)", "]anS~HQMCWU0GK)");
      timeSeries0.add((RegularTimePeriod) day0, (-3099.0), false);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("]cnS~DQSCWU0GK)S", "!L@xsS", "!L@xsS");
      timeSeries0.setDomainDescription("");
      assertEquals("", timeSeries0.getDomainDescription());
  }
}
