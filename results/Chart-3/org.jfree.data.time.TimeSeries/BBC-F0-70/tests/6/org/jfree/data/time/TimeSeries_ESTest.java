/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:16:09 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.plaf.synth.SynthRadioButtonUI;
import javax.swing.plaf.synth.SynthSpinnerUI;
import javax.swing.plaf.synth.SynthToggleButtonUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "Range", "Range");
      timeSeries0.hashCode();
      assertEquals("Range", timeSeries0.getDomainDescription());
      assertEquals("Range", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      timeSeries0.add(regularTimePeriod0, (double) 4);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 1.0);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      Year year1 = new Year(45);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.add((RegularTimePeriod) year0, (double) 3);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      timeSeries0.add((RegularTimePeriod) year0, (-407.58));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 23);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      timeSeries0.add(regularTimePeriod0, (double) 4);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      timeSeries0.update(regularTimePeriod0, (Number) 3);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.add((RegularTimePeriod) year0, (double) 3);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year1, (double) 4);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      timeSeries0.add(regularTimePeriod0, (double) 4);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 4);
      timeSeries0.add((RegularTimePeriod) year1, (-983.20657));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1993);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      MockDate mockDate0 = new MockDate(416L);
      Year year1 = new Year(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (Number) 9999);
      timeSeries0.add((RegularTimePeriod) year0, (-1882.7));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1993);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year(3);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (Number) 0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 1900);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1900.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "");
      timeSeries0.setRangeDescription("");
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Year year0 = new Year((-576));
      TimeSeries timeSeries0 = new TimeSeries(year0, "k6m{zF6+p'A", ".");
      assertEquals("k6m{zF6+p'A", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription(".");
      assertEquals(".", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (-418.48111243529));
      timeSeries0.getValue(0);
      assertEquals((-418.48111243529), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("9");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Second second0 = new Second(date0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.delete((-1248), 2147483645);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, (double) 4);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1);
      timeSeries0.delete((RegularTimePeriod) year0);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1400);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      MockDate mockDate0 = new MockDate((-7985), (-1663), 2904, (-877), 584, (-1801));
      Year year0 = new Year(mockDate0);
      timeSeries0.add((RegularTimePeriod) year0, 23.543);
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.update((RegularTimePeriod) year0, (Number) bigInteger0);
      timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, (double) 3);
      timeSeries0.getTimePeriodClass();
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      timeSeries0.getTimePeriod(0);
      assertEquals(2.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(hour0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.getRawDataItem(0);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.getRawDataItem(0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(2147131869, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Key", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Key", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1993);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year(9999);
      timeSeries0.add((RegularTimePeriod) year0, (-4086.0));
      timeSeries0.getNextTimePeriod();
      assertEquals((-4086.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (-418.48111243529));
      timeSeries0.getNextTimePeriod();
      assertEquals((-418.48111243529), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      Second second0 = new Second();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("DefaultIntervalCategoryDataset.setValue: series outside valid range.");
      Second second0 = new Second();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      double double0 = timeSeries0.getMinY();
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(59.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      double double0 = timeSeries0.getMinY();
      assertEquals((-1.0), timeSeries0.getMaxY(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(389);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.update((RegularTimePeriod) year0, (Number) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      double double0 = timeSeries0.getMaxY();
      assertEquals(9999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-9999.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "Q found at end of string.", "Q found at end of string.");
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.getIndex(week0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year1, (double) 4);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      int int0 = timeSeries0.getIndex(year0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1191);
      Date date0 = spreadsheetDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", ",");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(",", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1984);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.getDataItem(0);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 1987);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year();
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(9999, 9999);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 1987);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(7, 9999);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(hour0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year(9999);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 0);
      timeSeries1.add((RegularTimePeriod) year0, (-2330.8415003));
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals((-2330.8415003), timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      timeSeries2.add((RegularTimePeriod) year0, (-2634.278036781));
      timeSeries2.addAndOrUpdate(timeSeries0);
      assertEquals(2.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.update(23, (Number) 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "u#4W;lW&j6\"7", "org.jfree.data.xy.AbstractXYZDataset");
      // Undeclared exception!
      try { 
        timeSeries0.update((-2253), (Number) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("9");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Second second0 = new Second(date0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timeSeries0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
      try { 
        timeSeries0.setRangeDescription("e7y\"1<ezVm%");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeries cannot be cast to javax.swing.JSpinner
         //
         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge(9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("9");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Second second0 = new Second(date0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("DefaultIntervalCategoryDataset.setValue: series outside valid range.");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1191);
      Date date0 = spreadsheetDate0.toDate();
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "", ",");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-2229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(date0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 1994);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-409));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "u#4W;lW&j6\"7", "org.jfree.data.xy.AbstractXYZDataset");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "Q found at end of string.", "Q found at end of string.");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-2131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.ComparableObjectItem");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.xy.AbstractXYZDataset", "R$pALY]uv-ITM`#OT?2", "S_,x2");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-3725), 1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-5480), 29, (-5480), 1630, 0, 1630);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0, "org.jfree.data.general.DefaultKeyedValueDataset", "h");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1394, 798);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Week week0 = new Week((-941), (-2087));
      TimeSeries timeSeries0 = new TimeSeries(week0, "%ON(Vo", "%ON(Vo");
      timeSeries0.data = null;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, 2404.5982838231);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (-2493.4));
      TimeSeries timeSeries1 = new TimeSeries(year0, "Last", "Last");
      Second second0 = new Second();
      timeSeries1.addOrUpdate((RegularTimePeriod) second0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries1.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 2979.343613363);
      ArrayList<SynthToggleButtonUI> arrayList0 = new ArrayList<SynthToggleButtonUI>();
      SynthRadioButtonUI synthRadioButtonUI0 = new SynthRadioButtonUI();
      arrayList0.add((SynthToggleButtonUI) synthRadioButtonUI0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      TimeSeries timeSeries0 = new TimeSeries(instant0, "org.jfree.data.xy.AbstractXYZDataset", "WR2uFD$('&f![u");
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Week 7, 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period -1 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-2.147483648E9), (-2.147483648E9));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "Z", "Z");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 23, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 1994);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period -1 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, (double) 4);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("FgU7Jk");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 480.2809620967, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hour hour0 = new Hour();
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 2958465.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "Value");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "org.jfree.data.xy.AbstractXYZDataset", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.delete(0, 0, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.delete(0, 0, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year1, (double) 4);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      timeSeries0.removeAgedItems(true);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "u#4W;lW&j6\"7", "org.jfree.data.xy.AbstractXYZDataset");
      timeSeries0.removeAgedItems(true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("u#4W;lW&j6\"7", timeSeries0.getDomainDescription());
      assertEquals("org.jfree.data.xy.AbstractXYZDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, 1049.9803774958);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year1, 53.0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.add((RegularTimePeriod) year0, (double) 3);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1993);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      MockDate mockDate0 = new MockDate(0L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", spreadsheetDate0.DATE_FORMAT_SYMBOLS);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Hour hour0 = new Hour(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 1993);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.update(0, (Number) 7);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      timeSeries0.update(0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) hour0, (double) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 4);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(date0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-2.147483648E9), (-2.147483648E9));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "Z", "Z");
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      timeSeries0.getIndex(week0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Z", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Z", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Year year0 = new Year(1600);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, long0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 1987);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("FgU7Jk");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.getItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year1, 1.5);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, Double.NaN);
      timeSeries0.delete((RegularTimePeriod) millisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      Year year1 = new Year(9999);
      RegularTimePeriod regularTimePeriod0 = year1.previous();
      timeSeries0.add(regularTimePeriod0, (double) (-9999));
      timeSeries0.add((RegularTimePeriod) year1, (double) 9999);
      timeSeries0.hashCode();
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Year year0 = new Year(4);
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1993);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year(274);
      TimeSeries timeSeries1 = new TimeSeries(spreadsheetDate0);
      timeSeries1.add((RegularTimePeriod) year0, (double) 1);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1.0, timeSeries1.getMaxY(), 0.01);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemCount(9999);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9999, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(2.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      TimeSeries timeSeries1 = new TimeSeries(year0);
      timeSeries1.setRangeDescription("e7y\"1<ezVm%");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("e7y\"1<ezVm%", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      TimeSeries timeSeries1 = new TimeSeries(spreadsheetDate0, "[ k])Jkc", "java.util.TimeZone");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("[ k])Jkc", timeSeries1.getDomainDescription());
      assertEquals("java.util.TimeZone", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "u#4W;lW&j6\"7", "org.jfree.data.xy.AbstractXYZDataset");
      boolean boolean0 = timeSeries0.equals(serialDate0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.data.xy.AbstractXYZDataset", timeSeries0.getRangeDescription());
      assertEquals("u#4W;lW&j6\"7", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 1994);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      RegularTimePeriod regularTimePeriod0 = year0.next();
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year1);
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-1.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, (String) null, (String) null);
      MockDate mockDate0 = new MockDate(4, 3, 2);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1885L));
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(Integer.MAX_VALUE, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1), 1697);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      timeSeries0.delete((-2832), Integer.MAX_VALUE, false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "u#4W;lW&j6\"7", "org.jfree.data.xy.AbstractXYZDataset");
      // Undeclared exception!
      try { 
        timeSeries0.delete(100, 2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      timeSeries0.add((RegularTimePeriod) hour0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("v");
      Week week0 = new Week();
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "java.util.TimeZone", "org.jfree.data.xy.AbstractXYZDataset");
      timeSeries0.clear();
      assertEquals("org.jfree.data.xy.AbstractXYZDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("java.util.TimeZone", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 3);
      timeSeries0.setMaximumItemAge(1L);
      timeSeries0.removeAgedItems((-148L), false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (-354.1077513403975));
      timeSeries0.setMaximumItemAge(1L);
      timeSeries0.removeAgedItems((-141L), true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 1994);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      timeSeries0.removeAgedItems((long) 3, true);
      timeSeries0.removeAgedItems((long) 2958465, false);
      assertEquals(2.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      timeSeries0.removeAgedItems(12L, true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(9223372036854775807L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (Number) 6);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year1, (double) 4);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      timeSeries0.setMaximumItemAge(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(399);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year(6);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(year0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertFalse(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      Year year1 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year1, (double) 4);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(8, 8, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Year year0 = new Year((-1));
      timeSeries0.add((RegularTimePeriod) year0, (double) 2);
      Week week0 = new Week(7, 1);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 0.5);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, (double) 4);
      TimeSeries timeSeries1 = new TimeSeries(year0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Hour hour0 = new Hour();
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.update(0, (Number) hour0.FIRST_HOUR_IN_DAY);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (-2.147483648E9));
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
      Year year1 = new Year(9999);
      timeSeries0.add((RegularTimePeriod) year1, (double) (-9999));
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1993);
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      Year year0 = new Year();
      timeSeries0.add((RegularTimePeriod) year0, (-4086.0));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Vector<String> vector0 = new Vector<String>(0, 0);
      timeSeries0.data = (List) vector0;
      vector0.add("org.jfree.data.time.RegularTimePeriod");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (double) 9999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Week week0 = new Week(1, (-747));
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.ComparableObjectItem", "t}0", "YZ8Hb5R<>`NI9db_ZQt");
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("t}0", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("YZ8Hb5R<>`NI9db_ZQt", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      Class<Object> class0 = Object.class;
      timeSeries0.timePeriodClass = class0;
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Vector<RegularTimePeriod> vector0 = new Vector<RegularTimePeriod>();
      vector0.add((RegularTimePeriod) year0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-2.147483648E9), (-2.147483648E9));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "Z", "Z");
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      timeSeries0.getRawDataItem(week0);
      assertEquals("Z", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Z", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("v");
      Week week0 = new Week();
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1885L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 23);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      Second second0 = new Second();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      int int0 = timeSeries0.getItemCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1600, 1600);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1600, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      timeSeries0.add((RegularTimePeriod) hour0, (Number) null);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Week week0 = new Week(1600, 1600);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2, 2, 2000);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "u#4W;lW&j6\"7", "org.jfree.data.xy.AbstractXYZDataset");
      timeSeries0.getItems();
      assertEquals("u#4W;lW&j6\"7", timeSeries0.getDomainDescription());
      assertEquals("org.jfree.data.xy.AbstractXYZDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertTrue(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0, true);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }
}
