/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:28:53 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.AttributedCharacterIterator;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, (-2.147483648E9));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setValue(59);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemCount(0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(0, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      timeSeries1.setMaximumItemAge(0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 59);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(1064, (-644), 2133, 2133, 1542, (-644));
      Hour hour1 = new Hour(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      timeSeries0.add((RegularTimePeriod) hour1, 2.0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.930716665532);
      timeSeries0.update(regularTimePeriod0, (Number) 59);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.930716665532);
      timeSeries0.getValue(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.930716665532);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.93071667);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 0);
      timeSeries0.getDataItem(regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.930716665532);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.setRangeDescription("SerialDate.monthCodeToQuarter: invalid month code.");
      assertEquals("SerialDate.monthCodeToQuarter: invalid month code.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      Float float0 = new Float((float) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) float0);
      timeSeries0.getValue(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.delete((-825), Integer.MAX_VALUE);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      timeSeries1.add((RegularTimePeriod) minute0, (double) 59);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.getDataItem((RegularTimePeriod) minute0);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(59.0, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 0, false);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) fixedMillisecond0);
      Class<Week> class0 = Week.class;
      timeSeries1.timePeriodClass = class0;
      timeSeries1.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (-2.147483648E9));
      timeSeries0.getTimePeriodClass();
      assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getTimePeriod(0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(minute0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(0);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("SCALE_AREA_TO_1", "(>IrENM", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("(>IrENM", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-491), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L);
      timeSeries0.getNextTimePeriod();
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "{*+<*/!3*RwLBHWa,", "You are trying to add data where the time period cl'ss ");
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      timeSeries0.add((RegularTimePeriod) minute0, (double) 23, true);
      timeSeries0.getNextTimePeriod();
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "{*+<*/!3*RwLBHWa,");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      double double0 = timeSeries0.getMinY();
      assertEquals(3638.37421, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("/mk?", "{BBp=OP3WQ,uz_y'>", "2Q/~*GWu");
      timeSeries0.add((RegularTimePeriod) minute0, (-975.83855219));
      double double0 = timeSeries0.getMinY();
      assertEquals((-975.83855219), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "{*+<*/!3*RwLBHWa,");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
      double double0 = timeSeries0.getMaxY();
      assertEquals(59.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (-2.147483648E9));
      double double0 = timeSeries0.getMaxY();
      assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01);
      assertEquals((-2.147483648E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("=CdAEig^/", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("/mk?", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "{*+<*/!3*RwLBHWa,");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.getItemCount();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(3638.37421, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 0.5);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      int int0 = timeSeries0.getIndex(hour0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getDataItem((RegularTimePeriod) hour0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getDataItem(0);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.getDataItem(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("=CdAEig^/", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("=CdAEig^/", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "{*+<*/!3*RwLBHWa,");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Q kj5Pn=]x8?)q");
      Locale locale0 = Locale.ITALIAN;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      Week week0 = new Week(1, year0);
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) second0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, (-2.147483648E9));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) minute0);
      assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 23);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(58, 59);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-903), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Wx#V.QqP5", "Wx#V.QqP5");
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-1499));
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-745), (Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount(335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(960L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1705);
      Date date0 = spreadsheetDate0.toDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      Month month0 = new Month(date0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-738));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, false, true);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "SCALE_AREA_TO_1", "*4pfV7?88dKZ=");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-3510));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "k?");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(551);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 551, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("NP");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      JList<String> jList0 = new JList<String>();
      List<String> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, "`/u", "`/u");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-886));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2), 59, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.delete(7472, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 0, 0, 31, (-2097), 996);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(2, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-9999), (-2527));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("=CdAEig^/");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2490, 2490);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      Second second0 = new Second();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-3391.885));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 2874.0213600821703);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      timeSeries2.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 59);
      // Undeclared exception!
      try { 
        timeSeries2.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, 3672.0268748655226);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-2.147483648E9));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      ArrayList<AttributedCharacterIterator.Attribute> arrayList0 = new ArrayList<AttributedCharacterIterator.Attribute>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      arrayList0.add(attributedCharacterIterator_Attribute0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-495), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 23);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (double) 14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "SCALE_AREA_TO_1", "*4pfV7?88dKZ=");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) (-1397), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("=CdAEig^/", "/mk?", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 0.8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) timeSeries0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "org.jfree.data.statistics.DefaultStatisticalCategoryDataset", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
      timeSeries0.delete((-825), Integer.MAX_VALUE, true);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4532.5);
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.removeAgedItems(false);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.add(regularTimePeriod0, 4508.930716665532);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 59);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "k?");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 722.6066997);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(722.6066997, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/m?");
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      timeSeries1.add((RegularTimePeriod) fixedMillisecond0, (Number) 59);
      // Undeclared exception!
      try { 
        timeSeries1.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.getIndex(hour0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("=CdAEig^/", "7L B", "=CdAEig^/");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("=CdAEig^/", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, false, true);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(365, 365);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 365, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("E}fn#o", "/m?", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("/m?", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEi8^/", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("=CdAEi8^/", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("=CdAEig^/", "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, Double.NaN);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("=CdAEig^/", "=CdAEig^/", "=CdAEig^/");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, Double.NaN);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries("=CNAEig^/", "=CNAEig^/", "z,Lmm=qW[Tk>|bH");
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, (double) 59);
      timeSeries0.addOrUpdate(regularTimePeriod1, (Number) 0);
      timeSeries0.hashCode();
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.hashCode();
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      timeSeries0.hashCode();
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-91), (-91), (-849), (-245), (-91), (-849));
      Week week0 = new Week(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(week0, "Requires start >= 0.", "");
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Requires start >= 0.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "");
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemCount(0);
      boolean boolean0 = object0.equals(timeSeries0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setMaximumItemAge(1091L);
      TimeSeries timeSeries1 = new TimeSeries(hour0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1091L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      timeSeries2.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 59);
      boolean boolean0 = timeSeries2.equals(timeSeries1);
      assertEquals(59.0, timeSeries2.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("/mk?", timeSeries0.getRangeDescription());
      assertEquals("=CdAEig^/", timeSeries0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "k?");
      boolean boolean0 = timeSeries0.equals("k?");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("=CdAEig^/", timeSeries0.getDomainDescription());
      assertEquals("k?", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEi8^/", "K");
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(boolean0);
      assertEquals("K", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("=CdAEi8^/", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.add(regularTimePeriod0, (Number) bigInteger0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      Object object0 = timeSeries1.clone();
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(23.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("NP", "D<HQEiRG9)&%MCY<W", (String) null);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(5, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "SCALE_AREA_TO_1", "*4pfV7?88dKZ=");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEi8^/", "");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, (-368));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-736), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries("NP");
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) null);
      timeSeries0.delete(0, 0, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(2064, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4509.0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-903), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Wx#V.QqP5", "Wx#V.QqP5");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-903), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Wx#V.QqP5", "Wx#V.QqP5");
      timeSeries0.clear();
      assertEquals("Wx#V.QqP5", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Wx#V.QqP5", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Minute minute0 = new Minute();
      Month month0 = new Month(6, 0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) month0, (double) 59);
      timeSeries0.setMaximumItemAge(59);
      timeSeries0.removeAgedItems((long) 6, true);
      assertEquals(59L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Hour hour0 = new Hour();
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) month0, 2466.6999386355);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.removeAgedItems(9223372036854775807L, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-495), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 23);
      timeSeries0.removeAgedItems(999L, false);
      timeSeries0.removeAgedItems(23L, false);
      assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.removeAgedItems(5186L, false);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, " but the series already contains an observation", " but the series already contains an observation");
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.930716665532);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.930716665532);
      timeSeries0.setMaximumItemAge(0);
      assertEquals(4508.930716665532, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
      timeSeriesDataItem0.setValue(59);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEi8^/", "");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "k?");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "{*+<*/!3*RwLBHWa,");
      Day day0 = new Day();
      Hour hour0 = new Hour(29, day0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) (-1L));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-1.0), timeSeries0.getMaxY(), 0.01);
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      TimeSeries timeSeries1 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, 257.099625);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = new TimeSeries(hour0);
      ArrayList<AttributedCharacterIterator.Attribute> arrayList0 = new ArrayList<AttributedCharacterIterator.Attribute>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      arrayList0.add(attributedCharacterIterator_Attribute0);
      timeSeries1.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      timeSeries0.update(0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 23);
      timeSeries0.update(0, (Number) 0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      timeSeries0.update(0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "ef", ".%b:c,a~s?");
      timeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) hour0, (Number) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      Second second0 = new Second((-197), minute0);
      Millisecond millisecond0 = new Millisecond(0, second0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "ef", ".%b:c,a~s?");
      timeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      timeSeries0.add((RegularTimePeriod) minute0, (double) 0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      timeSeries0.addOrUpdate(regularTimePeriod0, 4508.930716665532);
      timeSeries0.createCopy((RegularTimePeriod) minute0, regularTimePeriod0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/m?");
      timeSeries0.add((RegularTimePeriod) minute0, 3638.37421);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries("NP");
      timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("E}fn#o", "/m?", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.getRawDataItem(second0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-192L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy(0, 23);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setMaximumItemCount(2018);
      assertEquals(2018, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "/mk?");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "{*+<*/!3*RwLBHWa,");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      TimeSeries timeSeries1 = new TimeSeries(second0, "GR1oE<.{rUn!", "fN?p");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "[Z(m|S`^38#&1)|NN", "");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 59, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "=CdAEig^/", "=CdAEig^/");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Wx#V.QqP5", "=<M?", "Wx#V.QqP5");
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add((RegularTimePeriod) hour0, 3366.1);
      timeSeries0.add(regularTimePeriod0, (-1.7976931348623157E308));
      timeSeries0.setMaximumItemCount(1);
      assertEquals(3366.1, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.setRangeDescription("K");
      TimeSeries timeSeries1 = new TimeSeries(hour0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("K", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (-4049.098433377641), false);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.getItems();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 23);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      timeSeries0.add((RegularTimePeriod) hour0, (-4049.098433377641), false);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-903), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "Wx#V.QqP5", "Wx#V.QqP5");
      assertEquals("Wx#V.QqP5", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      assertEquals("Wx#V.QqP5", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }
}
