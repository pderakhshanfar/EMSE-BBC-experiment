/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:54:20 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.IsoEra;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+3,Y-,ibuJ", "+3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("+3,Y-,ibuJ", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("+3,Y-,ibuJ", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0, "Range", "Range");
      timeSeries0.add((RegularTimePeriod) year1, 431.4890523391, false);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year1);
      assertEquals(431.4890523391, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Year year1 = new Year();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.update((RegularTimePeriod) year0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", "");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999), true);
      Year year1 = new Year(3763);
      timeSeries0.add((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.getValue((RegularTimePeriod) year1);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.getRawDataItem(year0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+3,Y-,ibuJ", "+3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(4, 1);
      timeSeries0.add((RegularTimePeriod) quarter1, (double) 1);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, false);
      timeSeries0.getValue(0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "TimePeriodValue[", "TimePeriodValue[");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999), true);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "e5z!", "e5z!");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.getTimePeriodClass();
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN, true);
      timeSeries0.getTimePeriod(0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("+Y#3,Y-,ibuJ", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("+Y#3,Y-,ibuJ", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, 4.0, false);
      timeSeries0.getRawDataItem(0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(" for that time period. Duplicates are not ", "Null 'series' argument.", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'series' argument.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "e`YZBE0HR~S^yJ6", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals("e`YZBE0HR~S^yJ6", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(9999);
      TimeSeries timeSeries0 = new TimeSeries(year0, "Range", "Range");
      timeSeries0.add((RegularTimePeriod) year1, 431.4890523391, false);
      timeSeries0.getNextTimePeriod();
      assertEquals(431.4890523391, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "M");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.getNextTimePeriod();
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(" but the series already contains an observation", " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      double double0 = timeSeries0.getMinY();
      assertEquals(9999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.update((RegularTimePeriod) year0, (Number) (-9999));
      double double0 = timeSeries0.getMinY();
      assertEquals((-9999.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, 0.0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, true);
      double double0 = timeSeries0.getMaxY();
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9999.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries("e5z!", " for{that tiEperiod. Duplicates ae not ", " for{that tiEperiod. Duplicates ae not ");
      timeSeries0.add((RegularTimePeriod) quarter0, Double.NEGATIVE_INFINITY, false);
      double double0 = timeSeries0.getMaxY();
      assertEquals(Double.NEGATIVE_INFINITY, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "{h@V/_rpU\" aZ_v`G", " for that time period. Duplicates are not ");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4484L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 9999, true);
      timeSeries0.getItemCount();
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, 4.0, false);
      timeSeries0.getIndex(year0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+3,Y-,ibuJ", "");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN, true);
      timeSeries0.getIndex(year0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("+3,Y-,ibuJ", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "e`YZBE0HR~S^yJ6", "e`YZBE0HR~S^yJ6");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("e`YZBE0HR~S^yJ6", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("e`YZBE0HR~S^yJ6", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.getDataItem(0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "The 'data' array must have length == 3.", "The 'data' array must have length == 3.");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "M");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Null 'series' argument.", "Null 'series' argument.", "Null 'series' argument.");
      MockDate mockDate0 = new MockDate(5288, 354, (-898), (-898), (-898), (-6));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 59.0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, 1354.5642);
      TimeSeries timeSeries1 = new TimeSeries(quarter0);
      timeSeries1.add((RegularTimePeriod) quarter0, 0.0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(" but the serie already contains an observation", " but the serie already contains an observation", " but the serie already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("e5z!", " for{that tiEperiod. Duplicates ae not ", " for{that tiEperiod. Duplicates ae not ");
      // Undeclared exception!
      try { 
        timeSeries0.update(44, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "e`YZBE0HR~S^yJ6", "e`YZBE0HR~S^yJ6");
      // Undeclared exception!
      try { 
        timeSeries0.update((-9999), (Number) (-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "{h@V/_rpU\" aZ_v`G", " for that time period. Duplicates are not ");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4484L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 9999, true);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(629L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(90);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      Stack<TimeSeriesTableModel> stack0 = new Stack<TimeSeriesTableModel>();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      stack0.addElement(timeSeriesTableModel0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Null 'series' argument.", "java.util.TimeZone", "Null 'series' argument.");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = new TimeSeries(quarter0, "", "the time period ");
      ArrayList<FixedMillisecond> arrayList0 = new ArrayList<FixedMillisecond>();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      arrayList0.add(fixedMillisecond0);
      timeSeries1.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1047));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("e`YZBE0HR~S^yJ6", "e`YZBE0HR~S^yJ6", "e`YZBE0HR~S^yJ6");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3428L);
      Week week0 = new Week(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "UFT<P>5~", "UFT<P>5~");
      TimeSeries timeSeries1 = timeSeries0.createCopy(15, 9999);
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      timeSeries1.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries1.getNextTimePeriod();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "e5z!", "e5z!");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-2410));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "8<Juz", "8<Juz");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "{h@V/_rpU\" aZ_v`G", " for that time period. Duplicates are not ");
      // Undeclared exception!
      try { 
        timeSeries0.delete(3, 3, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-281), 1453, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(23, 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "UFT<P>5~", "UFT<P>5~");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-9999), 1600);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Year year0 = new Year();
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) quarter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<Locale> stack0 = new Stack<Locale>();
      Locale locale0 = Locale.FRENCH;
      stack0.add(locale0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Stack<RegularTimePeriod> stack0 = new Stack<RegularTimePeriod>();
      timeSeries0.data = (List) stack0;
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(120, 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 120
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("V", "", "Range");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      stack0.add(timeSeries0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Year year0 = new Year();
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries("", (String) null, (String) null);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      Class<IsoEra> class0 = IsoEra.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of java.time.chrono.IsoEra.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      MockDate mockDate0 = new MockDate();
      timeSeries0.add((RegularTimePeriod) year0, 23.0, true);
      Second second0 = new Second(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", "Null 'series' argument.");
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period -396 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "org.jfree.data.time.Second", "[mean=");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Stack<RegularTimePeriod> stack0 = new Stack<RegularTimePeriod>();
      stack0.add((RegularTimePeriod) year0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 264.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<Day> stack0 = new Stack<Day>();
      JList<Day> jList0 = new JList<Day>(stack0);
      List<Day> list0 = jList0.getSelectedValuesList();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Lh");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 6892.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      Stack<TimeSeries> stack0 = new Stack<TimeSeries>();
      stack0.add(timeSeries0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (-0.5257297401568797));
      timeSeries0.createCopy(1, 1);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.delete(0, 0, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, "` jlZw.7wDt:suH");
      timeSeries0.delete((-9999), Integer.MAX_VALUE, false);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("` jlZw.7wDt:suH", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1045);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1951, (-558), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.removeAgedItems(false);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", (String) null);
      timeSeries0.removeAgedItems(false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) null);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(quarter0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year1, 184.190472);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries("Null 'anchor' argument.", "", "");
      TimeSeries timeSeries1 = new TimeSeries("Null 'anchor' argument.", "is ", "is ");
      timeSeries1.add((RegularTimePeriod) year0, Double.NaN, false);
      Date date0 = year0.getStart();
      Month month0 = new Month(date0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) (-9999));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries1.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 9999, false);
      timeSeries0.update(0, (Number) 9999);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.category.DefaultCategoryDataset", "Negative 'w' argument.", "org.jfree.data.category.DefaultCategoryDataset");
      MockDate mockDate0 = new MockDate(1222, (-1023), 2, 2, (-1023));
      Week week0 = new Week(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "e`YZBE0HR~S^yJ6", "e`YZBE0HR~S^yJ6");
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(" but the series already contains an observation", " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      MockDate mockDate0 = new MockDate((-9999), (-9999), 9999, 367, 9999, 367);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Year year1 = new Year(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (double) 9999);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "e5z!", "e5z!");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getIndex(year0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals("Null 'series' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(748);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 748, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(" for that time period. Duplicates are not ", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'series' argument.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "e`YZBE0HR~S^yJ6", "e`YZBE0HR~S^yJ6");
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("e`YZBE0HR~S^yJ6", timeSeries0.getDomainDescription());
      assertEquals("e`YZBE0HR~S^yJ6", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      Second second0 = new Second();
      Number number0 = timeSeries0.getValue((RegularTimePeriod) second0);
      timeSeries0.update((RegularTimePeriod) second0, number0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-1));
      TimeSeries timeSeries0 = new TimeSeries(year1, "Null 'anchor' argument.", "Null 'anchor' argument.");
      timeSeries0.add((RegularTimePeriod) year0, 1488.327461, false);
      timeSeries0.add((RegularTimePeriod) year1, (Number) (-9999));
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year(444);
      TimeSeries timeSeries0 = new TimeSeries(year1, "TimePeriodValue[", "TimePeriodValue[");
      timeSeries0.add((RegularTimePeriod) year1, (double) (-9999), true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "M");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.hashCode();
      assertEquals(59.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("");
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemCount(552);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(552, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "", (String) null);
      Object object0 = timeSeries0.clone();
      timeSeries0.setMaximumItemAge(4707L);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(4707L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "e5z!", "e5z!");
      TimeSeries timeSeries1 = new TimeSeries(quarter0, "e5z!", "e5z!");
      timeSeries1.add((RegularTimePeriod) quarter0, (Number) 1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1.0, timeSeries1.getMaxY(), 0.01);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      TimeSeries timeSeries1 = new TimeSeries(quarter0, "", "@6J7JgK/~oBR}0Y0OfE");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("@6J7JgK/~oBR}0Y0OfE", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1045);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0, "", "");
      TimeSeries timeSeries1 = new TimeSeries(serialDate0, "RdK24Sv!6KH5Y", (String) null);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
      assertEquals("RdK24Sv!6KH5Y", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      boolean boolean0 = timeSeries0.equals("");
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Null 'series' argument.", "Null 'series' argument.", "Null 'series' argument.");
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals("Null 'series' argument.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Null 'series' argument.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      timeSeries0.add(regularTimePeriod0, (double) (-9999), true);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) year0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(1, 1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+3,Y-,ibuJ", "+3,Y-,ibuJ");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("e`YZBE0HR~S^yJ6", "", "e`YZBE0HR~S^yJ6");
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "e`YZBE0HR~S^yJ6", "e`YZBE0HR~S^yJ6");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, "Unknown data");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(23, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Year year0 = new Year((-406));
      TimeSeries timeSeries0 = new TimeSeries(year0, "{h@V/_rpU\" aZ_v`G", " for that time period. Duplicates are not ");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-9999), (-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.add((RegularTimePeriod) quarter1, (double) 1);
      timeSeries0.delete(1, 1, false);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "M");
      // Undeclared exception!
      try { 
        timeSeries0.delete(9999, 444);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, false);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.delete((RegularTimePeriod) year1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "e5z!", "e5z!");
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals("e5z!", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("e5z!", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      timeSeries0.clear();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (double) (-9999));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.removeAgedItems((long) 9999, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (double) (-9999));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.removeAgedItems((long) 9999, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "+3,Y-,ibuJ", "");
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN, true);
      timeSeries0.removeAgedItems((-4074L), false);
      timeSeries0.removeAgedItems((long) 1, false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("+3,Y-,ibuJ", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "8<Juz", "8<Juz");
      timeSeries0.removeAgedItems(946L, true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("8<Juz", timeSeries0.getDomainDescription());
      assertEquals("8<Juz", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2737));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year1, Double.NaN, true);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.setMaximumItemAge(0L);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Year year0 = new Year();
      Year year1 = new Year((-2689));
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (double) (-9999));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 9999);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      Quarter quarter1 = new Quarter(1, 4);
      timeSeries0.add((RegularTimePeriod) quarter1, 0.0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      Class<Second> class0 = Second.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "M");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "e5z!", "e5z!");
      TimeSeries timeSeries1 = new TimeSeries("e5z!", " for{that tiEperiod. Duplicates ae not ", " for{that tiEperiod. Duplicates ae not ");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "+Y#3,Y-,ibuJ", "+Y#3,Y-,ibuJ");
      timeSeries0.add((RegularTimePeriod) year0, Double.NaN, true);
      timeSeries0.update((RegularTimePeriod) year0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, 1473.616727227);
      timeSeries0.update(1, (Number) 1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "e5z!", "e5z!");
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) year0, (Number) null);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 59);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
      Quarter quarter1 = new Quarter(4, 4);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter1, 4.0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (-2031.3448783));
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      timeSeries0.add(regularTimePeriod0, (-2790.048530220573));
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("e`YZBE0HR~S^yJ6", "", "e`YZBE0HR~S^yJ6");
      MockDate mockDate0 = new MockDate((-45L));
      Week week0 = new Week(mockDate0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
      Day day0 = new Day(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) hour0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(" but the serie already contains an observation", " but the serie already contains an observation", " but the serie already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "C!", "C!");
      TimeSeries timeSeries1 = new TimeSeries("C!", " for{that tiEperiod. Duplicates ae not ", " for{that tiEperiod. Duplicates ae not ");
      SerialDate serialDate0 = SerialDate.createInstance(1140);
      Date date0 = serialDate0.toDate();
      Hour hour0 = new Hour(date0);
      timeSeries1.add((RegularTimePeriod) hour0, (Number) 6);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(6.0, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
      timeSeries0.getTimePeriods();
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.getRawDataItem(year0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'series' argument.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1045);
      TimeSeries timeSeries0 = new TimeSeries(serialDate0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1748L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "g}", "g}");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Year year0 = new Year((-396));
      TimeSeries timeSeries0 = new TimeSeries(year0, "Null 'series' argument.", " for that time period. Duplicates are not ");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Null 'series' argument.", "Null 'series' argument.", "org.jfree.data.category.DefaultCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Null 'series' argument.", "Null 'series' argument.", "Null 'series' argument.");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, (String) null, "Unknown data");
      timeSeries0.setRangeDescription("Unknown data");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Unknown data", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (-2031.3448783));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (-2790.048530220573));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(23, minute0);
      Millisecond millisecond0 = new Millisecond((-2071), second0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "");
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Week week0 = new Week(2958465, 2);
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "");
      timeSeries0.getItems();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "g}", "g}");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("g}", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("g}", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "UFT<P>5~", "UFT<P>5~");
      timeSeries0.setDomainDescription("urYnrV{\fh4q+-OzWH");
      assertEquals("urYnrV{\fh4q+-OzWH", timeSeries0.getDomainDescription());
  }
}
