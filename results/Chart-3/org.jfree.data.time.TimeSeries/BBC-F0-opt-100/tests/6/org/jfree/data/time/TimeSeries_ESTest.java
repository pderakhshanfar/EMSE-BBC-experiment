/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:54:10 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("R=g", "R=g", "R=g");
      timeSeries0.hashCode();
      assertEquals("R=g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("R=g", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(" J:[s}L,!^-g-pqs=", " J:[s}L,!^-g-pqs=", (String) null);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(" J:[s}L,!^-g-pqs=", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 53);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week1, (RegularTimePeriod) week1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range");
      TimeSeries timeSeries1 = new TimeSeries("Range");
      timeSeries1.setMaximumItemCount(305);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(305, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setMaximumItemAge(2469L);
      TimeSeries timeSeries1 = new TimeSeries(millisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(2469L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (-2.147483648E9));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "od}d.;3[:A\"", "");
      MockDate mockDate0 = new MockDate(84, 999, 0, (-1688), 243, 0);
      Second second0 = new Second(mockDate0);
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.add(regularTimePeriod0, (Number) 0);
      timeSeries0.delete((RegularTimePeriod) second0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 53, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, 2.0);
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 1420.43);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 53);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      Short short0 = new Short((short) (-2));
      timeSeries0.add((RegularTimePeriod) week0, (Number) short0, false);
      timeSeries0.update(regularTimePeriod0, (Number) 1);
      assertEquals((-2.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (-2.147483648E9));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 2222.0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(regularTimePeriod0);
      assertEquals(2222.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week1, (double) 1);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("JXG2ft*e7t7J", "JXG2ft*e7t7J", "JXG2ft*e7t7J");
      assertEquals("JXG2ft*e7t7J", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("JXG2ft*e7t7J", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 35, 1799, 35, 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getValue(0);
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) Double.NaN);
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      timeSeries0.timePeriodClass = class0;
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      timeSeries0.getTimePeriodClass();
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, " for that time period. Duplicates are not ", "");
      MockDate mockDate0 = new MockDate(1896, 999, 999, 999, 1615, 121);
      Second second0 = new Second(mockDate0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.getTimePeriod(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getRawDataItem(day0);
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getRawDataItem(0);
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getRawDataItem(0);
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("#4lEmw", "1w3Tg.v]C-I0K\")>Yi", (String) null);
      String string0 = timeSeries0.getRangeDescription();
      assertNull(string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("1w3Tg.v]C-I0K\")>Yi", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(0, "", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 35, 1799, 35, 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getNextTimePeriod();
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3918, 3, 29, (-5018), (-3261), (-3261));
      Second second0 = new Second(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 35, 1799, 35, 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMinY();
      assertEquals(1799.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (-2932.4652));
      double double0 = timeSeries0.getMinY();
      assertEquals((-2932.4652), timeSeries0.getMaxY(), 0.01);
      assertEquals((-2932.4652), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1799, 2, 1799, (-17));
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "od}d.;3[:A\"", "od}d.;3[:A\"");
      MockDate mockDate0 = new MockDate(999, 999, 0, (-1688), 243, 0);
      Second second0 = new Second(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 35, 1799, 35, 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(1799.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1799.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("'!Ne");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (-946.7457));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-946.7457), timeSeries0.getMinY(), 0.01);
      assertEquals((-946.7457), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "AH=&[JvKs", "AH=&[JvKs");
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.getIndex(second0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 2348.67792145);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getIndex(week0);
      assertEquals(2348.67792145, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", string0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("", string0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getDataItem(0);
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3918);
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("od}d.;3[:A\"", "od}d.;3[:A\"", "od}d.;3[:A\"");
      Year year0 = new Year(3693);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-1.0));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 999);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(4, 51);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) (byte) (-105));
      timeSeries0.createCopy(0, 0);
      assertEquals((-105.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Week week0 = new Week();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (-243.48390579573228));
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-243.48390579573228), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 59);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (-30000.0));
      timeSeriesDataItem0.setSelected(true);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, 1420.43);
      assertEquals(1420.43, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0, true);
      TimeSeries timeSeries1 = new TimeSeries("AH=&[JJKs");
      timeSeries1.add((RegularTimePeriod) second0, (Number) 59, true);
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(59.0, timeSeries1.getMaxY(), 0.01);
      assertNotSame(timeSeries1, timeSeries2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("od}d.;3[:A\"", "od}d.;3[:A\"", "od}d.;3[:A\"");
      Year year0 = new Year(3693);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-1.0));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-1.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("R=g", "R=g", "R=g");
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1831, 2, 1831, (-17));
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.update(1, (Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-180), (Number) 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      arrayList0.add(locale_Category0);
      timeSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("JXG2fte7t7JVQ", "JXG2fte7t7JVQ", (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "permitted.  Try using the addOrUpdate() method.", "o',jtO^%8\".3@;U;GY");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("#4}leEmwg");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("od}d.;3[:A\"", "j", "od}d.;3[:A\"");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Value");
      ArrayList<Day> arrayList0 = new ArrayList<Day>();
      timeSeries0.data = (List) arrayList0;
      arrayList0.add((Day) null);
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      Hour hour0 = new Hour(0, day0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("XI", "Range", "");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "Range", ".");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Vector<TimeSeries> vector0 = new Vector<TimeSeries>();
      timeSeries0.data = (List) vector0;
      vector0.add((TimeSeries) null);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex(week0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Vector<TimeSeries> vector0 = new Vector<TimeSeries>();
      timeSeries0.data = (List) vector0;
      vector0.add(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex(week0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "(9i&", "(9i&");
      LinkedList<Year> linkedList0 = new LinkedList<Year>();
      Year year0 = new Year();
      linkedList0.push(year0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Year cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range");
      TimeSeries timeSeries1 = new TimeSeries("Range");
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.equals(timeSeries1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate(313L);
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(1799, 2840, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1799, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(" J:[s}L,!R^-g1-pqs=");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-706), 1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(999, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1799, 2, 1799, (-17));
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-17), 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "(9i&", "(9i&");
      LinkedList<Year> linkedList0 = new LinkedList<Year>();
      Year year0 = new Year();
      linkedList0.push(year0);
      timeSeries0.data = (List) linkedList0;
      try { 
        timeSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, "org.jfree.data.xy.XYIntervalSeriesCollection", "gP*U?9d @6Q3C}</D");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0.0, 2092.21, 0L, 59);
      Number number0 = oHLCDataItem0.getVolume();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, number0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("od}d.;3[:A\"");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, 1666.840387);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("#4lEmw");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0, "(9i&", "(9i&");
      LinkedList<Year> linkedList0 = new LinkedList<Year>();
      Year year0 = new Year();
      linkedList0.push(year0);
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      Class<String> class0 = String.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of java.lang.String.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 35, 1799, 35, 1799, 1799);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), 1799, (-1), 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 5-November-1903 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 4-January-2085 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Vector<TimeSeries> vector0 = new Vector<TimeSeries>();
      timeSeries0.data = (List) vector0;
      vector0.add((TimeSeries) null);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("4ck8");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 59, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Vector<String> vector0 = new Vector<String>(set0);
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate(20, 20, 1831, 20, 1831, (-17));
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0, "org.jfree.data.time.TimeSeries", "org.jfree.data.time.TimeSeries");
      Stack<Day> stack0 = new Stack<Day>();
      Day day0 = new Day();
      stack0.add(day0);
      timeSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "AH=&[JJKs", "AH=&[JJKs");
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (double) 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-2.147483648E9), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "AH=&[JvKs", "AH=&[JvKs");
      timeSeries0.add((RegularTimePeriod) second0, (Number) 0, true);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("#4lEmw");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 314L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "You are attempting to add an observation for ", "You are attempting to add an observation for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "AH=&[JvKs", "AH=&[JvKs");
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "AH=&[JvKs", "AH=&[JvKs");
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.delete(0, 0, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      Short short0 = new Short((short) (-2));
      timeSeries0.add((RegularTimePeriod) week0, (Number) short0, false);
      timeSeries0.removeAgedItems(false);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-573.7328));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      timeSeries0.removeAgedItems(true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 2222.0);
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Week week0 = new Week();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (-243.48390579573228));
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 1);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.update(0, (Number) 53);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1831, 2, 1831, (-17));
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      TimeSeries timeSeries0 = new TimeSeries("#4}leEmwg");
      timeSeries0.add(timeSeriesDataItem0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Wed Mar 06 08:30:43 GMT 1907 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (double) 1);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1799, 35, 35, 35, 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 1.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1831, 2, 1831, (-17));
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.getIndex(day0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Missing Q.", "=2OkSKf5kUW=Sc'gD", "Missing Q.");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "!@d/-'?gLQYslCgoU.a", "");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("!@d/-'?gLQYslCgoU.a", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-3130));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1831, 2, 1831, (-17));
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, (String) null, (String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week1);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week1, Double.NaN);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, Double.NaN);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 2222.0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.hashCode();
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2706, 2706, (-99), 2706, 1087);
      TimeZone timeZone0 = TimeZone.getTimeZone("WbJ:u");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 53);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week1, (RegularTimePeriod) week1);
      timeSeries1.add((RegularTimePeriod) week1, (-689.32936362), true);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 53, false);
      TimeSeries timeSeries1 = new TimeSeries(week1);
      timeSeries1.add((RegularTimePeriod) week1, (Number) 53);
      timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) 1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(53.0, timeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setMaximumItemCount(999);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(999, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemAge(1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1L, timeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      Month month0 = new Month();
      TimeSeries timeSeries1 = new TimeSeries(month0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries("Range");
      TimeSeries timeSeries1 = new TimeSeries(year0, "Range", "\"2.bQ");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Range", timeSeries1.getDomainDescription());
      assertEquals("\"2.bQ", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate(91, 2695, 3706, 248, 91);
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      boolean boolean0 = timeSeries0.equals(second0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range");
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) week0.LAST_WEEK_IN_YEAR);
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 53);
      timeSeries0.createCopy((RegularTimePeriod) week0, regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) week0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate(46, 1799, 46);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2502.0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "JM$:|~<U>-.e&", "JM$:|~<U>-.e&");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(Integer.MAX_VALUE, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-916), (-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.delete(1, 1, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(52, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "AH=&[JvKs", "AH=&[JvKs");
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
      timeSeries0.setMaximumItemAge(428L);
      timeSeries0.removeAgedItems((-2221L), true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(1, 2147462500);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 53, true);
      timeSeries0.setMaximumItemAge(53);
      timeSeries0.removeAgedItems((long) 53, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 1799, 35);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4lEmw");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 1799);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.removeAgedItems(314L, true);
      timeSeries0.removeAgedItems(3334L, true);
      assertEquals(1799.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "od}d.;3[:A\"", "od}d.;3[:A\"");
      timeSeries0.removeAgedItems(2516L, true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("od}d.;3[:A\"", timeSeries0.getRangeDescription());
      assertEquals("od}d.;3[:A\"", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(24L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, false);
      timeSeries0.setMaximumItemAge(103886L);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-1858.666));
      timeSeriesDataItem0.setValue((Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 2222.0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-1858.666));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockDate mockDate0 = new MockDate(41, 41, 1799, 41, 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 59, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 41);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2085, (-62), 3344);
      TimeZone timeZone0 = TimeZone.getTimeZone("7`Kc.\"&+9+Tff=>k2Jc");
      Locale locale0 = Locale.ENGLISH;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 1799, 2, 1799, (-17));
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) (-17));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      TimeSeries timeSeries1 = new TimeSeries("#4}leEmwg");
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.setRangeDescription("[Z>,>$6}!P;&OT=t$Q`");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("[Z>,>$6}!P;&OT=t$Q`", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      timeSeries0.update(0, (Number) null);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 2222.0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.update(0, (Number) 53);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      Float float0 = new Float(59.0);
      timeSeries0.update(0, (Number) float0);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "od}d.;3[:A\"", "od}d.;3[:A\"");
      MockDate mockDate0 = new MockDate(999, 999, 0, (-1688), 243, 0);
      Second second0 = new Second(mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) second0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockDate mockDate0 = new MockDate(91, 2695, 3706, 248, 91);
      Second second0 = new Second(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(second0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59, true);
      timeSeries0.update((RegularTimePeriod) second0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      Week week0 = new Week(999, 999);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week1, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 1, false);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Week 7, 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(0, "Requires start >= 0.", "");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-573.7328));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockDate mockDate0 = new MockDate(35, 35, 1799, 35, 1799, 1799);
      TimeZone timeZone0 = TimeZone.getTimeZone("#4}leEmwg");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries("#4}leEmwg");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, 1.7976931348623157E308);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      TimeSeries timeSeries1 = new TimeSeries(mockDate0, "#4}leEmwg", "Null 'end' argument.");
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1.7976931348623157E308, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("R=g");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2339L));
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      timeSeries0.getTimePeriods();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getRawDataItem(millisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1080L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1799);
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.setMaximumItemCount(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range", "org.jfree.data.statistics.SimpleHistogramDataset", "org.jfree.data.statistics.SimpleHistogramDataset");
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "Range", ".");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, Double.NaN);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update(0, (Number) 0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "!@d/-'?gLQYslCgoU.a", "");
      timeSeries0.delete((-3661), Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("!@d/-'?gLQYslCgoU.a", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Null 'start' argument.", "Null 'start' argument.");
      timeSeries0.setRangeDescription("Null 'start' argument.");
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'start' argument.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (-2.147483648E9));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, "!@d/-'?gLQYslCgoU.a", "");
      timeSeries0.getItems();
      assertEquals("!@d/-'?gLQYslCgoU.a", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Range");
      TimeSeries timeSeries1 = new TimeSeries("Range");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }
}
