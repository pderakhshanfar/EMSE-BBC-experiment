/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:42:33 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      Step step0 = new Step(1993, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      nameAttributeTest0.args = expressionArray0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, nameAttributeTest0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, coreOperationNotEqual0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      coreOperationNotEqual0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(1522, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      nameAttributeTest0.toString();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) (-952));
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-952), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) float0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLang(initialContext0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constant constant0 = new Constant("nae");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      coreOperationEqual0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(72, expressionArray1);
      constant0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Constant constant0 = new Constant("falsefalse");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      constant1.iterate((EvalContext) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, constant1);
      CoreFunction coreFunction0 = new CoreFunction(2155, expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Constant constant0 = new Constant("falseaB~`{^N/[ID");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float((-187.625));
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) constant0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((EvalContext) null).when(jXPathContextReferenceImpl0).getAbsoluteRootContext();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getAbsoluteRootContext();
      QName qName0 = new QName("\"lang\"", "\"lang\"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "4cin~a_4av,ew@CC{");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext0, (Pointer) null);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      UnionContext unionContext0 = new UnionContext(rootContext0, (EvalContext[]) null);
      EvalContext evalContext0 = rootContext0.getConstantContext(unionContext0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, false, nodeNameTest0);
      coreFunction0.functionLang(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Float float0 = new Float((double) 783);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(783, expressionArray1);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction783()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 783)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Constant constant0 = new Constant("nae");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      coreOperationMod0.toString();
      CoreFunction coreFunction0 = new CoreFunction(42, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1251, (Expression[]) null);
      QName qName0 = new QName("", "falseaB~`{^N/[ID");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      SelfContext selfContext1 = new SelfContext((EvalContext) null, nodeNameTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) selfContext1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreOperationNotEqual0);
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, predicateContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      evalContextArray0[0] = (EvalContext) rootContext1;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) (-841));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-841), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("key", "naefalse");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-841));
      ParentContext parentContext0 = new ParentContext(rootContext0, nodeTypeTest0);
      parentContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, float0, (Pointer) null);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(parentContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1263), expressionArray0);
      QName qName0 = new QName("namWefalse", "Cloning bean: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionKey(selfContext0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(81, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("Qd[w5knsb=DS", "Qd[w5knsb=DS");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: Qd[w5knsb=DS:Qd[w5knsb=DS
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Constant constant0 = new Constant("(B~`{^N/[ID");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      coreOperationLessThan0.toString();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      coreOperationLessThan0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("translate");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("-{~8p~@id+$*!?", "o");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      Step step1 = new Step(174, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, coreOperationMod0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction((-2223), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1948), (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(231, (Expression[]) null);
      QName qName0 = new QName("~x[ipGNth@wPQUJ", "S6gf:");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext(evalContextArray0[1], nodeNameTest0);
      evalContextArray0[4] = (EvalContext) parentContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(231, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(Integer.MIN_VALUE, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.createContextForStep(evalContextArray0[2], 231, nodeNameTest0);
      evalContextArray0[6] = null;
      evalContextArray0[7] = (EvalContext) rootContext0;
      evalContextArray0[8] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant("unknownFunction");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1399), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("=b>l`O[tj`m", "=b>l`O[tj`m");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant("fal");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(85, expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction85()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'fal')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("namefalse");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 783);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray1[0], coreOperationLessThan0);
      expressionArray1[1] = (Expression) coreOperationLessThan1;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      constant0.toString();
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1605, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1605, expressionArray0);
      coreFunction1.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1605()('null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("gl}_p");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("`K3#`^^J>UIma,>g cY");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "`K3#`^^J>UIma,>g cY");
      Step step0 = new Step((-2155), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(500, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-2155), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[1], expressionArray0[3]);
      expressionArray1[6] = (Expression) coreOperationEqual0;
      expressionArray1[7] = (Expression) coreOperationNegate0;
      Step step3 = new Step(500, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationGreaterThan0, expressionArray1[0]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.getArg1();
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("falseX}^HP^>.^[v2tKfd");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      constant0.iterate((EvalContext) null);
      Step step0 = new Step(18, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1612, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(861, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(36, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1612, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(Integer.MAX_VALUE, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 36, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Constant constant0 = new Constant("local-name");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Float float0 = new Float(8.0);
      Constant constant1 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("nYGaefalse", "local-name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "local-name");
      Step step0 = new Step(1387, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) constant1;
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) constant1;
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) coreOperationEqual0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-884), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("$a5Cfalsefalse", "$a5Cfalsefalse");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">=");
      Step step0 = new Step(1696, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1696, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-354), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray1, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, coreOperationNotEqual0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(1132, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant constant0 = new Constant("?gjLz%sz`F");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, constant0);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      expressionArray0[4] = (Expression) constant0;
      QName qName0 = new QName("Factory did not assign a collection to variable '");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      expressionArray0[8] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(341, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Constant constant0 = new Constant("nYGae");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, constant0);
      Float float0 = new Float(0.0F);
      Constant constant1 = new Constant(float0);
      CoreFunction coreFunction0 = new CoreFunction(69, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) constant0);
      QName qName0 = new QName("nYGae");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("concat");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, (NodeTest) null);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, descendantContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: nYGae
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationEqual0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      expressionArray0[3] = (Expression) coreOperationEqual0;
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant constant0 = new Constant("nYGae");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, constant0);
      coreOperationLessThan0.computeContextDependent();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      coreOperationEqual0.args = expressionArray0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nYGae");
      CoreFunction coreFunction0 = new CoreFunction(71, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      QName qName0 = new QName("preceding-sibling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(450, nodeNameTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      constant0.toString();
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(224);
      Step step0 = new Step((-1967), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1967), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      Step step2 = new Step(224, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(224, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[1], (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Constant constant0 = new Constant("nYGae");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant constant0 = new Constant("nYGae");
      Step[] stepArray0 = new Step[23];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.NamespaceContext");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(438, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(438, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant constant0 = new Constant("nYGae");
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.NamespaceContext");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(438, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(438, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(438, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(438, nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step4 = new Step(438, nodeNameTest1, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(438, nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(438, nodeNameTest1, (Expression[]) null);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, expressionArray0[0]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction((-2026), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-2026), expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      coreFunction1.functionSubstringBefore(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2026()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("JXPath internal error: compareChildNodes called for ");
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(coreOperationUnion0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual2;
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      expressionArray0[3] = (Expression) constant1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[3], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      Constant constant2 = new Constant("JXPath internal error: compareChildNodes called for ");
      expressionArray0[5] = (Expression) constant2;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      Step step0 = new Step(6, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, coreOperationMultiply0);
      expressionArray0[8] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationNegate0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual1;
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-813), expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("rj-3jG*");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      Step step0 = new Step((-569), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2616), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-569), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-569), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(512, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-569), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-4365), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(4763, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], locationPath0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[5];
      VariableReference variableReference0 = new VariableReference((QName) null);
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("contains");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "contains");
      Step step0 = new Step(2320, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      QName qName1 = new QName("contains");
      VariableReference variableReference1 = new VariableReference(qName1);
      expressionArray0[1] = (Expression) variableReference1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, variableReference0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference1, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(3833, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, true, nodeNameTest0);
      QName qName2 = new QName("contains", "contains");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName2, (String) null);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Constant constant0 = new Constant("FZ)peMp)");
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Constant constant0 = new Constant("FZ)peMp)");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      QName qName0 = new QName("'CYwJXk.n");
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      expressionArray0[2] = (Expression) coreOperationEqual0;
      expressionArray0[3] = (Expression) coreOperationEqual0;
      expressionArray0[4] = (Expression) coreOperationEqual0;
      expressionArray0[5] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1350);
      Step step0 = new Step(1350, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1350, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2048, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, expressionArray0[1]);
      expressionArray0[7] = (Expression) nameAttributeTest0;
      expressionArray0[8] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, expressionArray0[8]);
      CoreFunction coreFunction0 = new CoreFunction((-2856), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationNegate0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Float float0 = new Float((double) 0);
      Constant constant1 = new Constant(float0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(parentContext0, nodeTypeTest0, true, true);
      DescendantContext descendantContext0 = new DescendantContext(childContext0, true, nodeTypeTest0);
      constant1.iterate(descendantContext0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(308, expressionArray0);
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("translate");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[5], expressionArray0[0]);
      expressionArray1[7] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FZ)eM");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.compute(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant constant0 = new Constant("nae");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("P~-cnp#][+#sK_F", "contains");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) coreOperationLessThan1;
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2149, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("h:E");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      QName qName0 = new QName("string");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction((-2147), expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3299, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLast(initialContext0);
      QName qName0 = new QName("falseZ)pi1Mp)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "namWe");
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, true, nodeNameTest0);
      RootContext rootContext0 = ancestorContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      QName qName0 = new QName("nRmetrue");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      QName qName0 = new QName("FZ)eM", "FZ)eM");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1428), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FZ)eM");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionCeiling(selfContext0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2525, expressionArray0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("B", "B");
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      Locale locale0 = Locale.KOREAN;
      variablePointerFactory0.createNodePointer(qName0, (Object) unionContext0, locale0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 789);
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(789, expressionArray0);
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3277, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionNamespaceURI(initialContext0);
      coreFunction0.functionLast(initialContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3277()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Factory did not assxgn a collectionsto variable '");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "D[(AP;-JF6\"");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      int int0 = 1639;
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[0] = null;
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      QName qName0 = new QName("X}^H", "X}^H");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: X}^H:X}^H
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(802, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Constant constant1 = new Constant("Z)pi1");
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3310), expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, expressionArray0[1]);
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationAnd1);
      int int0 = 3;
      CoreFunction coreFunction1 = new CoreFunction((-3310), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      coreFunction3.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant constant0 = new Constant("Z)pi1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z)pi1");
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3310), expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationSubtract0);
      CoreFunction coreFunction1 = new CoreFunction((-3310), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(3782, expressionArray0);
      coreFunction2.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Constant constant0 = new Constant("Z)pi1");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3142), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Constant constant0 = new Constant("Z)pi1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FZ)peMp)");
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      coreFunction1.functionSubstring((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(2705, expressionArray0);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-3308), expressionArray0);
      coreFunction0.getArgumentCount();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "Incorrect number of arguments: ");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      coreFunction0.functionNot(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationNegate0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationNegate0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, coreOperationMultiply0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[4], coreOperationMultiply1);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-792), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3277, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2217), expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expressionArray0[0]);
      locationPath0.isSimplePath();
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, true, (NodeTest) null);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionLast(selfContext0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      namespaceContext0.nextNode();
      coreFunction0.functionLast(namespaceContext0);
      coreFunction0.functionPosition(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-^=vrbd#a#7Y(Z#eeJ:");
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("-^=vrbd#a#7Y(Z#eeJ:");
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("-^=vrbd#a#7Y(Z#eeJ:");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[6] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[2], expressionArray1, stepArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[5]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray1[6], (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      expressionPath0.createContextForStep(evalContext0, 309, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Constant constant0 = new Constant("name");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationEqual0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3595, expressionArray0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      coreFunction0.functionConcat(unionContext0);
      coreFunction0.functionContains(unionContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      constant0.toString();
      QName qName0 = new QName("R_1@<2>L!0hMR!MV", "R_1@<2>L!0hMR!MV");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, extensionFunction0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-208), expressionArray0);
      coreFunction0.getArg1();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, (Expression) null);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(395, expressionArray1);
      coreFunction1.getArg2();
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction2 = new CoreFunction(395, expressionArray1);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ\"peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionConcat((EvalContext) null);
      coreOperationGreaterThan0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("~?qiNVZL6;Wa>sk");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "1{,+NaWm");
      Step step0 = new Step((-1032), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2147483647), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionNumber(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float((double) 837);
      CoreFunction coreFunction0 = new CoreFunction(837, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, float0, (Pointer) null);
      QName qName0 = new QName("round");
      Locale locale0 = Locale.forLanguageTag("round");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      PredicateContext predicateContext0 = new PredicateContext(rootContext1, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(837, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Float
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(837, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) float0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionNamespaceURI(initialContext0);
      coreFunction0.functionBoolean(initialContext0);
      coreFunction0.functionNot(initialContext0);
      coreFunction0.functionStringLength(initialContext0);
      coreFunction0.functionLang(initialContext0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      Locale locale0 = Locale.US;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, descendantContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(837, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) float0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionNamespaceURI(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(837, expressionArray0);
      Double double0 = Expression.ONE;
      coreFunction1.computeContextDependent();
      coreFunction1.functionName((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant("name");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationEqual0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(59, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction59()('name', 'name')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], extensionFunction0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-154), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-154), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-2192);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-2192), expressionArray0);
      Step[] stepArray0 = new Step[4];
      NodeTest nodeTest0 = null;
      Step step0 = new Step((-62361079), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2192), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      int int1 = 3053;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FZ)eM");
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, expressionArray0[0]);
      QName qName0 = new QName("FZ)eM");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Z)pi1");
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeNameTest0, true, true);
      DescendantContext descendantContext0 = new DescendantContext(childContext0, true, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionLang(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 5;
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[16];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      expressionArray1[7] = (Expression) coreOperationSubtract0;
      expressionArray1[8] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(899, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      Expression[] expressionArray2 = new Expression[1];
      Expression expression0 = coreFunction0.getArg2();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, expression0);
      expressionArray2[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-664), expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(837, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) float0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionNamespaceURI(evalContext0);
      coreFunction0.functionBoolean(evalContext0);
      coreFunction0.functionNot(evalContext0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Step step0 = new Step(18, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(18, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(18, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-3139), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1002), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[7];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray0[1]);
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreOperationDivide0;
      Step step6 = new Step((-3139), nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-3139), nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("I~-Em,%sH{I]<(se");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, variableReference0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[0], expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationEqual1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[5], expressionArray0[4]);
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, expressionArray0[4]);
      expressionArray0[8] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-588), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4ntS*C>");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(837, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      coreFunction2.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-88), (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionNamespaceURI(initialContext0);
      coreFunction0.functionName(initialContext0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<_l'");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      coreFunction1.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("` q.H4u^|};{S", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Step step0 = new Step((-1800), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1539));
      Step step1 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      expressionArray0[3] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ\"peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      coreFunction0.functionContains((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id('FZ\"peMp)', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      coreFunction0.isContextDependent();
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("\"+\"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"+\"");
      Step step0 = new Step(14, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "falseFZ)peMp)");
      Step step1 = new Step(30, nodeNameTest1, (Expression[]) null);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FZ)pe");
      Step step2 = new Step(30, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(58, nodeNameTest1, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(14, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(7, nodeNameTest1, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(30, nodeNameTest1, (Expression[]) null);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest1);
      ChildContext childContext0 = new ChildContext(descendantContext0, processingInstructionTest0, true, true);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(childContext0, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest1);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 837);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(837, expressionArray0);
      coreFunction1.functionFloor((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) (-3140));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3140), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) float0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredicateContext predicateContext0 = new PredicateContext(evalContext0, expressionArray0[0]);
      coreFunction0.functionCount(predicateContext0);
      coreFunction0.functionFloor(evalContext0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2709), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("\"number\"", "U\"49e#Y7U^F=|");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"number\"");
      Step step2 = new Step((-2709), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2325), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2325), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) (-2));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      JXPathContext.newContext((Object) float0);
      CoreFunction coreFunction1 = new CoreFunction((-2), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1512, expressionArray0);
      QName qName0 = new QName("\"5@{", "\"5@{");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"5@{");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      coreFunction2.functionCeiling(descendantContext0);
      coreFunction0.getArgumentCount();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ\"peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AT/MR_");
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("AT/MR_");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("X}^H");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], coreOperationMultiply0);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("AT/MR_");
      Step step0 = new Step(4, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(4694, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[0];
      Step step1 = new Step(4694, (NodeTest) null, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], coreOperationAnd0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4694, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, expressionPath0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot set value for xpath: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionTranslate(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("DH`lI\"nZ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(215, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      coreFunction0.functionSubstringAfter(namespaceContext0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Byte byte0 = new Byte((byte)72);
      Constant constant0 = new Constant(byte0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("&vuH&\"nv P5=}N+>");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, 72, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) + org.apache.commons.jxpath.ri.compiler.Constant@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000005) + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000006) + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008, org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002 or org.apache.commons.jxpath.ri.compiler.Constant@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000006 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004, $:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      QName qName0 = new QName("FZ)pe", "\"string\"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      coreFunction0.getArg1();
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[0] = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[3], expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual1, expressionArray0[4]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("falseFZ)peMp)", "falseFZ)peMp)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "falseFZ)peMp)");
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, false, false);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, expressionArray0[1]);
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(591, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(591, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) (-10));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-10), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) float0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionNamespaceURI(evalContext0);
      coreFunction0.functionBoolean(evalContext0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) (-2));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) float0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeContextDependent();
      PredicateContext predicateContext0 = new PredicateContext(evalContext0, expressionArray0[0]);
      coreFunction0.functionCount(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.getFunctionCode();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(19, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      QName qName0 = new QName("P+O3XN", "P+O3XN");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "P+O3XN");
      Step step5 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2);
      Step step6 = new Step(19, nodeTypeTest1, expressionArray0);
      stepArray0[6] = step6;
      NodeTypeTest nodeTypeTest2 = new NodeTypeTest((-546));
      Step step7 = new Step((-546), nodeTypeTest2, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      Double double0 = new Double(19);
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(selfContext0, nodeTypeTest1);
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest1);
      ChildContext childContext0 = new ChildContext(ancestorContext0, nodeTypeTest0, false, false);
      // Undeclared exception!
      coreFunction0.functionNull(childContext0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) (-10));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-10), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) float0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionNamespaceURI(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-10()(-10)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Constant constant0 = new Constant("falseX}^HP^>.^[v2tKfd");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Integer integer0 = new Integer(25);
      Constant constant1 = new Constant(integer0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(".8]gLxM[?M9?{6");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionSubstring((EvalContext) null);
      NamespaceContext namespaceContext1 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("{-8[k:KoY^OI:V");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v");
      Constant constant0 = new Constant("|");
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-346), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")|_&&");
      QName qName0 = new QName("false", "v");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      coreFunction0.functionSubstring(ancestorContext0);
      NamespaceContext namespaceContext1 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      coreFunction1.functionSubstringAfter(namespaceContext1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      coreFunction0.functionLast(namespaceContext0);
      QName qName0 = new QName((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray1);
      coreFunction1.getFunctionName();
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray1);
      coreFunction2.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationSubtract0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[5] = (Expression) coreOperationEqual1;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(531, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("yY!k1(Ja{:P)[qp");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "false");
      Step step2 = new Step((-223), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(29, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2617), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-238), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-2617), nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(", ");
      Step step8 = new Step(32, processingInstructionTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(531, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, (Expression) null);
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeTypeTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 22;
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key('FZ)peMp)')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      QName qName1 = new QName("Factory cannot define variable '");
      Float float0 = new Float(0.0F);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.Constant@0000000003 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004), 0, 0, -(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), org.apache.commons.jxpath.ri.compiler.Constant@0000000003 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004), org.apache.commons.jxpath.ri.compiler.Constant@0000000003 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("2BU!kz*141<", "falseFZ)eMp)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "falseFZ)eMp)");
      Step step0 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      expressionArray0[1] = (Expression) coreFunction0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) coreFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray2);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion1, expressionArray2[0]);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[8];
      Constant constant0 = new Constant("XXj9GS");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationNegate0);
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, expressionArray1[0]);
      expressionArray1[3] = (Expression) coreOperationNotEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[1], constant0);
      expressionArray1[4] = (Expression) nameAttributeTest0;
      Long long0 = new Long((-2562));
      Constant constant1 = new Constant(long0);
      expressionArray1[5] = (Expression) constant1;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[3], expressionArray1, stepArray0);
      expressionArray1[6] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray1[6], expressionArray0, stepArray0);
      expressionArray1[7] = (Expression) expressionPath1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("@", "@");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.isContextDependent();
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2562), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "XXj9GS");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray1[5], (Pointer) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "@");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      coreFunction0.functionStringLength(rootContext0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("$nvggb2K~Ia#)UxP", "$nvggb2K~Ia#)UxP");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 - org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 - (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", "@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, variableReference0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-513), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-513));
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeTypeTest0, false, true);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) childContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) namespaceContext0;
      evalContextArray0[4] = (EvalContext) childContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) namespaceContext0;
      evalContextArray0[7] = (EvalContext) namespaceContext0;
      evalContextArray0[8] = (EvalContext) childContext0;
      UnionContext unionContext0 = new UnionContext(childContext0, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionFloor(unionContext0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(3261);
      Integer integer1 = Integer.getInteger("Was expecting:", integer0);
      Constant constant0 = new Constant(integer1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("FZ)eM", "Was expecting:");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2339, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      QName qName0 = new QName("-7|S<K#<");
      Expression[] expressionArray0 = new Expression[5];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      expressionArray0[2] = (Expression) coreFunction1;
      Constant constant0 = new Constant((String) null);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], constant0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 4;
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;", "QH/nf~|_\"}AhUV?D$;");
      QName qName1 = new QName("Factory cannot define variable '");
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-434), (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2339, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2339, (Expression[]) null);
      JXPathContext.newContext((Object) "{\"");
      CoreFunction coreFunction2 = new CoreFunction(20, (Expression[]) null);
      coreFunction1.getFunctionName();
      coreFunction2.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant constant0 = new Constant("FZ)peMp)");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2544, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3241, expressionArray0);
      coreFunction1.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationOr0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[3], coreOperationLessThanOrEqual1);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationMultiply0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[1], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationEqual1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(coreOperationOr0, expressionArray0[6]);
      expressionArray0[8] = (Expression) coreOperationEqual2;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationEqual1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationUnion0);
      Locale locale0 = Locale.FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, jXPathContext1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, nodeTypeTest0);
      RootContext rootContext0 = ancestorContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      Constant constant0 = new Constant("P?hH]:$UB$mraPh u");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], coreOperationAdd1);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("starts-with");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(100, expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(100);
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionNumber(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2339, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2339, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "{\"");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLocalName(evalContext0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)M5TJr+\"E");
      Step step0 = new Step(2339, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(26, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(33, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(2339, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(17, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("T)M5TJr+\"E");
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[2] = null;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction1 = new CoreFunction(2339, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      Step step0 = new Step((-588), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2616), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-588), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-588), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(512, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-588), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-4365), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(4763, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], locationPath0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Constant constant0 = new Constant("FZ)peMp)");
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Short short0 = new Short((short)1021);
      Constant constant0 = new Constant(short0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2339, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2339, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2339, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "{\"");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionNamespaceURI(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2339()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-1310), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("falseFZ)peMp)", "falseFZ)peMp)");
      Expression[] expressionArray1 = new Expression[2];
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[0] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray1[1] = (Expression) variableReference1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1252));
      Constant constant0 = new Constant("FZ)pe");
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      int int0 = 10;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("round");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1537);
      Step step0 = new Step(1537, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[0];
      Step step1 = new Step(1, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-1443), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray2[2] = (Expression) coreOperationAnd0;
      expressionArray2[3] = (Expression) constant0;
      expressionArray2[4] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[6] = (Expression) constant0;
      expressionArray2[7] = (Expression) constant0;
      expressionArray2[8] = (Expression) constant0;
      Step step4 = new Step(1537, nodeTypeTest0, expressionArray2);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray2[6]);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, expressionArray2[8]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("$d@>:nO7%uA87zf");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step((-178), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2705), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-178), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-178), (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      coreFunction0.functionNull(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(2055, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1267));
      CoreFunction coreFunction1 = new CoreFunction((-1267), (Expression[]) null);
      coreFunction0.computeValue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;", "QH/nf~|_\"}AhUV?D$;");
      QName qName1 = new QName("Factory cannot define variable '");
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      coreFunction1.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 22;
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      AncestorContext ancestorContext1 = new AncestorContext(ancestorContext0, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.isContextDependent();
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      coreFunction1.functionStringLength(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationMod0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAnd0);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(636, expressionArray0);
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(636, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(636, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1048), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step3 = new Step((-435), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(636, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(636, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, processingInstructionTest0, true);
      expressionPath0.createContextForStep(precedingOrFollowingContext0, (-3049), processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(827, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls", "FZ)pe");
      Locale locale0 = Locale.CANADA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.compute(evalContext0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last('FZ)peMp)', null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("concat");
      CoreFunction coreFunction0 = new CoreFunction((-571), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("concat");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1751);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Float float0 = new Float((double) (-1));
      Constant constant0 = new Constant(float0);
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("F(i", "falseFZ)peMp)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "F(i");
      Step step0 = new Step(1746, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(33, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(33, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("+g#}P`%;3Ijuf#9");
      Step step3 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1746, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(21, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step6 = new Step(Integer.MAX_VALUE, nodeNameTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(33, expressionArray0);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("\"");
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-541), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = 33;
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-364), expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      long long0 = (-4292L);
      // Undeclared exception!
      try { 
        coreOperationMultiply0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "format-number");
      QName qName0 = new QName("");
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;", "QH/nf~|_\"}AhUV?D$;");
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      QName qName1 = new QName("Factory cannot define variable '");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(string-length(), null, string-length(), string-length())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FZ)peMp)");
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("contains");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[0]);
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2162), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-106), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-106()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 8;
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-1401));
      Expression[] expressionArray0 = new Expression[2];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1401), expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-1401));
      Expression[] expressionArray0 = new Expression[2];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()(boolean(), boolean(), boolean(), boolean(), boolean())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-1401));
      Expression[] expressionArray0 = new Expression[2];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true($null, -org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(67, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "` q.H4u^|};{S");
      EvalContext evalContext0 = null;
      int int0 = 17;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(15);
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FZ)peMp)");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, processingInstructionTest0);
      coreFunction0.functionSubstring((EvalContext) null);
      NamespaceContext namespaceContext1 = new NamespaceContext(namespaceContext0, nodeNameTest0);
      coreFunction0.functionSubstringAfter(namespaceContext1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(4694, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[0];
      Step step1 = new Step(4694, (NodeTest) null, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], coreOperationAnd0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4694, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, expressionPath0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot set value for xpath: ");
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionTranslate(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[1];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray1[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(659, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      CoreFunction coreFunction0 = new CoreFunction((-571), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-571()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "string";
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      QName qName1 = new QName("string");
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest1, false, false);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3049), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3049()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      QName qName0 = new QName(",f&]JkD'qGy/", ",f&]JkD'qGy/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "9f|M5}dgDdrO \"CDk:v");
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      QName qName0 = new QName("` q.H4u^|};{S", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1800), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1800()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "string";
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      QName qName1 = new QName("string");
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest1, false, false);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string-length", string0);
      
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      CoreFunction coreFunction0 = new CoreFunction(501, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      nodeTypeTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction1.functionNot(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-13), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("X}^HP^>.^[v2tKfd");
      expressionArray0[4] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[5]);
      expressionArray0[7] = (Expression) coreOperationNegate1;
      Constant constant1 = new Constant("X}^HP^>.^[v2tKfd");
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction1 = new CoreFunction((-13), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-13));
      QName qName0 = new QName("Incorrect number of arguments: ", "Incorrect number of arguments: ");
      CoreFunction coreFunction2 = new CoreFunction((-13), (Expression[]) null);
      coreFunction1.getFunctionName();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(87);
      CoreFunction coreFunction1 = new CoreFunction(87, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) selfContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) selfContext0;
      evalContextArray0[4] = (EvalContext) selfContext0;
      evalContextArray0[5] = null;
      AttributeContext attributeContext0 = new AttributeContext(evalContextArray0[0], nodeNameTest0);
      evalContextArray0[6] = (EvalContext) attributeContext0;
      evalContextArray0[7] = (EvalContext) selfContext0;
      evalContextArray0[8] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      String string0 = "string";
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      QName qName1 = new QName("string");
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid argument type for 'sum': ");
      Constant constant0 = new Constant("&quot;");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction((-13), (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-13()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;", "QH/nf~|_\"}AhUV?D$;");
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[0] = null;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expression0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Expression expression1 = coreFunction0.getArg2();
      expressionArray0[2] = expression1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-1272), expressionArray0);
      QName qName1 = new QName("Factory cannot define variable '");
      CoreFunction coreFunction2 = new CoreFunction(41, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string-length");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "X}^HP^>.^[v2tKfd";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      EvalContext evalContext0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      int int0 = (-1885);
      CoreFunction coreFunction0 = new CoreFunction((-1885), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1885()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      QName qName0 = new QName("g]3yQ_!yl2|]*q6", "\"string-length\"");
      Locale locale0 = new Locale("]!T4!");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "g]3yQ_!yl2|]*q6", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      SelfContext selfContext0 = new SelfContext(rootContext0, (NodeTest) null);
      coreFunction0.functionString(selfContext0);
      coreFunction0.computeContextDependent();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      QName qName1 = new QName((String) null, "cmDRDNUs ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      coreFunction0.getArgumentCount();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(33, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(33);
      Step step0 = new Step(3, nodeTypeTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2883);
      Step step1 = new Step(4393, nodeTypeTest0, (Expression[]) null);
      Step step2 = new Step((-1539), nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[6];
      stepArray0[0] = step1;
      stepArray0[1] = step2;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step step3 = new Step((-494), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step3;
      stepArray0[3] = step2;
      stepArray0[4] = step0;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionPath0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[1], (Expression[]) null, stepArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) expressionPath1;
      nodeTypeTest0.toString();
      CoreFunction coreFunction1 = new CoreFunction(33, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      QName qName0 = new QName("` q.H4u^|};{S", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1800), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAdd0);
      coreFunction0.compute(predicateContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1800()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FZ)peMp)");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, processingInstructionTest0);
      coreFunction0.functionSubstring(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X}^HP^>.^[v2tKfd");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("FZ)peMp)");
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id('FZ)peMp)', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[9];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray1[0] = (Expression) locationPath0;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[1] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionArray1[0]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[1], coreOperationMod0);
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, variableReference0);
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[4] = (Expression) coreOperationAdd0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray1[5] = (Expression) variableReference1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[4], expressionArray1[4]);
      expressionArray1[6] = (Expression) nameAttributeTest0;
      coreOperationAdd0.toString();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[7] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray1[8] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction((-2589), expressionArray1);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2589()(, $:, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003 != org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 > org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003, , $:, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007 = org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007, , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;", "QH/nf~|_\"}AhUV?D$;");
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      QName qName1 = new QName("Factory cannot define variable '");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string-length");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(string-length(), string-length(), string-length(), string-length())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = 13;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2799), expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction((-2799), expressionArray1);
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreFunction2;
      expressionArray2[1] = (Expression) coreFunction2;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreFunction0;
      expressionArray2[4] = (Expression) coreFunction2;
      expressionArray2[5] = (Expression) coreFunction1;
      expressionArray2[6] = (Expression) coreFunction1;
      expressionArray2[7] = (Expression) coreFunction0;
      expressionArray2[8] = (Expression) coreFunction2;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction2, expressionArray2, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = 2;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "knP)v");
      nodeTypeTest0.toString();
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("count");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationOr0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction(35, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr2 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr2;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], coreOperationOr1);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationOr0, coreOperationOr1);
      expressionArray0[6] = (Expression) nameAttributeTest1;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, expressionArray0[3]);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, nameAttributeTest0);
      Float float0 = new Float(0.0F);
      Constant constant1 = new Constant(float0);
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd1, expressionArray0[2]);
      int int0 = 40;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0K3D&|y4]");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(33, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3760, (Expression[]) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction1.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2799), expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction((-2799), expressionArray1);
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreFunction2;
      expressionArray2[1] = (Expression) coreFunction2;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreFunction0;
      expressionArray2[4] = (Expression) coreFunction2;
      expressionArray2[5] = (Expression) coreFunction1;
      expressionArray2[6] = (Expression) coreFunction1;
      expressionArray2[7] = (Expression) coreFunction0;
      expressionArray2[8] = (Expression) coreFunction2;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction2, expressionArray2, stepArray0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeTypeTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(selfContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction2.functionKey(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction((-2006), (Expression[]) null);
      coreFunction0.isContextDependent();
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(419, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(33, (Expression[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(33);
      coreFunction0.getArgumentCount();
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction33()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(33, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(33);
      coreFunction0.getArgumentCount();
      String string0 = "";
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.isContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.functionNull((EvalContext) null);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      QName qName1 = new QName("", "");
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      Object object0 = new Object();
      EvalContext evalContext0 = rootContext1.getConstantContext(object0);
      coreFunction0.functionStringLength(evalContext0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("` q.H4u^|};{S", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Step step0 = new Step((-1800), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1539));
      Step step1 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      expressionArray0[3] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "string");
      QName qName1 = new QName("string");
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3635, (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3635()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-541));
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4658), expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-4658), expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(descendantContext0, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("uhJYQiZ,g$MOc^]v0uP");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      ParentContext parentContext1 = new ParentContext(namespaceContext0, processingInstructionTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext1, basicNodeSet0);
      expressionPath0.createContextForStep(nodeSetContext0, 4609, (NodeTest) null);
      coreFunction0.compute(namespaceContext0);
      int int0 = 2;
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(2, (Expression[]) null);
      coreFunction2.functionStringLength(parentContext0);
      NodeSetContext nodeSetContext1 = new NodeSetContext(parentContext1, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext1, processingInstructionTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Float float0 = new Float((-125.711F));
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()((org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002) >= org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, -125.71099853515625, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.toString();
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      Short short0 = new Short((short)715);
      Constant constant0 = new Constant(short0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(568, expressionArray0);
      coreFunction0.getArg2();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("yA");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer1);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      Short short0 = new Short((short)715);
      Constant constant0 = new Constant(short0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(568, expressionArray0);
      coreFunction0.getArg1();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      QName qName0 = new QName("", "=[p=q6h~ZTD&;xt1cJ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(nodeNameTest0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4519), expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.RootContext");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4519()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2399, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(851);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      Step step0 = new Step(2399, nodeTypeTest0, (Expression[]) null);
      Step step1 = new Step(30, nodeTypeTest0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 2399, nodeTypeTest0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(descendantContext0, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("uhJYQiZ,g$MOc^]0uP");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      ParentContext parentContext1 = new ParentContext(namespaceContext0, processingInstructionTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext1, basicNodeSet0);
      expressionPath0.createContextForStep(nodeSetContext0, 4609, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("position", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4658), expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      String string0 = "string";
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      String string1 = "JdH]r4'-j&xaJm@4";
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "JdH]r4'-j&xaJm@4");
      boolean boolean0 = true;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4658), expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      String string0 = "string";
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      ChildContext childContext1 = new ChildContext(childContext0, nodeNameTest0, false, false);
      coreFunction0.functionFalse(childContext1);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4658()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      NodeTest nodeTest0 = null;
      Step step0 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(descendantContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreFunction0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      expressionArray0[8] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step(26, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      Step step1 = new Step(26, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1234), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(26, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(18, nodeTypeTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(26, nodeTypeTest0, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step(26, nodeTypeTest0, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step(13, nodeTypeTest0, (Expression[]) null);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep(precedingOrFollowingContext0, 23, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "knP)v");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("boolean()", string0);
      
      coreFunction0.functionNull((EvalContext) null);
      assertEquals(18, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      NodeTest nodeTest0 = null;
      Step step0 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(descendantContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      coreFunction0.functionNumber(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Float float0 = new Float((-112.35681F));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName(";:m>g?b");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, variableReference0);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[6]);
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      Short short0 = new Short((short)715);
      Constant constant0 = new Constant(short0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationOr0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      coreOperationEqual0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(568, expressionArray0);
      coreFunction0.getArg2();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      QName qName0 = new QName("yA");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, qName0);
      EvalContext evalContext0 = rootContext1.getConstantContext(variablePointer1);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction568()(715, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002) = org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{aAe5=x");
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2191, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "j$o|2<=f");
      QName qName1 = new QName("substring", "string");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(2399, (Expression[]) null);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(2399, expressionArray0);
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2399);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-2880), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[2]);
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      Step step3 = new Step((-4519), processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(1474, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-2880), processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step((-1772), processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step((-2880), processingInstructionTest0, expressionArray1);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray1, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[6], coreOperationGreaterThan0);
      expressionArray0[7] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan1, coreOperationNegate1);
      expressionArray0[8] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(24, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(406);
      Step step0 = new Step((-8), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      Byte byte0 = new Byte((byte)0);
      Constant constant0 = new Constant(byte0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate1, locationPath0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(1599, (Expression[]) null);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1599, coreFunction0.getFunctionCode());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationUnion0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(2742, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      QName qName1 = new QName("QH/nf~|_\"}AhUV?D$;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "QH/nf~|_\"}AhUV?D$;");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2399, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(851);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction((-4658), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "substring");
      QName qName1 = new QName("string", "bf~!F1$u,Fj{Hk");
      CoreFunction coreFunction0 = new CoreFunction((-4658), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2399, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2399()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2399, (Expression[]) null);
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(851);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2399()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4658), expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      String string0 = "string";
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "substring");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4658()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Constant constant0 = new Constant("normalize-space");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, coreOperationLessThanOrEqual0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNegate0);
      QName qName0 = new QName("2M0cl=XVa3~");
      QName qName1 = new QName("normalize-space", "2M0cl=XVa3~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, (Expression[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, (Expression[]) null, (Step[]) null);
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, (Expression[]) null);
      extensionFunction1.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "org.apache.commons.jxpath.ri.compiler.Operation");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AttributeContext attributeContext1 = new AttributeContext((EvalContext) null, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(attributeContext1, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2191, (Expression[]) null);
      QName qName0 = new QName("QH/nf~|_\"}AhUV?D$;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2191()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      QName qName0 = new QName("` q.H4u^|};{S", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeNameTest0);
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeNameTest0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeNameTest0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeNameTest0, false);
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1226, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(691, nodeTypeTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(Integer.MIN_VALUE);
      Step step1 = new Step(Integer.MIN_VALUE, nodeTypeTest1, (Expression[]) null);
      Step step2 = new Step(1, nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[8];
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      stepArray0[2] = step1;
      stepArray0[3] = step1;
      stepArray0[4] = step2;
      stepArray0[5] = step0;
      stepArray0[6] = step1;
      stepArray0[7] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, expressionPath0);
      ExpressionPath expressionPath1 = new ExpressionPath(variableReference0, (Expression[]) null, (Step[]) null);
      CoreFunction coreFunction1 = new CoreFunction(541, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1226()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C\"wdKFuJ'!l]1H1b#C3");
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionPosition(predicateContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      nodeTypeTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("2M0cl=XVa3~");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], coreOperationLessThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("N[&ZnT+lem ?M_U");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, (Step[]) null);
      expressionArray0[4] = (Expression) expressionPath0;
      extensionFunction0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-2493), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "N[&ZnT+lem ?M_U");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      evalContextArray0[1] = (EvalContext) attributeContext0;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionID(unionContext0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      nodeTypeTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("` q.H4u^|};{S", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Step step0 = new Step((-1800), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1539));
      Step step1 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      expressionArray0[3] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2006), (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2006()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("` q.H4u^|};{S", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Step step0 = new Step((-1800), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1539));
      Step step1 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(4393, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      expressionArray0[3] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2399, (Expression[]) null);
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(851);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2399()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      nodeTypeTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("$.3JV~!", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(1995, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1824, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3345, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-46), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1995, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(4739, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      Step step6 = new Step(1824, nodeNameTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionArray1[6]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[6], expressionArray1[3]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationLessThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreOperationLessThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[3], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3345, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction3345()", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1166, expressionArray0);
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("XXIz5Y^3S`s");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      Step step1 = new Step(1166, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-6), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step4 = new Step((-2055), nodeNameTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-413), nodeNameTest1, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 64, nodeNameTest0);
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("~33a", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        jXPathContext0.getNodeSetByKey("~33a", decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(406);
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      Byte byte0 = new Byte((byte)0);
      Constant constant0 = new Constant(byte0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationSubtract0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate1, coreOperationDivide0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-2116), expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(6, int0);
      assertEquals((-2116), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4658), expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      String string0 = "string";
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4658()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1226, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1226()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      coreOperationLessThanOrEqual0.isContextDependent();
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, coreOperationLessThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationDivide1;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[4] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference((QName) null);
      expressionArray0[5] = (Expression) variableReference1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1618), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variableReference0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[5]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreFunction0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4519), expressionArray0);
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4519()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1596), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1217), expressionArray0);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[5];
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1217()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step((-3229), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(Integer.MIN_VALUE, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(Integer.MIN_VALUE, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-3229), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      Step step5 = new Step(Integer.MIN_VALUE, nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[4] = (Expression) constant0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[5] = (Expression) constant1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], locationPath0);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[7] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[4], coreOperationLessThanOrEqual0);
      expressionArray0[8] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-3229), expressionArray0);
      coreFunction0.getArg3();
      assertEquals((-3229), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = null;
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      coreOperationDivide0.args = expressionArray0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, variableReference0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(856, expressionArray0);
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationNotEqual0);
      Object object0 = null;
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationDivide1, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Float float0 = new Float((-125.711F));
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName(";:m>g?b");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, variableReference0);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[6]);
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat((org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002) >= org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, -125.71099853515625, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), $;:m>g?b, org.apache.commons.jxpath.ri.compiler.Constant@0000000004 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 or org.apache.commons.jxpath.ri.compiler.Constant@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000008 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000009 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000010 or org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000011, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007, org.apache.commons.jxpath.ri.compiler.Constant@0000000004 div (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000010))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
