/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:54:53 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(78, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(78, coreFunction0.getFunctionCode());
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(78, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object1);
      assertEquals(0.0, object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(78, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Object object0 = coreOperationLessThan0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-130), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-130), coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-130), coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object2);
      assertEquals(false, object2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-130), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("H#n,W^ufHKu)(wV>F");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.toString());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.toString());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("H#n,W^ufHKu)(wV>F", nodeNameTest0.toString());
      
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.toString());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("H#n,W^ufHKu)(wV>F", nodeNameTest0.toString());
      assertEquals(40, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-525), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.toString());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("H#n,W^ufHKu)(wV>F", nodeNameTest0.toString());
      assertEquals((-525), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.toString());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("H#n,W^ufHKu)(wV>F", nodeNameTest0.toString());
      assertEquals(1, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(2323, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.toString());
      assertEquals("H#n,W^ufHKu)(wV>F", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("H#n,W^ufHKu)(wV>F", nodeNameTest0.toString());
      assertEquals(2323, step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertEquals(4, stepArray0.length);
      assertTrue(locationPath1.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], locationPath1);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertTrue(locationPath1.isAbsolute());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      Float float0 = new Float((double) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[6] = (Expression) constant0;
      LocationPath locationPath2 = new LocationPath(true, (Step[]) null);
      assertFalse(locationPath2.equals((Object)locationPath0));
      assertFalse(locationPath2.equals((Object)locationPath1));
      assertNotNull(locationPath2);
      assertTrue(locationPath2.isAbsolute());
      
      expressionArray0[7] = (Expression) locationPath2;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertNotNull(coreOperationUnion1);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion1.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction(2323, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(2323, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("2-2");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(8, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("1y%./jWin,I= $|RK");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(2, evalContextArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer((-41));
      assertNotNull(integer0);
      assertEquals((-41), (int)integer0);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("dU(-nQr{+vr :$}v]:", "riY8Y&q");
      assertNotNull(qName0);
      assertEquals("dU(-nQr{+vr :$}v]:", qName0.getPrefix());
      assertEquals("dU(-nQr{+vr :$}v]::riY8Y&q", qName0.toString());
      assertEquals("riY8Y&q", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("dU(-nQr{+vr :$}v]:", qName0.getPrefix());
      assertEquals("dU(-nQr{+vr :$}v]::riY8Y&q", qName0.toString());
      assertEquals("riY8Y&q", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(1, expressionArray0.length);
      assertEquals("dU(-nQr{+vr :$}v]:", qName0.getPrefix());
      assertEquals("dU(-nQr{+vr :$}v]::riY8Y&q", qName0.toString());
      assertEquals("riY8Y&q", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(4468, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(4468, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      assertNotNull(nodeTypeTest0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(5, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(5, step0.getAxis());
      
      stepArray0[4] = step0;
      Step step1 = new Step((-124), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals((-124), step1.getAxis());
      
      stepArray0[1] = step1;
      QName qName0 = new QName("9MX+4");
      assertNotNull(qName0);
      assertEquals("9MX+4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9MX+4", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("9MX+4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9MX+4", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("9MX+4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step2 = new Step((-2082), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertEquals("9MX+4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9MX+4", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("9MX+4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-2082), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(5, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertEquals("9MX+4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9MX+4", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("9MX+4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(5, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(578, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertEquals("9MX+4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9MX+4", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("9MX+4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(578, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(19, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(19, step5.getAxis());
      assertEquals("9MX+4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9MX+4", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("9MX+4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      assertNotNull(predicateContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      assertNotNull(nodeTypeTest0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      Object object1 = coreFunction0.functionString(ancestorContext0);
      assertNotNull(object1);
      assertEquals("", object1);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction((-407), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-407), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-407), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) constant0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) "wE(i .t#,l,1d:YT");
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      assertNotNull(nodeTypeTest0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("wE(i .t#,l,1d:YT");
      assertNotNull(qName0);
      assertEquals("wE(i .t#,l,1d:YT", qName0.toString());
      assertEquals("wE(i .t#,l,1d", qName0.getPrefix());
      assertEquals("YT", qName0.getName());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, expressionArray0[0], (Locale) null);
      assertNotNull(beanPointer0);
      assertEquals(1, expressionArray0.length);
      assertEquals("wE(i .t#,l,1d:YT", qName0.toString());
      assertEquals("wE(i .t#,l,1d", qName0.getPrefix());
      assertEquals("YT", qName0.getName());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, childContext0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals("wE(i .t#,l,1d:YT", qName0.toString());
      assertEquals("wE(i .t#,l,1d", qName0.getPrefix());
      assertEquals("YT", qName0.getName());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals("wE(i .t#,l,1d:YT", qName0.toString());
      assertEquals("wE(i .t#,l,1d", qName0.getPrefix());
      assertEquals("YT", qName0.getName());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals("wE(i .t#,l,1d:YT", qName0.toString());
      assertEquals("wE(i .t#,l,1d", qName0.getPrefix());
      assertEquals("YT", qName0.getName());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      boolean boolean0 = nodeSetContext0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = new Integer((-41));
      assertNotNull(integer0);
      assertEquals((-41), (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-383), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-383), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-383), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals("", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals((-383), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1325));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1325), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1325), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1325), nodeTypeTest0.getNodeType());
      assertEquals((-1325), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-165), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1325), nodeTypeTest0.getNodeType());
      assertEquals((-165), step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) expressionPath0;
      Constant constant0 = new Constant("Uw,.[\"m");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1325), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1325), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      QName qName0 = new QName("1y%./jWin,I= $|RK");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName1 = new QName("-9");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("-9", qName1.getName());
      assertEquals("-9", qName1.toString());
      assertNull(qName1.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variablePointer0);
      assertEquals("-9", qName1.getName());
      assertEquals("-9", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(rootContext0);
      assertEquals("-9", qName1.getName());
      assertEquals("-9", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(jXPathContext0);
      assertNotSame(qName1, qName0);
      assertEquals("-9", qName1.getName());
      assertEquals("-9", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?@jdc+");
      assertNotNull(processingInstructionTest0);
      assertEquals("?@jdc+", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(27, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals("?@jdc+", processingInstructionTest0.getTarget());
      assertEquals(27, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1330, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals("?@jdc+", processingInstructionTest0.getTarget());
      assertEquals(1330, step1.getAxis());
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "1y%./jWin,I= $|RK");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("1y%./jWin,I= $|RK", nodeNameTest0.getNamespaceURI());
      assertEquals("-9", nodeNameTest0.toString());
      assertEquals("-9", qName1.getName());
      assertEquals("-9", qName1.toString());
      assertNull(qName1.getPrefix());
      
      Step step2 = new Step(Integer.MIN_VALUE, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("1y%./jWin,I= $|RK", nodeNameTest0.getNamespaceURI());
      assertEquals("-9", nodeNameTest0.toString());
      assertEquals(Integer.MIN_VALUE, step2.getAxis());
      assertEquals("-9", qName1.getName());
      assertEquals("-9", qName1.toString());
      assertNull(qName1.getPrefix());
      
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      assertNotNull(nodeTypeTest0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      
      Step step3 = new Step(5, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(5, step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1330, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1330, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("false'E\"");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(594, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(594, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(594, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(594, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(594, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("1y%./jWin,I= $|RK");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = coreFunction0.functionNamespaceURI(rootContext0);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = new QName("31-31");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("31-31", qName1.getName());
      assertEquals("31-31", qName1.toString());
      assertNull(qName1.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "-2659-2659");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("31-31", qName1.getName());
      assertEquals("31-31", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("31-31", nodeNameTest0.toString());
      assertEquals("-2659-2659", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, false, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(descendantContext0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("31-31", qName1.getName());
      assertEquals("31-31", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("31-31", nodeNameTest0.toString());
      assertEquals("-2659-2659", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '1y%./jWin,I= $|RK'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Short short0 = new Short((short)40);
      assertNotNull(short0);
      assertEquals((short)40, (short)short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(short0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("\":\"", "\":\"");
      assertNotNull(qName0);
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.getName());
      assertEquals("\":\":\":\"", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.getName());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-1839), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.getName());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1839), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1441792, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.getName());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1441792, step1.getAxis());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stepArray0[1] = step1;
      Step step2 = new Step((short)40, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertEquals(40, step2.getAxis());
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.getName());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[3], expressionArray0[3]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1441792, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("1y%./jWin,I= $|RK");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%./jWin,I= $|RK", qName0.getName());
      assertEquals("1y%./jWin,I= $|RK", qName0.toString());
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray1.length);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(1920, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(1920, coreFunction2.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1y%./jWin,I= $|RK");
      assertNotNull(processingInstructionTest0);
      assertEquals("1y%./jWin,I= $|RK", processingInstructionTest0.getTarget());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("1y%./jWin,I= $|RK", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("1y%./jWin,I= $|RK", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("1y%./jWin,I= $|RK", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("1y%./jWin,I= $|RK", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      
      Object object0 = coreFunction1.functionSubstring(attributeContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(3, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals("1y%./jWin,I= $|RK", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant1 = new Constant("'");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-2648), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("2-2");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      Object object1 = coreFunction0.functionContains(descendantContext0);
      assertNotNull(object1);
      assertEquals(false, object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      Object object2 = coreFunction0.functionSubstring(descendantContext0);
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertEquals("2-2", object2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, coreOperationAdd0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationAdd0, constant0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertNotNull(coreOperationNotEqual1);
      assertEquals(1, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual1, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertNotNull(coreOperationMod0);
      assertEquals(1, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals("2", object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hj^");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      assertNotNull(coreOperationMod0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(19, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(19, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(19, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(19, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(19, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(19, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      assertEquals(9, expressionArray0.length);
      assertEquals(0, step5.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      Step step6 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertNotNull(step6);
      assertEquals(9, expressionArray0.length);
      assertEquals(19, step6.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1439), processingInstructionTest0, expressionArray0);
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertNotNull(step7);
      assertEquals(9, expressionArray0.length);
      assertEquals((-1439), step7.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      Step[] stepArray1 = new Step[3];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      Step step8 = new Step((-2735), processingInstructionTest0, expressionArray0);
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step6));
      assertNotNull(step8);
      assertEquals(9, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2735), step8.getAxis());
      
      stepArray1[0] = step8;
      stepArray1[1] = step0;
      stepArray1[2] = step3;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray1);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotNull(expressionPath1);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray1.length);
      
      expressionArray0[4] = (Expression) expressionPath1;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      expressionArray0[5] = (Expression) variableReference1;
      LocationPath locationPath0 = new LocationPath(true, stepArray1);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotNull(locationPath0);
      assertEquals(3, stepArray1.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[6] = (Expression) locationPath0;
      Integer integer0 = new Integer(2329);
      assertNotNull(integer0);
      assertEquals(2329, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[7] = (Expression) constant0;
      VariableReference variableReference2 = new VariableReference(qName0);
      assertFalse(variableReference2.equals((Object)variableReference1));
      assertFalse(variableReference2.equals((Object)variableReference0));
      assertNotNull(variableReference2);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference2.isContextDependent());
      assertFalse(variableReference2.computeContextDependent());
      
      expressionArray0[8] = (Expression) variableReference2;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("2-2");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      Object object2 = coreFunction0.functionContains(descendantContext0);
      assertNotNull(object2);
      assertEquals(false, object2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("2020");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("2020", "Y5PzB");
      assertNotNull(qName0);
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("2020:Y5PzB", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("2020:Y5PzB", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "2020");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertEquals("2020:Y5PzB", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("2020", nodeNameTest1.getNamespaceURI());
      
      Step step1 = new Step(10, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertEquals("2020:Y5PzB", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("2020", nodeNameTest1.getNamespaceURI());
      assertEquals(10, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1133, nodeNameTest1, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertEquals(1133, step2.getAxis());
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertEquals("2020:Y5PzB", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("2020", nodeNameTest1.getNamespaceURI());
      
      stepArray0[2] = step2;
      Step step3 = new Step(2569, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertEquals(2569, step3.getAxis());
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("2020:Y5PzB", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[3] = step3;
      Step step4 = new Step(3008, nodeNameTest1, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(step4);
      assertEquals(4, expressionArray0.length);
      assertEquals(3008, step4.getAxis());
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertEquals("2020:Y5PzB", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("2020", nodeNameTest1.getNamespaceURI());
      
      stepArray0[4] = step4;
      Step step5 = new Step(1133, nodeNameTest1, expressionArray0);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(step5);
      assertEquals(4, expressionArray0.length);
      assertEquals(1133, step5.getAxis());
      assertEquals("Y5PzB", qName0.getName());
      assertEquals("2020:Y5PzB", qName0.toString());
      assertEquals("2020", qName0.getPrefix());
      assertEquals("2020:Y5PzB", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("2020", nodeNameTest1.getNamespaceURI());
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(6, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-2658), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2658), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("2-2");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2675), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2675), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2675), coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2675), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      boolean boolean0 = nodeSetContext0.setPosition((-2416));
      assertFalse(boolean0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals((-2416), nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(nodeSetContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("2-2");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-2675), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2675), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-2675), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Constant constant1 = new Constant(integer0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant1;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Y_M6e(xy5Z7zfb^hp");
      assertNotNull(processingInstructionTest0);
      assertEquals("Y_M6e(xy5Z7zfb^hp", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant1;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant1;
      Step step0 = new Step(20, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(3, expressionArray1.length);
      assertEquals("Y_M6e(xy5Z7zfb^hp", processingInstructionTest0.getTarget());
      assertEquals(20, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(3571, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertEquals("Y_M6e(xy5Z7zfb^hp", processingInstructionTest0.getTarget());
      assertEquals(3571, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[5];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) constant1;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) constant1;
      expressionArray2[4] = (Expression) constant0;
      Step step2 = new Step((-1663), processingInstructionTest0, expressionArray2);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(step2);
      assertEquals(5, expressionArray2.length);
      assertEquals((-1663), step2.getAxis());
      assertEquals("Y_M6e(xy5Z7zfb^hp", processingInstructionTest0.getTarget());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getValues();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      basicNodeSet0.add((Pointer) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(1.0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(2, nodeSetContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Pointer pointer0 = nodeSetContext0.getSingleNodePointer();
      assertNull(pointer0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Integer
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer((-60));
      assertNotNull(integer0);
      assertEquals((-60), (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("W4+8=^Xg0n'e{wZ\"X#");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.getName());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@L'");
      assertFalse(boolean0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.getName());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-60), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.getName());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-60), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-60), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.getName());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-60), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(159, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.getName());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(159, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(32, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.getName());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("W4+8=^Xg0n'e{wZ\"X#", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(32, step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray1.length);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(159, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(159, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg3();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expression0);
      assertEquals(4, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(expression0, constant0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(159, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(37, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("1y%.jWin,I= $|RK");
      assertNotNull(qName0);
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = coreFunction0.functionNamespaceURI(rootContext0);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '1y%.jWin,I= $|RK'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(37, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationMod0);
      assertEquals(0, expressionArray0.length);
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationMod0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(37, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray1.length);
      assertEquals(37, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.EvalContext");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      assertNotNull(rootContext0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      EvalContext evalContext0 = rootContext0.getConstantContext(attributeContext0);
      assertNotNull(evalContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.EvalContext", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      Step step0 = new Step((-1), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals((-1), step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[1]);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      expressionArray0[5] = (Expression) variableReference0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[6] = (Expression) extensionFunction1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationAdd0, extensionFunction0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, variableReference0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(nodeSetContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((-2151), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2151), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2151), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = null;
      QName qName0 = new QName("^1?B", "2-2");
      assertNotNull(qName0);
      assertEquals("^1?B:2-2", qName0.toString());
      assertEquals("^1?B", qName0.getPrefix());
      assertEquals("2-2", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("^1?B:2-2", qName0.toString());
      assertEquals("^1?B", qName0.getPrefix());
      assertEquals("2-2", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[1]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("^1?B:2-2", qName0.toString());
      assertEquals("^1?B", qName0.getPrefix());
      assertEquals("2-2", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals("^1?B:2-2", qName0.toString());
      assertEquals("^1?B", qName0.getPrefix());
      assertEquals("2-2", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(37, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(37, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("1y%.jWin,I= $|RK");
      assertNotNull(qName0);
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '1y%.jWin,I= $|RK'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSum((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("-31-31");
      assertNotNull(qName0);
      assertEquals("-31-31", qName0.toString());
      assertEquals("-31-31", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("-31-31", qName0.toString());
      assertEquals("-31-31", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(5, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      expressionArray0[1] = null;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("-31-31", qName0.toString());
      assertEquals("-31-31", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, variableReference0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals("-31-31", qName0.toString());
      assertEquals("-31-31", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-1347), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals((-1347), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("=;>S)O)PLqetlGFK(", "5");
      assertNotNull(qName0);
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "=;>S)O)PLqetlGFK(");
      assertNotNull(nodeNameTest0);
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(5, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      assertEquals(5, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(256, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      assertEquals(256, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(256, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      assertEquals(256, step2.getAxis());
      
      stepArray0[2] = step2;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(4194297, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4194297, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4194297, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1482);
      assertNotNull(nodeTypeTest0);
      assertEquals(1482, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1482, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1482, nodeTypeTest0.getNodeType());
      assertEquals(1482, step0.getAxis());
      
      Step step1 = new Step(5, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertEquals(1482, nodeTypeTest0.getNodeType());
      assertEquals(5, step1.getAxis());
      
      Step step2 = new Step(5, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertEquals(1482, nodeTypeTest0.getNodeType());
      assertEquals(5, step2.getAxis());
      
      Step step3 = new Step(2186, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertEquals(1482, nodeTypeTest0.getNodeType());
      assertEquals(2186, step3.getAxis());
      
      Step step4 = new Step(2186, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertEquals(1482, nodeTypeTest0.getNodeType());
      assertEquals(2186, step4.getAxis());
      
      Step step5 = new Step(783, nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals(9, expressionArray0.length);
      assertEquals(1482, nodeTypeTest0.getNodeType());
      assertEquals(783, step5.getAxis());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant("Hn}@&Mq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'Hn}@&Mq'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("vDu3jnIY./r(");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      QName qName0 = new QName("4");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("4", qName0.toString());
      assertEquals("4", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("4", qName0.toString());
      assertEquals("4", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2635), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2635), coreFunction0.getFunctionCode());
      
      Constant constant2 = new Constant((Number) null);
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(115);
      assertNotNull(nodeTypeTest0);
      assertEquals(115, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-2635), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(115, nodeTypeTest0.getNodeType());
      assertEquals((-2635), step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant2, expressionArray0, stepArray0);
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(115, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      
      DescendantContext descendantContext0 = new DescendantContext(childContext0, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(115, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(descendantContext0, 36, nodeTypeTest0);
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertNull(evalContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotSame(constant2, constant1);
      assertNotSame(constant2, constant0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertEquals(115, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) childContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) descendantContext0;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(8, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionTranslate(unionContext0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Eg>SC@j>#r>D8b_Qt");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(",G", "-xs#%XS^1)\"K");
      assertNotNull(qName0);
      assertEquals(",G", qName0.getPrefix());
      assertEquals(",G:-xs#%XS^1)\"K", qName0.toString());
      assertEquals("-xs#%XS^1)\"K", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(",G", qName0.getPrefix());
      assertEquals(",G:-xs#%XS^1)\"K", qName0.toString());
      assertEquals("-xs#%XS^1)\"K", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(1, expressionArray0.length);
      assertEquals(",G", qName0.getPrefix());
      assertEquals(",G:-xs#%XS^1)\"K", qName0.toString());
      assertEquals("-xs#%XS^1)\"K", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      boolean boolean2 = coreOperationSubtract0.computeContextDependent();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, expressionArray0.length);
      assertEquals(",G", qName0.getPrefix());
      assertEquals(",G:-xs#%XS^1)\"K", qName0.toString());
      assertEquals("-xs#%XS^1)\"K", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling('null', 'null', 'null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      QName qName0 = new QName("unknownFunction");
      assertNotNull(qName0);
      assertEquals("unknownFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("unknownFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2434);
      assertNotNull(nodeTypeTest0);
      assertEquals(2434, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-112), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-112), step0.getAxis());
      assertEquals(2434, nodeTypeTest0.getNodeType());
      
      stepArray0[0] = step0;
      Step step1 = new Step(172, nodeTypeTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(172, step1.getAxis());
      assertEquals(2434, nodeTypeTest0.getNodeType());
      
      stepArray0[1] = step1;
      Step step2 = new Step(2434, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertEquals(2434, step2.getAxis());
      assertEquals(2434, nodeTypeTest0.getNodeType());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-198), nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertEquals((-198), step3.getAxis());
      assertEquals(2434, nodeTypeTest0.getNodeType());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-198), nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertEquals((-198), step4.getAxis());
      assertEquals(2434, nodeTypeTest0.getNodeType());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-112), nodeTypeTest0, (Expression[]) null);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals((-112), step5.getAxis());
      assertEquals(2434, nodeTypeTest0.getNodeType());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, expressionPath0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[6], coreOperationOr0);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, expressionArray0[0]);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(9, expressionArray0.length);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("unknownFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.toString());
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, extensionFunction1);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationLessThan1);
      assertEquals(9, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("unknownFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.toString());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction(2434, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(2434, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvalContext evalContext0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      Expression[] expressionArray0 = new Expression[5];
      Short short0 = new Short((short)40);
      assertNotNull(short0);
      assertEquals((short)40, (short)short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(short0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("\":\"", "\":\"");
      assertNotNull(qName0);
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\"", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\"", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-1839), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-1839), step0.getAxis());
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\"", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1441792, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals(1441792, step1.getAxis());
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\"", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[1] = step1;
      Step step2 = new Step((short)40, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertEquals(40, step2.getAxis());
      assertEquals("\":\"", qName0.getPrefix());
      assertEquals("\":\":\":\"", qName0.toString());
      assertEquals("\":\"", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\":\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[3], expressionArray0[3]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1441792, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("TSK]lw9v");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2868, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray1.length);
      assertEquals(2868, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg3();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd1);
      assertEquals(6, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(coreOperationAdd1, coreOperationAdd0);
      assertEquals(2868, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[2], expressionArray0, (Step[]) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd1, expressionArray1[2]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray1.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(2868, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(2868, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(2868, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl1).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("1y%.jWin,I= $|RK");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertNull(qName0.getPrefix());
      assertEquals("1y%.jWin,I= $|RK", qName0.getName());
      assertEquals("1y%.jWin,I= $|RK", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction1 = new CoreFunction(67, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(67, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '1y%.jWin,I= $|RK'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      QName qName0 = new QName("4141");
      assertNotNull(qName0);
      assertEquals("4141", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4141", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("4141", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4141", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(387, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(387, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      assertNotNull(nodeTypeTest0);
      assertEquals(41, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(7, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(2, expressionArray1.length);
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals(7, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-441), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(2, expressionArray1.length);
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals((-441), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-441), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(2, expressionArray1.length);
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals((-441), step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationOr0);
      assertEquals(0, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("", "-2658-2658");
      assertNotNull(qName0);
      assertEquals("-2658-2658", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":-2658-2658", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("-2658-2658", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":-2658-2658", qName0.toString());
      assertEquals(":-2658-2658", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals("-2658-2658", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":-2658-2658", qName0.toString());
      assertEquals(":-2658-2658", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, step0.getAxis());
      
      String string0 = coreOperationNegate0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1344, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1344, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer((-14));
      assertNotNull(integer0);
      assertEquals((-14), (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1586), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1586), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1586), coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals("-14", object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1586), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[5], coreOperationUnion0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(953);
      assertNotNull(nodeTypeTest0);
      assertEquals(953, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(47, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(6, expressionArray1.length);
      assertEquals(953, nodeTypeTest0.getNodeType());
      assertEquals(47, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals(953, nodeTypeTest0.getNodeType());
      assertEquals(1, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(3338, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertEquals(953, nodeTypeTest0.getNodeType());
      assertEquals(3338, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(5, expressionArray0.length);
      assertEquals(953, nodeTypeTest0.getNodeType());
      assertEquals(1, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(4096, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(6, expressionArray1.length);
      assertEquals(953, nodeTypeTest0.getNodeType());
      assertEquals(4096, step4.getAxis());
      
      stepArray0[4] = step4;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(92);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      assertEquals(92, nodeTypeTest1.getNodeType());
      
      Step step5 = new Step(92, nodeTypeTest1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(6, expressionArray1.length);
      assertEquals(92, nodeTypeTest1.getNodeType());
      assertEquals(92, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-1792), nodeTypeTest1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertNotNull(step6);
      assertEquals(5, expressionArray0.length);
      assertEquals(92, nodeTypeTest1.getNodeType());
      assertEquals((-1792), step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step(47, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertNotNull(step7);
      assertEquals(5, expressionArray0.length);
      assertEquals(47, step7.getAxis());
      assertEquals(953, nodeTypeTest0.getNodeType());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(4096, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      assertNotNull(coreOperationMultiply0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationMultiply0);
      assertNotNull(coreOperationNotEqual0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("-24-24", (String) null);
      assertNotNull(qName0);
      assertEquals("-24-24", qName0.getPrefix());
      assertEquals("-24-24:null", qName0.toString());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("-24-24", qName0.getPrefix());
      assertEquals("-24-24:null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-24-24:null", nodeNameTest0.toString());
      
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals("-24-24", qName0.getPrefix());
      assertEquals("-24-24:null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-24-24:null", nodeNameTest0.toString());
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2887, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals("-24-24", qName0.getPrefix());
      assertEquals("-24-24:null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-24-24:null", nodeNameTest0.toString());
      assertEquals(2887, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(5, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertEquals("-24-24", qName0.getPrefix());
      assertEquals("-24-24:null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-24-24:null", nodeNameTest0.toString());
      assertEquals(5, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(2887, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertEquals("-24-24", qName0.getPrefix());
      assertEquals("-24-24:null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-24-24:null", nodeNameTest0.toString());
      assertEquals(2887, step3.getAxis());
      
      String string0 = step3.toString();
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(step3, step1);
      assertNotSame(step3, step2);
      assertNotSame(step3, step0);
      assertEquals("-24-24", qName0.getPrefix());
      assertEquals("-24-24:null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-24-24:null", nodeNameTest0.toString());
      assertEquals(2887, step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, expressionArray0[1]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(61, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(61, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals(61, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      int int0 = nodeSetContext0.getCurrentPosition();
      assertEquals(0, int0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      QName qName0 = new QName("-", "r9@RMUDb'I'");
      assertNotNull(qName0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, (Expression) null);
      assertNotNull(coreOperationEqual0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("FeCw7{wwbc");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("FeCw7{wwbc", qName0.getName());
      assertEquals("FeCw7{wwbc", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(extensionFunction0);
      assertEquals(0, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("FeCw7{wwbc", qName0.getName());
      assertEquals("FeCw7{wwbc", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationLessThan0);
      assertEquals(0, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("FeCw7{wwbc", qName0.getName());
      assertEquals("FeCw7{wwbc", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(0, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("FeCw7{wwbc", qName0.getName());
      assertEquals("FeCw7{wwbc", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("FeCw7{wwbc", qName0.getName());
      assertEquals("FeCw7{wwbc", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray1[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("%FA9pw o");
      assertNotNull(processingInstructionTest0);
      assertEquals("%FA9pw o", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(6, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(5, expressionArray1.length);
      assertEquals("%FA9pw o", processingInstructionTest0.getTarget());
      assertEquals(6, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1209, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(0, expressionArray0.length);
      assertEquals("%FA9pw o", processingInstructionTest0.getTarget());
      assertEquals(1209, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationLessThan0;
      expressionArray2[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Step step2 = new Step(6, processingInstructionTest0, expressionArray2);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(step2);
      assertEquals(2, expressionArray2.length);
      assertEquals(6, step2.getAxis());
      assertEquals("%FA9pw o", processingInstructionTest0.getTarget());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray1[2] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath1.isAbsolute());
      
      expressionArray1[3] = (Expression) locationPath1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(coreOperationUnion0);
      assertEquals(0, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3190, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(3190, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      assertNotNull(nodeTypeTest0);
      assertEquals(6, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(6, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionLast(descendantContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(3190, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(6, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Byte byte0 = new Byte((byte)87);
      assertNotNull(byte0);
      assertEquals((byte)87, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationDivide0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationDivide0);
      assertNotNull(coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreOperationDivide0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationDivide0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(coreOperationLessThan1);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationLessThan0);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertNotNull(coreOperationEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("5-5");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("5-5", qName0.getName());
      assertEquals("5-5", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("5-5", qName0.getName());
      assertEquals("5-5", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(8, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(1298, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1298, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1298);
      assertNotNull(nodeTypeTest0);
      assertEquals(1298, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((byte)87, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1298, nodeTypeTest0.getNodeType());
      assertEquals(87, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1298, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(8, expressionArray0.length);
      assertEquals(1298, nodeTypeTest0.getNodeType());
      assertEquals(1298, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan1, expressionArray0, stepArray0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1298, nodeTypeTest0.getNodeType());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeTypeTest0, false, false);
      assertNotNull(childContext0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(1298, nodeTypeTest0.getNodeType());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(childContext0, 9, nodeTypeTest0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(evalContext0);
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(coreOperationLessThan1, coreOperationLessThan0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals(1298, nodeTypeTest0.getNodeType());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionID(evalContext0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("-", "r9@RMUDb'I'");
      assertNotNull(qName0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      boolean boolean0 = coreOperationNegate0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals("r9@RMUDb'I'", qName0.getName());
      assertEquals("-", qName0.getPrefix());
      assertEquals("-:r9@RMUDb'I'", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("4141");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationLessThan0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertNotNull(coreOperationDivide0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("}s#L");
      assertNotNull(qName0);
      assertEquals("}s#L", qName0.toString());
      assertEquals("}s#L", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals("}s#L", qName0.toString());
      assertEquals("}s#L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[1]);
      assertNotNull(coreOperationMod0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-235), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-235), coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("}s#L");
      assertNotNull(processingInstructionTest0);
      assertEquals("}s#L", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-235), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-235), step0.getAxis());
      assertEquals("}s#L", processingInstructionTest0.getTarget());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(5, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(unionContext0, (-235), processingInstructionTest0);
      assertNull(evalContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("}s#L", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("CXxbI<R-T@uk");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step(11, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals(11, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1053, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals(1053, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      Step step2 = new Step(11, (NodeTest) null, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(2, expressionArray1.length);
      assertEquals(11, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1053, (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertEquals(1053, step3.getAxis());
      
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("CXxbI<R-T@uk");
      assertNotNull(processingInstructionTest0);
      assertEquals("CXxbI<R-T@uk", processingInstructionTest0.getTarget());
      
      Step step4 = new Step(1053, processingInstructionTest0, expressionArray1);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step4);
      assertEquals(2, expressionArray1.length);
      assertEquals(1053, step4.getAxis());
      assertEquals("CXxbI<R-T@uk", processingInstructionTest0.getTarget());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1672), processingInstructionTest0, expressionArray1);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step5);
      assertEquals(2, expressionArray1.length);
      assertEquals((-1672), step5.getAxis());
      assertEquals("CXxbI<R-T@uk", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[1], coreOperationMod0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray1.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Constant constant1 = new Constant("(=l/m\"2atxwPsHP&B:)");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[2] = (Expression) constant1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[3] = (Expression) expressionPath1;
      QName qName0 = new QName("CXxbI<R-T@uk", "YFtp:d=P");
      assertNotNull(qName0);
      assertEquals("CXxbI<R-T@uk:YFtp:d=P", qName0.toString());
      assertEquals("CXxbI<R-T@uk", qName0.getPrefix());
      assertEquals("YFtp:d=P", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray1.length);
      assertEquals("CXxbI<R-T@uk:YFtp:d=P", qName0.toString());
      assertEquals("CXxbI<R-T@uk", qName0.getPrefix());
      assertEquals("YFtp:d=P", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[4] = (Expression) extensionFunction0;
      Long long0 = Long.getLong("55", 1261L);
      assertNotNull(long0);
      assertEquals(1261L, (long)long0);
      
      Constant constant2 = new Constant(long0);
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertNotNull(constant2);
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      
      expressionArray0[5] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction((-1672), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1672), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      QName qName0 = new QName("Tu@@d", "concat");
      assertNotNull(qName0);
      assertEquals("Tu@@d", qName0.getPrefix());
      assertEquals("concat", qName0.getName());
      assertEquals("Tu@@d:concat", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("Tu@@d", qName0.getPrefix());
      assertEquals("concat", qName0.getName());
      assertEquals("Tu@@d:concat", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(10, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(10, expressionArray0.length);
      assertEquals("Tu@@d", qName0.getPrefix());
      assertEquals("concat", qName0.getName());
      assertEquals("Tu@@d:concat", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(10, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(10, expressionArray0.length);
      assertEquals(95, coreFunction0.getFunctionCode());
      assertEquals(10, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("=;>S)O)PLqetlGFK(", "5");
      assertNotNull(qName0);
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "=;>S)O)PLqetlGFK(");
      assertNotNull(nodeNameTest0);
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(5, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(5, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(256, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(256, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(256, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertEquals("=;>S)O)PLqetlGFK(", nodeNameTest0.getNamespaceURI());
      assertEquals("=;>S)O)PLqetlGFK(:5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(256, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("=;>S)O)PLqetlGFK(:5", qName0.toString());
      assertEquals("=;>S)O)PLqetlGFK(", qName0.getPrefix());
      assertEquals("5", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(4194297, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4194297, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4194297, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationMultiply0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      Step step1 = new Step(10, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(2, expressionArray1.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(10, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2329), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2329), step2.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[2] = step2;
      Step step3 = new Step(2071, (NodeTest) null, expressionArray1);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals(2, expressionArray1.length);
      assertEquals(2071, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-3667), (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertEquals((-3667), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2329), (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2329), step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(2071, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertNotNull(step6);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(2071, step6.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-3667), (NodeTest) null, expressionArray1);
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step7);
      assertEquals(2, expressionArray1.length);
      assertEquals((-3667), step7.getAxis());
      
      stepArray0[7] = step7;
      Step step8 = new Step((-502), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step3));
      assertNotNull(step8);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-502), step8.getAxis());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationUnion1);
      assertEquals(2, expressionArray1.length);
      assertEquals("|", coreOperationUnion1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion1;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion0));
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion1));
      assertNotNull(coreOperationUnion2);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion2.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion2;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[4], coreOperationUnion1);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion3 = new CoreOperationUnion(expressionArray1);
      assertFalse(coreOperationUnion3.equals((Object)coreOperationUnion0));
      assertFalse(coreOperationUnion3.equals((Object)coreOperationUnion2));
      assertFalse(coreOperationUnion3.equals((Object)coreOperationUnion1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationUnion3);
      assertEquals(2, expressionArray1.length);
      assertEquals("|", coreOperationUnion3.getSymbol());
      
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationOr1);
      assertEquals(2, expressionArray1.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationUnion3, coreOperationOr1);
      assertFalse(coreOperationUnion3.equals((Object)coreOperationUnion0));
      assertFalse(coreOperationUnion3.equals((Object)coreOperationUnion2));
      assertFalse(coreOperationUnion3.equals((Object)coreOperationUnion1));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMod1);
      assertEquals(2, expressionArray1.length);
      assertEquals("|", coreOperationUnion3.getSymbol());
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationMod1;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[5], coreOperationOr0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-2648), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-2648), coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-2648), coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction(164, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(164, coreFunction2.getFunctionCode());
      
      Object object0 = coreFunction2.functionStartsWith((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean1));
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(164, coreFunction2.getFunctionCode());
      
      Object object1 = coreFunction2.functionSubstringBefore((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(object1);
      assertEquals("-", object1);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(164, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(116, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName(":+B", ":+B");
      assertNotNull(qName0);
      assertEquals(":+B::+B", qName0.toString());
      assertEquals(":+B", qName0.getName());
      assertEquals(":+B", qName0.getPrefix());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(":+B");
      assertNotNull(processingInstructionTest0);
      assertEquals(":+B", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(44, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(7, expressionArray1.length);
      assertEquals(":+B", processingInstructionTest0.getTarget());
      assertEquals(44, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(44, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, expressionArray1.length);
      assertEquals(":+B", processingInstructionTest0.getTarget());
      assertEquals(44, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(11, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertEquals(":+B", processingInstructionTest0.getTarget());
      assertEquals(11, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(3024, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(7, expressionArray1.length);
      assertEquals(":+B", processingInstructionTest0.getTarget());
      assertEquals(3024, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-3004), processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertEquals(":+B", processingInstructionTest0.getTarget());
      assertEquals((-3004), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1845), processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertEquals((-1845), step5.getAxis());
      assertEquals(":+B", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      Step step6 = new Step(104, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertNotNull(step6);
      assertEquals(7, expressionArray1.length);
      assertEquals(104, step6.getAxis());
      assertEquals(":+B", processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      Step step7 = new Step(24, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertNotNull(step7);
      assertEquals(6, expressionArray0.length);
      assertEquals(24, step7.getAxis());
      assertEquals(":+B", processingInstructionTest0.getTarget());
      
      stepArray0[7] = step7;
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationAnd0;
      Step step8 = new Step(44, processingInstructionTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertNotNull(step8);
      assertEquals(1, expressionArray2.length);
      assertEquals(":+B", processingInstructionTest0.getTarget());
      assertEquals(44, step8.getAxis());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray1.length);
      assertEquals(9, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[1] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[1], coreOperationAnd0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(7, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual1;
      Short short0 = new Short((short) (-3892));
      assertNotNull(short0);
      assertEquals((short) (-3892), (short)short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[4] = (Expression) constant0;
      ExpressionPath expressionPath1 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals(6, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[5] = (Expression) expressionPath1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionPath0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertNotNull(coreOperationMod0);
      assertEquals(7, expressionArray1.length);
      assertEquals(9, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray1[6] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray1.length);
      assertEquals(":+B::+B", qName0.toString());
      assertEquals(":+B", qName0.getName());
      assertEquals(":+B", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      QName qName1 = new QName("substring-after");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("substring-after", qName1.toString());
      assertEquals("substring-after", qName1.getName());
      assertNull(qName1.getPrefix());
      
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(7, expressionArray1.length);
      assertEquals("substring-after", qName1.toString());
      assertEquals("substring-after", qName1.getName());
      assertNull(qName1.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, expressionArray1[6]);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray1.length);
      assertEquals(":+B::+B", qName0.toString());
      assertEquals(":+B", qName0.getName());
      assertEquals(":+B", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual1, coreOperationDivide0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray1.length);
      assertEquals(":+B::+B", qName0.toString());
      assertEquals(":+B", qName0.getName());
      assertEquals(":+B", qName0.getPrefix());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd1);
      assertEquals(7, expressionArray1.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals(7, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      Constant constant1 = new Constant(short0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-2658));
      assertNotNull(integer0);
      assertEquals((-2658), (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2658), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2658), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-2658), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2658), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction((-396), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertEquals((-396), coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      CoreFunction coreFunction3 = new CoreFunction(4226, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertNotNull(coreFunction3);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction3.getArgumentCount());
      assertEquals(4226, coreFunction3.getFunctionCode());
      
      Object object0 = coreFunction2.functionSubstring((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals("-2658", object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals((-396), coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer((-4336));
      assertNotNull(integer0);
      assertEquals((-4336), (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(100, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(100, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(100, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-4336), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals((-4336), coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction((-4336), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals((-4336), coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      coreFunction2.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(3090, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3090, step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      boolean boolean1 = locationPath0.isSimpleStep(step0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3090, step0.getAxis());
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(3090, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3090, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals(2, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1189), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1189), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1189), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1453), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1453), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1453), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("20", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName(" (", " (");
      assertNotNull(qName0);
      assertEquals(" (: (", qName0.toString());
      assertEquals(" (", qName0.getName());
      assertEquals(" (", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(" (: (", qName0.toString());
      assertEquals(" (", qName0.getName());
      assertEquals(" (", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(4, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[3];
      QName qName1 = new QName(" (");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals(" (", qName1.toString());
      assertEquals(" (", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, ":m4EGj4rlE.ih5");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertNull(qName1.getPrefix());
      assertEquals(" (", qName1.toString());
      assertEquals(" (", qName1.getName());
      assertEquals(" (", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":m4EGj4rlE.ih5", nodeNameTest0.getNamespaceURI());
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals(4, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      Step step0 = new Step(104, nodeNameTest0, expressionArray1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(4, expressionArray1.length);
      assertEquals(104, step0.getAxis());
      assertNull(qName1.getPrefix());
      assertEquals(" (", qName1.toString());
      assertEquals(" (", qName1.getName());
      assertEquals(" (", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":m4EGj4rlE.ih5", nodeNameTest0.getNamespaceURI());
      
      stepArray0[0] = step0;
      Step step1 = new Step(104, nodeNameTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step1);
      assertEquals(4, expressionArray1.length);
      assertEquals(104, step1.getAxis());
      assertNull(qName1.getPrefix());
      assertEquals(" (", qName1.toString());
      assertEquals(" (", qName1.getName());
      assertEquals(" (", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":m4EGj4rlE.ih5", nodeNameTest0.getNamespaceURI());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-3004), nodeNameTest0, expressionArray1);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step2);
      assertEquals(4, expressionArray1.length);
      assertEquals((-3004), step2.getAxis());
      assertNull(qName1.getPrefix());
      assertEquals(" (", qName1.toString());
      assertEquals(" (", qName1.getName());
      assertEquals(" (", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":m4EGj4rlE.ih5", nodeNameTest0.getNamespaceURI());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(104, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(104, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName(">9o9VFK/!(r`z`", ">9o9VFK/!(r`z`");
      assertNotNull(qName0);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationMultiply0);
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName1 = new QName("#T0-pN<$@<'vq(");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals("#T0-pN<$@<'vq(", qName1.getName());
      assertEquals("#T0-pN<$@<'vq(", qName1.toString());
      
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(4, expressionArray0.length);
      assertNull(qName1.getPrefix());
      assertEquals("#T0-pN<$@<'vq(", qName1.getName());
      assertEquals("#T0-pN<$@<'vq(", qName1.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(nodeNameTest0);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(97, nodeNameTest0, expressionArray0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(97, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(6, nodeNameTest0, expressionArray0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(6, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(6, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertEquals(6, step2.getAxis());
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[2] = step2;
      Step step3 = new Step(6, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertEquals(6, step3.getAxis());
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z+>Lh&.P?ZEw%K0");
      assertFalse(boolean0);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-33), nodeNameTest0, expressionArray0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(4, expressionArray0.length);
      assertEquals(">9o9VFK/!(r`z`", qName0.getPrefix());
      assertEquals(">9o9VFK/!(r`z`", qName0.getName());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", qName0.toString());
      assertEquals((-33), step4.getAxis());
      assertEquals(">9o9VFK/!(r`z`:>9o9VFK/!(r`z`", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      Constant constant0 = new Constant("number");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction1, constant0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertNull(qName1.getPrefix());
      assertEquals("#T0-pN<$@<'vq(", qName1.getName());
      assertEquals("#T0-pN<$@<'vq(", qName1.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(97, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(97, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2675, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(2675, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName(":Kd]]#PVqTR");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("Kd]]#PVqTR", qName0.getName());
      assertEquals(":Kd]]#PVqTR", qName0.toString());
      
      Integer integer0 = new Integer(2675);
      assertNotNull(integer0);
      assertEquals(2675, (int)integer0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, integer0, locale0);
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("Kd]]#PVqTR", qName0.getName());
      assertEquals(":Kd]]#PVqTR", qName0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2675, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("Kd]]#PVqTR", qName0.getName());
      assertEquals(":Kd]]#PVqTR", qName0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(2675, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("Kd]]#PVqTR", qName0.getName());
      assertEquals(":Kd]]#PVqTR", qName0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(2147483645, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2147483645, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("r5rQBdZf");
      assertNotNull(qName0);
      assertEquals("r5rQBdZf", qName0.toString());
      assertEquals("r5rQBdZf", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("r5rQBdZf", qName0.toString());
      assertEquals("r5rQBdZf", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "#TS1");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1336), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1336), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1336), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray0.length);
      assertEquals((-1336), coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext0.getJXPathContext();
      assertNotNull(jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("}BF:G=*+", "hPoXIDU");
      assertNotNull(qName0);
      assertEquals("}BF:G=*+:hPoXIDU", qName0.toString());
      assertEquals("hPoXIDU", qName0.getName());
      assertEquals("}BF:G=*+", qName0.getPrefix());
      
      QName qName1 = new QName("org.jdom.Element", "hPoXIDU");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("org.jdom.Element:hPoXIDU", qName1.toString());
      assertEquals("org.jdom.Element", qName1.getPrefix());
      assertEquals("hPoXIDU", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("org.jdom.Element:hPoXIDU", qName1.toString());
      assertEquals("org.jdom.Element", qName1.getPrefix());
      assertEquals("hPoXIDU", qName1.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.jdom.Element:hPoXIDU", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, nodeNameTest0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(ancestorContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("org.jdom.Element:hPoXIDU", qName1.toString());
      assertEquals("org.jdom.Element", qName1.getPrefix());
      assertEquals("hPoXIDU", qName1.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.jdom.Element:hPoXIDU", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext1 = ancestorContext0.getRootContext();
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(rootContext1);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotSame(qName1, qName0);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("org.jdom.Element:hPoXIDU", qName1.toString());
      assertEquals("org.jdom.Element", qName1.getPrefix());
      assertEquals("hPoXIDU", qName1.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.jdom.Element:hPoXIDU", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(initialContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Constant constant1 = new Constant("contains");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[3] = (Expression) constant1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("org.jdom.Element:hPoXIDU", qName1.toString());
      assertEquals("org.jdom.Element", qName1.getPrefix());
      assertEquals("hPoXIDU", qName1.getName());
      
      expressionArray0[4] = (Expression) extensionFunction0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(6172, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(6172, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(initialContext0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(26, int0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      assertNotNull(nodeTypeTest0);
      assertEquals(26, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(26, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(0, expressionArray0.length);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertEquals(26, step0.getAxis());
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-128), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray1.length);
      assertEquals((-128), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      String string0 = coreFunction1.toString();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals("unknownFunction-128()(ceiling(), ceiling(), ceiling(), ceiling())", string0);
      assertEquals(4, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-128), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      QName qName0 = new QName("4141", "wdUT>#;X[>$}~");
      assertNotNull(qName0);
      assertEquals("4141:wdUT>#;X[>$}~", qName0.toString());
      assertEquals("4141", qName0.getPrefix());
      assertEquals("wdUT>#;X[>$}~", qName0.getName());
      
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(4, expressionArray1.length);
      assertEquals(4, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreFunction2;
      expressionArray2[1] = (Expression) coreFunction2;
      CoreFunction coreFunction3 = new CoreFunction(3780, expressionArray2);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreFunction3);
      assertEquals(2, expressionArray2.length);
      assertEquals(3780, coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("xm64tY=gt", "21");
      assertNotNull(qName0);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "xm64tY=gt");
      assertNotNull(nodeNameTest0);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xm64tY=gt:21", nodeNameTest0.toString());
      assertEquals("xm64tY=gt", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-253), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xm64tY=gt:21", nodeNameTest0.toString());
      assertEquals("xm64tY=gt", nodeNameTest0.getNamespaceURI());
      assertEquals((-253), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1048576, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xm64tY=gt:21", nodeNameTest0.toString());
      assertEquals("xm64tY=gt", nodeNameTest0.getNamespaceURI());
      assertEquals(1048576, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1813, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xm64tY=gt:21", nodeNameTest0.toString());
      assertEquals("xm64tY=gt", nodeNameTest0.getNamespaceURI());
      assertEquals(1813, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1048576, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(5, expressionArray0.length);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xm64tY=gt:21", nodeNameTest0.toString());
      assertEquals("xm64tY=gt", nodeNameTest0.getNamespaceURI());
      assertEquals(1048576, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(1813, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(5, expressionArray0.length);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xm64tY=gt:21", nodeNameTest0.toString());
      assertEquals("xm64tY=gt", nodeNameTest0.getNamespaceURI());
      assertEquals(1813, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(3604, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals(5, expressionArray0.length);
      assertEquals("xm64tY=gt", qName0.getPrefix());
      assertEquals("xm64tY=gt:21", qName0.toString());
      assertEquals("21", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xm64tY=gt:21", nodeNameTest0.toString());
      assertEquals("xm64tY=gt", nodeNameTest0.getNamespaceURI());
      assertEquals(3604, step5.getAxis());
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, locationPath0);
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, locationPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Integer integer0 = Integer.getInteger("4o5JmS^Zd");
      assertNull(integer0);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1813, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(1813, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kw~`Ie");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("unknownFunction", "1,ki=1]Y]H/n");
      assertNotNull(qName0);
      assertEquals("1,ki=1]Y]H/n", qName0.getName());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("unknownFunction:1,ki=1]Y]H/n", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("1,ki=1]Y]H/n", qName0.getName());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("unknownFunction:1,ki=1]Y]H/n", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals("1,ki=1]Y]H/n", qName0.getName());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("unknownFunction:1,ki=1]Y]H/n", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-432), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-432), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(557, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(557, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(557, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(557, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("Invalid argument type for 'sum': ", "Invalid argument type for 'sum': ");
      assertNotNull(qName0);
      assertEquals("Invalid argument type for 'sum': :Invalid argument type for 'sum': ", qName0.toString());
      assertEquals("Invalid argument type for 'sum': ", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': ", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("Invalid argument type for 'sum': :Invalid argument type for 'sum': ", qName0.toString());
      assertEquals("Invalid argument type for 'sum': ", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': ", qName0.getName());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = null;
      try {
        jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction1, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'Invalid argument type for 'sum': :Invalid argument type for 'sum': '
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("J',");
      assertNotNull(qName0);
      assertEquals("J',", qName0.getName());
      assertEquals("J',", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("J',", qName0.getName());
      assertEquals("J',", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("J',", qName0.getName());
      assertEquals("J',", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(extensionFunction0, coreOperationGreaterThan0);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(9, expressionArray0.length);
      assertEquals("J',", qName0.getName());
      assertEquals("J',", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan1, coreOperationGreaterThan0);
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals("J',", qName0.getName());
      assertEquals("J',", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationGreaterThan1);
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("J',", qName0.getName());
      assertEquals("J',", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], coreOperationAnd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[8] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(65528, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(65528, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(9, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName1 = new QName("_S8UJ5pBF", "_S8UJ5pBF");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("_S8UJ5pBF:_S8UJ5pBF", qName1.toString());
      assertEquals("_S8UJ5pBF", qName1.getPrefix());
      assertEquals("_S8UJ5pBF", qName1.getName());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, "_S8UJ5pBF", locale0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(beanPointer0);
      assertNotSame(qName1, qName0);
      assertEquals("_S8UJ5pBF:_S8UJ5pBF", qName1.toString());
      assertEquals("_S8UJ5pBF", qName1.getPrefix());
      assertEquals("_S8UJ5pBF", qName1.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[8], beanPointer0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(9, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("_S8UJ5pBF:_S8UJ5pBF", qName1.toString());
      assertEquals("_S8UJ5pBF", qName1.getPrefix());
      assertEquals("_S8UJ5pBF", qName1.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(9, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("_S8UJ5pBF:_S8UJ5pBF", qName1.toString());
      assertEquals("_S8UJ5pBF", qName1.getPrefix());
      assertEquals("_S8UJ5pBF", qName1.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      coreFunction0.functionConcat(rootContext0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("Zgp2H1SWb9~+J-N6_;", "Zgp2H1SWb9~+J-N6_;");
      assertNotNull(qName0);
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getPrefix());
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getName());
      assertEquals("Zgp2H1SWb9~+J-N6_;:Zgp2H1SWb9~+J-N6_;", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getPrefix());
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getName());
      assertEquals("Zgp2H1SWb9~+J-N6_;:Zgp2H1SWb9~+J-N6_;", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, expressionArray0.length);
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getPrefix());
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getName());
      assertEquals("Zgp2H1SWb9~+J-N6_;:Zgp2H1SWb9~+J-N6_;", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, coreOperationDivide0);
      assertNotNull(coreOperationMod0);
      assertEquals(4, expressionArray0.length);
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getPrefix());
      assertEquals("Zgp2H1SWb9~+J-N6_;", qName0.getName());
      assertEquals("Zgp2H1SWb9~+J-N6_;:Zgp2H1SWb9~+J-N6_;", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(32, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals(32, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1), (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(32, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertEquals(32, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(32, (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertEquals(32, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1), (NodeTest) null, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1), step4.getAxis());
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      QName qName0 = new QName("Unknown namespace prefix: ", "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan");
      assertNotNull(qName0);
      assertEquals("Unknown namespace prefix: ", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: :org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Unknown namespace prefix: ");
      assertNotNull(nodeNameTest0);
      assertEquals("Unknown namespace prefix: ", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: :org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", qName0.getName());
      assertEquals("Unknown namespace prefix: ", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Unknown namespace prefix: :org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", nodeNameTest0.toString());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("Unknown namespace prefix: ", qName0.getPrefix());
      assertEquals("Unknown namespace prefix: :org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", qName0.getName());
      assertEquals("Unknown namespace prefix: ", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Unknown namespace prefix: :org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("6", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(700, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(700, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(30, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(6)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(2147483645, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2147483645, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      
      CoreFunction coreFunction1 = new CoreFunction(1386, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(1386, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1386, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(16, coreFunction2.getFunctionCode());
      
      boolean boolean2 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(16, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction(2147483645, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertNotNull(coreFunction3);
      assertEquals(0, expressionArray0.length);
      assertEquals(2147483645, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      Object object0 = coreFunction3.computeValue(rootContext0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(2147483645, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2648), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction((-2648), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals((-2648), coreFunction2.getFunctionCode());
      
      Object object0 = coreFunction2.functionContains((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(object0);
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals((-2648), coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(5, 5)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(8, 8, 8)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Yi/A{jtFV!9,+qDNH");
      assertNotNull(processingInstructionTest0);
      assertEquals("Yi/A{jtFV!9,+qDNH", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(29, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("Yi/A{jtFV!9,+qDNH", processingInstructionTest0.getTarget());
      assertEquals(29, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals("Yi/A{jtFV!9,+qDNH", processingInstructionTest0.getTarget());
      assertEquals(7, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(6, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertEquals("Yi/A{jtFV!9,+qDNH", processingInstructionTest0.getTarget());
      assertEquals(6, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(29, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertEquals("Yi/A{jtFV!9,+qDNH", processingInstructionTest0.getTarget());
      assertEquals(29, step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, expressionPath0);
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], nameAttributeTest0);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, expressionPath0);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationMultiply0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[2] = (Expression) expressionPath1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], nameAttributeTest0);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      ExpressionPath expressionPath2 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertFalse(expressionPath2.equals((Object)expressionPath0));
      assertFalse(expressionPath2.equals((Object)expressionPath1));
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertNotNull(expressionPath2);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[4] = (Expression) expressionPath2;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertFalse(expressionPath0.equals((Object)expressionPath2));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1837, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, (NodePointer) null);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("}BF:G=*+", "sum");
      assertNotNull(qName0);
      assertEquals("}BF:G=*+", qName0.getPrefix());
      assertEquals("}BF:G=*+:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("}BF:G=*+", qName0.getPrefix());
      assertEquals("}BF:G=*+:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertEquals("}BF:G=*+:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(ancestorContext0);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("}BF:G=*+", qName0.getPrefix());
      assertEquals("}BF:G=*+:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertEquals("}BF:G=*+:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      AncestorContext ancestorContext1 = new AncestorContext(rootContext1, false, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotNull(ancestorContext1);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals("}BF:G=*+", qName0.getPrefix());
      assertEquals("}BF:G=*+:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertEquals("}BF:G=*+:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext1.getPosition());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext2 = ancestorContext1.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotNull(rootContext2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals("}BF:G=*+", qName0.getPrefix());
      assertEquals("}BF:G=*+:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertEquals("}BF:G=*+:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext1.getPosition());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext3 = new RootContext(jXPathContextReferenceImpl2, (NodePointer) null);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext3.equals((Object)rootContext2));
      assertFalse(rootContext3.equals((Object)rootContext0));
      assertFalse(rootContext3.equals((Object)rootContext1));
      assertNotNull(rootContext3);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext3.getPosition());
      assertFalse(rootContext3.isChildOrderingRequired());
      assertEquals(0, rootContext3.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) rootContext1;
      evalContextArray0[1] = (EvalContext) rootContext3;
      UnionContext unionContext0 = new UnionContext(rootContext3, evalContextArray0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext3.equals((Object)rootContext2));
      assertFalse(rootContext3.equals((Object)rootContext0));
      assertFalse(rootContext3.equals((Object)rootContext1));
      assertNotNull(unionContext0);
      assertEquals(2, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext3.getPosition());
      assertFalse(rootContext3.isChildOrderingRequired());
      assertEquals(0, rootContext3.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl4 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, unionContext0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext3.equals((Object)rootContext2));
      assertFalse(rootContext3.equals((Object)rootContext0));
      assertFalse(rootContext3.equals((Object)rootContext1));
      assertNotNull(jXPathContextReferenceImpl4);
      assertEquals(2, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl4.isLenient());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext3.getPosition());
      assertFalse(rootContext3.isChildOrderingRequired());
      assertEquals(0, rootContext3.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertEquals(1837, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      CoreOperationUnion coreOperationUnion1 = (CoreOperationUnion)coreFunction0.getArg2();
      assertNotNull(coreOperationUnion1);
      assertEquals(6, expressionArray0.length);
      assertSame(coreOperationUnion1, coreOperationUnion0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion2 = (CoreOperationUnion)coreFunction0.getArg3();
      assertNotNull(coreOperationUnion2);
      assertEquals(6, expressionArray0.length);
      assertSame(coreOperationUnion2, coreOperationUnion1);
      assertSame(coreOperationUnion2, coreOperationUnion0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion2.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion2;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion2, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("|", coreOperationUnion2.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004 + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 - (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 > org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNull(jXPathContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(ancestorContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      AncestorContext ancestorContext1 = new AncestorContext(ancestorContext0, true, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotNull(ancestorContext1);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      
      RootContext rootContext1 = ancestorContext1.getRootContext();
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotNull(rootContext1);
      assertSame(rootContext0, rootContext1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(ancestorContext0, ancestorContext1);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext1, (Pointer) null);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotNull(evalContext0);
      assertSame(rootContext0, rootContext1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(ancestorContext0, ancestorContext1);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction0 = new CoreFunction(612, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(612, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(0, expressionArray0.length);
      assertSame(rootContext0, rootContext1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(ancestorContext0, ancestorContext1);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(612, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(612, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(2147483645, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2147483645, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      
      QName qName0 = new QName((String) null, "}BF:G=*+");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("}BF:G=*+", qName0.toString());
      assertEquals("}BF:G=*+", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("}BF:G=*+", qName0.toString());
      assertEquals("}BF:G=*+", qName0.getName());
      assertEquals("}BF:G=*+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("}BF:G=*+", qName0.toString());
      assertEquals("}BF:G=*+", qName0.getName());
      assertEquals("}BF:G=*+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = ancestorContext0.getRootContext();
      assertNotNull(rootContext1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("}BF:G=*+", qName0.toString());
      assertEquals("}BF:G=*+", qName0.getName());
      assertEquals("}BF:G=*+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext1, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("}BF:G=*+", qName0.toString());
      assertEquals("}BF:G=*+", qName0.getName());
      assertEquals("}BF:G=*+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(evalContext0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("}BF:G=*+", qName0.toString());
      assertEquals("}BF:G=*+", qName0.getName());
      assertEquals("}BF:G=*+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(0, expressionArray0.length);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(2147483645, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("}BF:G=*+", qName0.toString());
      assertEquals("}BF:G=*+", qName0.getName());
      assertEquals("}BF:G=*+", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(2147483645, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(4, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(22, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer(17);
      assertNotNull(integer0);
      assertEquals(17, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("17", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(17, int0);
      assertEquals(5, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(17, 17, 17, 17, 17)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("}>mG@#]_jqO+F");
      assertNotNull(processingInstructionTest0);
      assertEquals("}>mG@#]_jqO+F", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(1932735283, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(5, expressionArray1.length);
      assertEquals("}>mG@#]_jqO+F", processingInstructionTest0.getTarget());
      assertEquals(1932735283, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(29, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals("}>mG@#]_jqO+F", processingInstructionTest0.getTarget());
      assertEquals(29, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals("}>mG@#]_jqO+F", processingInstructionTest0.getTarget());
      assertEquals(0, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray1[1] = (Expression) locationPath0;
      QName qName0 = new QName("}>mG@#]_jqO+F");
      assertNotNull(qName0);
      assertEquals("}>mG@#]_jqO+F", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}>mG@#]_jqO+F", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("}>mG@#]_jqO+F", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}>mG@#]_jqO+F", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray1[2] = (Expression) variableReference0;
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray2.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean2 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4563, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("9)e~C>-+GQU(7k");
      assertNotNull(qName0);
      assertEquals("9)e~C>-+GQU(7k", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9)e~C>-+GQU(7k", qName0.getName());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "9)e~C>-+GQU(7k", locale0);
      assertNotNull(beanPointer0);
      assertEquals("9)e~C>-+GQU(7k", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9)e~C>-+GQU(7k", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("9)e~C>-+GQU(7k", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9)e~C>-+GQU(7k", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      assertNotNull(coreOperationEqual0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      String string1 = coreOperationEqual0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Iterator iterator0 = jXPathContextReferenceImpl1.iteratePointers("1Esa4V_.f%.T", (Expression) coreOperationEqual0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(iterator0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string2 = (String)beanPointer0.getRootNode();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9)e~C>-+GQU(7k", string2);
      assertEquals("9)e~C>-+GQU(7k", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9)e~C>-+GQU(7k", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(predicateContext0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("9)e~C>-+GQU(7k", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9)e~C>-+GQU(7k", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Integer integer0 = (Integer)coreFunction0.functionPosition(predicateContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("9)e~C>-+GQU(7k", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9)e~C>-+GQU(7k", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Boolean boolean1 = (Boolean)coreFunction0.functionTrue(predicateContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(4563, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("9)e~C>-+GQU(7k", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("9)e~C>-+GQU(7k", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "55");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      Object object0 = coreFunction2.functionContains((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertNotNull(object0);
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(5, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(5, 5)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Double double0 = new Double(2291.473);
      assertNotNull(double0);
      assertEquals(2291.473, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("2291.473", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(3503, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3503, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(642);
      assertNotNull(nodeTypeTest0);
      assertEquals(642, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(41, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(642, nodeTypeTest0.getNodeType());
      assertEquals(41, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-502), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals(642, nodeTypeTest0.getNodeType());
      assertEquals((-502), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1333, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertEquals(642, nodeTypeTest0.getNodeType());
      assertEquals(1333, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(951, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertEquals(642, nodeTypeTest0.getNodeType());
      assertEquals(951, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(27, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertEquals(642, nodeTypeTest0.getNodeType());
      assertEquals(27, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1815), nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(642, nodeTypeTest0.getNodeType());
      assertEquals((-1815), step5.getAxis());
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(6, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)boolean1));
      assertFalse(object1.equals((Object)boolean0));
      assertNotNull(object1);
      assertEquals(true, object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object2.equals((Object)object0));
      assertNotNull(object2);
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction((byte)28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("unknownFunction28()", string1);
      assertEquals(1, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(boolean0);
      assertEquals(5, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1780, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1780, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("#f(,.@u9");
      assertNotNull(qName0);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-25), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-25), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-25), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-25), step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[1]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-25), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-25), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step1, locale0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(beanPointer0);
      assertEquals(6, expressionArray0.length);
      assertNotSame(step1, step0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-25), step1.getAxis());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreOperationGreaterThanOrEqual0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(6, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-25), step1.getAxis());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(initialContext0);
      assertEquals(6, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step1, step0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-25), step1.getAxis());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, false, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(ancestorContext0);
      assertEquals(6, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-25), step1.getAxis());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = ancestorContext0.getRootContext();
      assertFalse(step1.equals((Object)step0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(6, expressionArray0.length);
      assertNotSame(step1, step0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-25), step1.getAxis());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(rootContext0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-41), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-41), coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-41));
      assertNotNull(nodeTypeTest0);
      assertEquals((-41), nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals((-41), nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("#f(,.@u9");
      assertNotNull(qName0);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      
      Step step0 = new Step(21, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertEquals(21, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(21, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertEquals(21, step1.getAxis());
      
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)boolean0));
      assertNotNull(object0);
      assertEquals(true, object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("number");
      assertNotNull(processingInstructionTest0);
      assertEquals("number", processingInstructionTest0.getTarget());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("number", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      Object object1 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)boolean0));
      assertNotNull(object1);
      assertEquals(true, object1);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("number", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction2 = new CoreFunction((-1400), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertEquals((-1400), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1400()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("#f(,.@u9");
      assertNotNull(qName0);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(21, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(21, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(21, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertEquals("#f(,.@u9", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(21, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[1]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(6, expressionArray0.length);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], extensionFunction0);
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("#f(,.@u9", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("#f(,.@u9", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      expressionArray0[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer integer0 = new Integer((-2363));
      assertNotNull(integer0);
      assertEquals((-2363), (int)integer0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("N");
      assertNotNull(processingInstructionTest0);
      assertEquals("N", processingInstructionTest0.getTarget());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      QName qName1 = new QName("", "");
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertTrue(qName0.equals((Object)qName1));
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      assertTrue(qName0.equals((Object)qName1));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationNotEqual0);
      assertTrue(qName0.equals((Object)qName1));
      assertNotNull(coreOperationMod0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray0);
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(4, expressionArray0.length);
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], extensionFunction1);
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals("lang", string0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004 != org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000006 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005) >= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000008)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName(":)/I-~f?~hpTuYrLSQz");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(")/I-~f?~hpTuYrLSQz", qName0.getName());
      assertEquals(":)/I-~f?~hpTuYrLSQz", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals(")/I-~f?~hpTuYrLSQz", qName0.getName());
      assertEquals(":)/I-~f?~hpTuYrLSQz", qName0.toString());
      assertEquals(":)/I-~f?~hpTuYrLSQz", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("", qName0.getPrefix());
      assertEquals(")/I-~f?~hpTuYrLSQz", qName0.getName());
      assertEquals(":)/I-~f?~hpTuYrLSQz", qName0.toString());
      assertEquals(":)/I-~f?~hpTuYrLSQz", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("P^`k-k$ea+{_pNDV");
      assertNotNull(processingInstructionTest0);
      assertEquals("P^`k-k$ea+{_pNDV", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionFloor((EvalContext) null);
      assertNotNull(object0);
      assertEquals(35.0, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction1.functionBoolean((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)boolean0));
      assertNotNull(object1);
      assertEquals(true, object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object2 = coreFunction1.functionString((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object2);
      assertEquals("35", object2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("^Hi pAdCz|C;Ej");
      assertNotNull(processingInstructionTest0);
      assertEquals("^Hi pAdCz|C;Ej", processingInstructionTest0.getTarget());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      QName qName1 = new QName("", "^Hi pAdCz|C;Ej");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(":^Hi pAdCz|C;Ej", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("^Hi pAdCz|C;Ej", qName1.getName());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      String string0 = coreFunction1.getFunctionName();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals("number", string0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3108), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray1.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals((-3108), coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(4, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals((-3108), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName(":)/I-~f?~hpTuYrLSQz");
      assertNotNull(qName0);
      assertEquals(":)/I-~f?~hpTuYrLSQz", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(")/I-~f?~hpTuYrLSQz", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(":)/I-~f?~hpTuYrLSQz", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(")/I-~f?~hpTuYrLSQz", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":)/I-~f?~hpTuYrLSQz", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals(":)/I-~f?~hpTuYrLSQz", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(")/I-~f?~hpTuYrLSQz", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":)/I-~f?~hpTuYrLSQz", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2648), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2648), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(5, 5)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)/I-~f?~hpTuYrLSQz");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("^Hi pAdCz|C;Ej");
      assertNotNull(processingInstructionTest0);
      assertEquals("^Hi pAdCz|C;Ej", processingInstructionTest0.getTarget());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      
      QName qName1 = new QName("");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      QName qName2 = new QName("oQF*mW08>f");
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertNotNull(qName2);
      assertEquals("oQF*mW08>f", qName2.getName());
      assertNull(qName2.getPrefix());
      assertEquals("oQF*mW08>f", qName2.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName2);
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertNotNull(variablePointer0);
      assertEquals("oQF*mW08>f", qName2.getName());
      assertNull(qName2.getPrefix());
      assertEquals("oQF*mW08>f", qName2.toString());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: oQF*mW08>f
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("P^`k-k$ea+{_pNDV");
      assertNotNull(processingInstructionTest0);
      assertEquals("P^`k-k$ea+{_pNDV", processingInstructionTest0.getTarget());
      
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("$Z9QL^apq4EYR\"I4", "$Z9QL^apq4EYR\"I4");
      assertNotNull(qName0);
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getPrefix());
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getName());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getPrefix());
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getName());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", nodeNameTest0.toString());
      
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getPrefix());
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getName());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", nodeNameTest0.toString());
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getPrefix());
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getName());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", nodeNameTest0.toString());
      assertEquals(10, step1.getAxis());
      
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-2658-2658");
      assertNotNull(processingInstructionTest0);
      assertEquals("-2658-2658", processingInstructionTest0.getTarget());
      
      Step step2 = new Step((-372), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertEquals("-2658-2658", processingInstructionTest0.getTarget());
      assertEquals((-372), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-372), processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertEquals("-2658-2658", processingInstructionTest0.getTarget());
      assertEquals((-372), step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-372), nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(4, expressionArray0.length);
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getPrefix());
      assertEquals("$Z9QL^apq4EYR\"I4", qName0.getName());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$Z9QL^apq4EYR\"I4:$Z9QL^apq4EYR\"I4", nodeNameTest0.toString());
      assertEquals((-372), step4.getAxis());
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      Double double0 = Double.valueOf((double) 8);
      assertNotNull(double0);
      assertEquals(8.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      expressionArray0[2] = (Expression) coreFunction0;
      Constant constant1 = new Constant("{if/j)oo-q");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[3] = (Expression) constant1;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(4, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string1 = constant0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0", string1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      coreFunction0.args = expressionArray0;
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      int int0 = coreFunction0.getFunctionCode();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, int0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string2 = coreFunction1.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("unknownFunction0()(0)", string2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("The namespace xmlns");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("The namespace xmlns", qName0.getName());
      assertEquals("The namespace xmlns", qName0.toString());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      ChildContext childContext0 = new ChildContext(attributeContext0, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      SelfContext selfContext0 = new SelfContext(childContext0, (NodeTest) null);
      assertNotNull(selfContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionLocalName(selfContext0);
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, evalContextArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 8;
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[0], expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationDivide0);
      assertEquals(4, expressionArray1.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray1[0], expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationDivide1);
      assertEquals(4, expressionArray1.length);
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationDivide1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray1[2]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(4, expressionArray1.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationOr0);
      assertEquals(4, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationDivide1;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction((-2970), expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray2.length);
      assertEquals((-2970), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreOperationDivide coreOperationDivide2 = (CoreOperationDivide)coreFunction0.getArg3();
      assertFalse(coreOperationDivide2.equals((Object)coreOperationDivide0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreOperationDivide2);
      assertEquals(3, expressionArray2.length);
      assertSame(coreOperationDivide2, coreOperationDivide1);
      assertNotSame(coreOperationDivide2, coreOperationDivide0);
      assertNotSame(expressionArray2, expressionArray1);
      assertNotSame(expressionArray2, expressionArray0);
      assertEquals((-2970), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide2.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide2;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertEquals(0, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("10", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1613, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1613, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertTrue(object1.equals((Object)string0));
      assertNotNull(object1);
      assertEquals("0", object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertNotNull(coreOperationAnd1);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationDivide0);
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertNotNull(coreOperationSubtract0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(14, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(14, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(4770, nodeNameTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step1);
      assertEquals(2, expressionArray1.length);
      assertEquals(4770, step1.getAxis());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      stepArray0[1] = step1;
      Step step2 = new Step(15, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(8, expressionArray0.length);
      assertEquals(15, step2.getAxis());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      stepArray0[2] = step2;
      Step step3 = new Step(13, nodeNameTest0, expressionArray1);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals(2, expressionArray1.length);
      assertEquals(13, step3.getAxis());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      stepArray0[3] = step3;
      Step step4 = new Step(4770, nodeNameTest0, expressionArray1);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step4);
      assertEquals(2, expressionArray1.length);
      assertEquals(4770, step4.getAxis());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(5, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd1, expressionPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(5, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals(2, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationOr0, coreOperationAnd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationDivide1);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationAdd1);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd1;
      CoreOperationAnd coreOperationAnd2 = new CoreOperationAnd(expressionArray1);
      assertFalse(coreOperationAnd2.equals((Object)coreOperationAnd1));
      assertFalse(coreOperationAnd2.equals((Object)coreOperationAnd0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd2);
      assertEquals(2, expressionArray1.length);
      assertEquals("and", coreOperationAnd2.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationAnd2;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step2, (Pointer) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step4));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(8, expressionArray0.length);
      assertEquals(15, step2.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step4));
      assertNotNull(evalContext0);
      assertEquals(8, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(step2, step3);
      assertNotSame(step2, step1);
      assertNotSame(step2, step0);
      assertNotSame(step2, step4);
      assertEquals(15, step2.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      coreFunction0.functionLast(evalContext0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer((-2166));
      assertNotNull(integer0);
      assertEquals((-2166), (int)integer0);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("id");
      assertNotNull(qName0);
      assertEquals("id", qName0.getName());
      assertEquals("id", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals("id", qName0.getName());
      assertEquals("id", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(8, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], extensionFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(8, expressionArray0.length);
      assertEquals("id", qName0.getName());
      assertEquals("id", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("id", qName0.getName());
      assertEquals("id", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("id", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2648), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      QName qName0 = new QName(", ");
      assertNotNull(qName0);
      assertEquals(", ", qName0.getName());
      assertEquals(", ", qName0.toString());
      assertNull(qName0.getPrefix());
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction((-5927), expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreFunction3);
      assertEquals(2, expressionArray0.length);
      assertEquals((-5927), coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      
      String string0 = coreFunction1.toString();
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals("local-name(5, 5)", string0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      QName qName1 = new QName("local-name(5, 5)", "local-name(5, 5)");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("local-name(5, 5)", qName1.getPrefix());
      assertEquals("local-name(5, 5)", qName1.getName());
      assertEquals("local-name(5, 5):local-name(5, 5)", qName1.toString());
      
      CoreFunction coreFunction4 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertNotNull(coreFunction4);
      assertEquals(2, expressionArray0.length);
      assertEquals(10, coreFunction4.getFunctionCode());
      assertEquals(2, coreFunction4.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction3;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction3, expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction4));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals((-5927), coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      VariableReference variableReference0 = new VariableReference(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("local-name(5, 5)", qName1.getPrefix());
      assertEquals("local-name(5, 5)", qName1.getName());
      assertEquals("local-name(5, 5):local-name(5, 5)", qName1.toString());
      
      expressionArray1[2] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[0], variableReference0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray1.length);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("local-name(5, 5)", qName1.getPrefix());
      assertEquals("local-name(5, 5)", qName1.getName());
      assertEquals("local-name(5, 5):local-name(5, 5)", qName1.toString());
      
      expressionArray1[3] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreFunction1;
      expressionArray1[6] = (Expression) coreFunction4;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction4;
      CoreFunction coreFunction5 = new CoreFunction((-2648), expressionArray1);
      assertFalse(coreFunction5.equals((Object)coreFunction2));
      assertFalse(coreFunction5.equals((Object)coreFunction0));
      assertFalse(coreFunction5.equals((Object)coreFunction1));
      assertFalse(coreFunction5.equals((Object)coreFunction4));
      assertFalse(coreFunction5.equals((Object)coreFunction3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction5);
      assertEquals(9, expressionArray1.length);
      assertEquals((-2648), coreFunction5.getFunctionCode());
      assertEquals(9, coreFunction5.getArgumentCount());
      
      Object object0 = coreFunction2.functionConcat((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction5));
      assertFalse(coreFunction2.equals((Object)coreFunction4));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("55", object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction5);
      assertNotSame(coreFunction2, coreFunction4);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction((-2166), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2166), coreFunction0.getFunctionCode());
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2166), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Integer integer0 = new Integer((-2788));
      assertNotNull(integer0);
      assertEquals((-2788), (int)integer0);
      
      Expression[] expressionArray0 = null;
      int int0 = 12;
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer(27);
      Constant constant0 = new Constant(integer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wc");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      coreFunction1.getFunctionCode();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(489);
      Step step0 = new Step((-1), processingInstructionTest0, expressionArray0);
      coreFunction1.toString();
      QName qName0 = new QName("org.jdom.ContentList", "wc");
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(27)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer((-2166));
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("id");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, (Expression) null);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[4], coreOperationLessThan0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      QName qName0 = new QName("zJ!K'zT ,%");
      CoreFunction coreFunction1 = new CoreFunction(1383, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer integer0 = new Integer(17);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      constant0.toString();
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(17, 17, 17, 17, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      Integer integer0 = new Integer(26);
      String string1 = coreFunction1.toString();
      assertEquals("unknownFunction28()()", string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(27);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"mod\"");
      Step step0 = new Step((-6725), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(27, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1187), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(6, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-6725), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(27, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("Plk^i");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Plk^i");
      Step step0 = new Step(17, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(17, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeNameTest0, (Expression[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Plk^i");
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      locationPath0.areBasicPredicates((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      expressionPath0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(evalContextArray0[3]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer(27);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Short short0 = new Short((short) (-1));
      Constant constant0 = new Constant(short0);
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("No such variable: '");
      Step step0 = new Step(1231, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant0;
      Step step1 = new Step(1231, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-2410), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(1231, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer integer0 = new Integer((-2166));
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("id");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, (Expression) null);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[4], coreOperationLessThan0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, coreOperationAdd0);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant(integer0);
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Constant constant0 = new Constant(integer0);
      Integer integer1 = new Integer(7);
      Constant constant1 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer(27);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Integer integer1 = new Integer(54);
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Integer integer0 = new Integer((-2341));
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(182, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-273), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      coreFunction0.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, coreFunction0.args);
      Step step1 = new Step(0, nodeTypeTest0, coreFunction0.args);
      Step step2 = new Step(0, nodeTypeTest0, coreFunction0.args);
      CoreFunction coreFunction2 = new CoreFunction((-1214), coreFunction0.args);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction2;
      expressionArray1[1] = (Expression) coreFunction2;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreFunction2;
      expressionArray1[4] = (Expression) coreFunction2;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction3 = new CoreFunction(7, expressionArray1);
      coreFunction3.toString();
      QName qName0 = new QName("name(unknownFunction-1214()(0), unknownFunction-1214()(0), 0, unknownFunction-1214()(0), unknownFunction-1214()(0), unknownFunction0()(0))");
      CoreFunction coreFunction4 = new CoreFunction((-3746), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction4.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3746()(0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      QName qName0 = new QName("X?");
      CoreFunction coreFunction1 = new CoreFunction(1351, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer integer0 = new Integer((-2341));
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(182, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      Integer integer1 = new Integer((-5074));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction1);
      QName qName0 = new QName("Px%l_n|]Q/Z$]]", "");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer1, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, integer1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("");
      expressionArray0[1] = (Expression) constant1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], constant1);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[2], constant0);
      expressionArray0[3] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      coreFunction0.getFunctionName();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.getFunctionCode();
      String string0 = coreFunction1.toString();
      assertEquals("id(0)", string0);
      assertEquals(4, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(79);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      JXPathContext.newContext(jXPathContext0, (Object) unionContext0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      // Undeclared exception!
      try { 
        expressionPath0.compute(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1684, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      QName qName0 = new QName("...");
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction2, coreFunction0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, (Expression[]) null, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 8, nodeNameTest0);
      Object object0 = coreFunction1.computeValue(evalContext0);
      assertNotNull(object0);
      
      CoreFunction coreFunction3 = new CoreFunction(41, (Expression[]) null);
      coreFunction0.getArgumentCount();
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(19, int0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(19, processingInstructionTest0, coreFunction0.args);
      Step step1 = new Step(19, processingInstructionTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      Step step2 = new Step(19, processingInstructionTest0, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction(1524, expressionArray1);
      coreFunction3.getArgumentCount();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      Object object1 = coreFunction1.functionCeiling(ancestorContext0);
      assertEquals(19.0, object1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      Byte byte0 = new Byte((byte)29);
      CoreFunction coreFunction0 = new CoreFunction((byte)29, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(29, int0);
      
      String string0 = coreFunction0.toString();
      assertEquals("key(0)", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-273), expressionArray0);
      QName qName0 = new QName("local-name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(9, nodeNameTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-4067));
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      Step step1 = new Step(24, nodeNameTest0, expressionArray1);
      Step step2 = new Step((-1046), nodeNameTest0, expressionArray0);
      Step step3 = new Step(500, nodeNameTest0, expressionArray1);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer((-2897));
      QName qName0 = new QName("key", "3z@.HD<Z");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("key");
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.getFunctionName();
      QName qName1 = new QName("'key'");
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = new Integer(27);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      QName qName0 = new QName("RRYiS0W}Hi4PjHcR0uy", "] ");
      QName qName1 = new QName("zJ!K'zT ,%");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.functionSubstring(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(27, 27, 27)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Integer integer0 = new Integer(27);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.isContextDependent();
      QName qName0 = new QName("L");
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Integer integer0 = new Integer(10);
      Constant constant0 = new Constant(integer0);
      Constant constant1 = new Constant("$9`ug%7'c:j");
      constant1.toString();
      constant0.toString();
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(803, expressionArray0);
      coreFunction1.isContextDependent();
      QName qName0 = new QName("translate");
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(10, '$9`ug%7'c:j', org.apache.commons.jxpath.ri.compiler.Constant@0000000002 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '$9`ug%7'c:j', 10, '$9`ug%7'c:j', '$9`ug%7'c:j')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0");
      QName qName0 = new QName("0");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step[] stepArray0 = new Step[1];
      Expression[] expressionArray1 = new Expression[6];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      Step step0 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 1, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(evalContext1, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2648), expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      coreFunction1.computeContextDependent();
      QName qName0 = new QName(", ");
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(5, 5)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Integer integer0 = new Integer(10);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      Constant constant1 = new Constant(integer0);
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(7, nodeNameTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(91);
      Step step1 = new Step(23, nodeNameTest0, expressionArray0);
      Step step2 = new Step((-1422), nodeTypeTest0, expressionArray0);
      Step step3 = new Step(10, nodeNameTest0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(57, expressionArray0);
      coreFunction1.toString();
      QName qName0 = new QName("unknownFunction57()(10, null, null, 10, 10, 10, 10, 10)", "");
      CoreFunction coreFunction2 = new CoreFunction(915, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = 27;
      Expression[] expressionArray0 = new Expression[0];
      Integer integer0 = new Integer(27);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-116), expressionArray0);
      coreFunction0.isContextDependent();
      QName qName0 = new QName("Sa\"");
      EvalContext evalContext0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H84RrsQ$sU!G1%9{lun");
      CoreFunction coreFunction2 = new CoreFunction((-116), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-116()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = new Integer((-1605));
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      constant0.toString();
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3138), expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-3138), int0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-1605");
      Step step0 = new Step((-3138), processingInstructionTest0, expressionArray0);
      Step step1 = new Step((-3138), processingInstructionTest0, expressionArray0);
      Step step2 = new Step(8, processingInstructionTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3138));
      Step step3 = new Step((-3138), processingInstructionTest0, expressionArray0);
      Step step4 = new Step((-1214), processingInstructionTest0, expressionArray0);
      Step step5 = new Step((-1605), nodeTypeTest0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-3138), expressionArray0);
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction-3138()(-1605, -1605, -1605, -1605)", string0);
      
      QName qName0 = new QName("-1605", "unknownFunction-3138()(-1605, -1605, -1605, -1605)");
      CoreFunction coreFunction2 = new CoreFunction(1593, expressionArray0);
      Object object0 = coreFunction2.functionConcat((EvalContext) null);
      assertEquals("-1605-1605-1605-1605", object0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(19, int0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(19, processingInstructionTest0, coreFunction0.args);
      Step step1 = new Step(19, processingInstructionTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) coreFunction0;
      Step step2 = new Step(19, processingInstructionTest0, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      Step step3 = new Step((-140), nodeTypeTest0, coreFunction0.args);
      Step step4 = new Step(19, nodeTypeTest0, expressionArray1);
      Step step5 = new Step(3, processingInstructionTest0, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("not(19)", string0);
      
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(19.0, object0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionNot(selfContext0);
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      boolean boolean0 = coreFunction0.isContextDependent();
      QName qName0 = new QName("The namespace xmlns");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("false");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, processingInstructionTest0, false);
      Object object0 = coreFunction0.functionNot(ancestorContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(object0.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("L");
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(403, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(79);
      JXPathContext.newContext((Object) nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer integer0 = new Integer(79);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("floor");
      QName qName0 = new QName("", "floor");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest1);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(73, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction73()(79, 79, 79, 79, 79)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Constant constant0 = new Constant(integer0);
      Integer integer1 = new Integer(7);
      Constant constant1 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(33, expressionArray0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.functionName((EvalContext) null);
      assertEquals(33, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.getFunctionName();
      Long long0 = new Long(8);
      Constant constant0 = new Constant(long0);
      constant0.toString();
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction1.isContextDependent();
      int int0 = coreFunction1.getFunctionCode();
      assertEquals(8, int0);
      
      coreFunction1.toString();
      QName qName0 = new QName("lang");
      String string0 = coreFunction0.toString();
      assertEquals("string()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(30);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Integer integer0 = new Integer(30);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.functionStringLength((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      Object object0 = coreFunction0.functionFloor(namespaceContext0);
      assertEquals(30.0, object0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      Object object1 = coreFunction0.functionNot(precedingOrFollowingContext0);
      assertEquals(false, object1);
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(73, expressionArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      coreFunction0.getArgumentCount();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-741));
      Step step0 = new Step(91, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(73, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(91, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(21790719, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-741), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-741), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      expressionPath0.evalSteps(nodeSetContext0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionPosition(attributeContext0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction73()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 32;
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QName qName0 = new QName("VDtu", "last");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "last");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      processingInstructionTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationUnion0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Integer integer0 = new Integer(17);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationGreaterThanOrEqual0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Double double0 = new Double(0);
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("translate");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, coreOperationAnd0);
      expressionArray0[6] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName(". State unchanged.", ". State unchanged.");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ". State unchanged.");
      Step step0 = new Step(46, nodeNameTest0, expressionArray0);
      step0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      coreFunction0.isContextDependent();
      step0.isContextDependent();
      step0.isContextDependent();
      step0.toString();
      step0.isContextDependent();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-273), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2152), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot modify property: ");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      coreFunction0.isContextDependent();
      QName qName0 = new QName("The namespace xmlns");
      Step step0 = new Step(0, (NodeTest) null, coreFunction0.args);
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "0");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, (NodeTest) null, true);
      coreFunction0.functionNumber(precedingOrFollowingContext0);
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      JXPathContext.newContext((Object) step0);
      CoreFunction coreFunction2 = new CoreFunction((-1246), expressionArray0);
      coreFunction2.functionStringLength((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray0);
      coreFunction3.functionFloor((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 30;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      String string0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Integer integer0 = new Integer(51);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      QName qName0 = new QName("The namespace xmlns");
      Step step0 = new Step(19, (NodeTest) null, expressionArray0);
      step0.isContextDependent();
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction2, locationPath0);
      CoreFunction coreFunction3 = new CoreFunction(800, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) selfContext0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, childContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction3.functionName(evalContext0);
      String string0 = coreFunction3.toString();
      assertEquals("unknownFunction800()()", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-2152), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot modify property: ");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object0);
      assertEquals((-2152), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, (Expression) null);
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("META-INF/services/");
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      Step step0 = new Step(58, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(58, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1579), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, processingInstructionTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      QName qName0 = new QName("The namespace xmlns");
      Step step0 = new Step(0, (NodeTest) null, coreFunction0.args);
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      step0.isContextDependent();
      stepArray0[6] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction2, coreFunction0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction3 = new CoreFunction(685, expressionArray1);
      assertEquals(685, coreFunction3.getFunctionCode());
      
      coreFunction0.functionName((EvalContext) null);
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction0()(0)", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Integer integer0 = new Integer(10);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      Constant constant1 = new Constant(integer0);
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(91, expressionArray0);
      coreFunction0.getFunctionName();
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      QName qName0 = new QName("number", "number");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      Step step0 = new Step(30, nodeTypeTest0, expressionArray0);
      Step step1 = new Step(151, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, locationPath0);
      CoreFunction coreFunction1 = new CoreFunction(1304, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      NodeTest nodeTest0 = null;
      Step step0 = new Step((-273), (NodeTest) null, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-273), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      boolean boolean0 = coreFunction0.isContextDependent();
      QName qName0 = new QName("The namespace xmlns");
      CoreFunction coreFunction2 = new CoreFunction(968, expressionArray0);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      
      CoreFunction coreFunction3 = new CoreFunction(200, expressionArray0);
      Object object1 = coreFunction3.functionCeiling((EvalContext) null);
      assertEquals(0.0, object1);
      assertEquals(200, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      processingInstructionTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000001, 0, -(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      processingInstructionTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer((-13));
      String string0 = "key";
      QName qName0 = new QName("key", "3z@.HD<Z");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-13), expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1367), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationAnd0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[0]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      ancestorContext0.getContextNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[1], (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      coreFunction0.functionStringLength(evalContext0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      coreFunction1.isContextDependent();
      coreFunction0.getFunctionCode();
      coreFunction1.toString();
      QName qName0 = new QName("The namespace xmlns");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      coreFunction1.functionStringLength((EvalContext) null);
      coreFunction0.functionFloor((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTest nodeTest0 = null;
      Step step0 = new Step((-273), (NodeTest) null, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-273), expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      coreFunction1.isContextDependent();
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction3.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("", "w`Xc");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1706, expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1706()(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003, $:w`Xc)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(23, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(20, (NodeTest) null, expressionArray0);
      Step step2 = new Step(23, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-1094), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      boolean boolean0 = step3.isContextDependent();
      assertFalse(boolean0);
      
      Step step4 = new Step(985, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, (NodeTest) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1094));
      coreFunction0.functionString(ancestorContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      expressionArray0[1] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      Expression expression0 = coreFunction2.getArg1();
      expressionArray0[2] = expression0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, expression0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction4 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction4.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(779, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(79);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      JXPathContext.newContext(jXPathContext0, (Object) unionContext0);
      Step step0 = new Step(25, nodeTypeTest0, expressionArray0);
      QName qName0 = new QName("Cannot find an element by key - no KeyManager has been specified", "<=");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<=");
      Step step1 = new Step((-542), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[8];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step1;
      stepArray0[4] = step1;
      stepArray0[5] = step1;
      stepArray0[6] = step1;
      stepArray0[7] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-542), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      coreFunction1.isContextDependent();
      coreFunction0.getFunctionCode();
      coreFunction1.toString();
      QName qName0 = new QName("The namespace xmlns");
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Integer
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      JXPathContext.newContext((Object) "#]-^):!FV44)M!Wao");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      Step step0 = new Step((-1), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-693), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, locationPath0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getArg3();
      assertEquals((-1), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      nameAttributeTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(1433, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1433()((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) <= (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1367), expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(79);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      JXPathContext.newContext(jXPathContext0, (Object) unionContext0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      boolean boolean0 = expressionPath0.computeContextDependent();
      assertFalse(boolean0);
      
      Step step0 = new Step(25, nodeTypeTest0, expressionArray0);
      step0.isContextDependent();
      step0.toString();
      step0.isContextDependent();
      step0.toString();
      expressionPath0.createContextForStep((EvalContext) null, 0, nodeTypeTest0);
      assertEquals(25, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("qms}<\u0007Q-j");
      Expression[] expressionArray1 = new Expression[6];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, (Expression) null);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) constant0;
      Constant constant1 = new Constant("");
      expressionArray1[3] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], (Expression) null);
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[5] = (Expression) nameAttributeTest0;
      Step step0 = new Step(38, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(151, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1304, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[1], expressionArray1[2]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(79, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(79);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      JXPathContext.newContext(jXPathContext0, (Object) unionContext0);
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, nodeTypeTest0);
      ancestorContext0.getContextNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionCode();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(19, processingInstructionTest0, coreFunction0.args);
      QName qName0 = new QName("X35I", "19");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, expressionArray0[0]);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, coreFunction0.args);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, variableReference0);
      CoreFunction coreFunction1 = new CoreFunction(19, coreFunction0.args);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1367), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(23, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(20, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(23, (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-1094), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(985, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, (NodeTest) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1094));
      expressionPath0.createContextForStep(ancestorContext0, (-1094), nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(910, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      QName qName0 = new QName("key", "3z@.HD<Z");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      String string0 = "VDtu";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step step0 = new Step(19, (NodeTest) null, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(2010, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("I6C7NBTbJ");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(0, coreFunction0.args);
      coreFunction1.isContextDependent();
      coreFunction0.getFunctionCode();
      coreFunction1.toString();
      QName qName0 = new QName("The namespace xmlns");
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("R4XfM{E6mUSbbe99");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1895));
      Step step0 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(442, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step4 = new Step((-697), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      Step step5 = new Step(442, nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationMultiply0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1703), (Expression[]) null);
      Step step0 = new Step((-635), (NodeTest) null, (Expression[]) null);
      step0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(41, (Expression[]) null);
      coreFunction1.isContextDependent();
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, (Expression[]) null, (Step[]) null);
      expressionPath0.computeContextDependent();
      step0.isContextDependent();
      step0.toString();
      step0.isContextDependent();
      expressionPath0.createContextForStep((EvalContext) null, (-3), (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      constant0.toString();
      QName qName0 = new QName("19");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeNameTest0);
      Locale locale0 = Locale.FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, namespaceContext0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, childContext0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionRound(rootContext0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(19.0, object0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int int0 = (-1120);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1120), (Expression[]) null);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-1120), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1120), expressionArray1);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Q!|QxNl7;1u");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1120()(unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      QName qName0 = new QName("dhppZ;37Tq+V\"A");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, coreFunction0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationSubtract0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      Step step0 = new Step(13, (NodeTest) null, expressionArray1);
      Step step1 = new Step(32, (NodeTest) null, expressionArray0);
      coreFunction0.isContextDependent();
      Step[] stepArray0 = new Step[6];
      Step step2 = new Step(32, (NodeTest) null, expressionArray0);
      stepArray0[0] = step2;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step1;
      stepArray0[5] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionPath0.computeContextDependent();
      step0.isContextDependent();
      step2.toString();
      step0.isContextDependent();
      step1.toString();
      expressionPath0.createContextForStep((EvalContext) null, 0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after('null', 'null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      QName qName0 = new QName("zJ!K'zT ,%");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "zJ!K'zT ,%");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      Byte byte0 = new Byte((byte)15);
      Constant constant0 = new Constant(byte0);
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.getFunctionCode();
      coreFunction1.toString();
      QName qName0 = new QName("15");
      assertEquals("15", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.getFunctionName();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationLessThanOrEqual0.toString();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[3], coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      constant0.toString();
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1703), (Expression[]) null);
      coreFunction0.getFunctionCode();
      coreFunction0.toString();
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = (-1120);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1120), (Expression[]) null);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-1120), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1120), expressionArray1);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Q!|QxNl7;1u");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1120()(unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()(), unknownFunction-1120()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3457, expressionArray0);
      Integer integer0 = new Integer((-2101));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationMod");
      jXPathContext0.setLenient(false);
      Locale locale0 = Locale.JAPAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3457()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      VariableReference variableReference0 = new VariableReference((QName) null);
      coreOperationLessThanOrEqual0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'null', 'null', $null, $null, 'null', org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationUnion0);
      Integer integer0 = new Integer(17);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      coreFunction1.getFunctionCode();
      coreFunction1.toString();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest1);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(19);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionCode();
      coreFunction0.toString();
      QName qName0 = new QName("19");
      assertEquals("19", qName0.getName());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1120), (Expression[]) null);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-1120), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1120), (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      coreFunction0.isContextDependent();
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      boolean boolean0 = expressionPath0.computeContextDependent();
      assertFalse(boolean0);
      
      step0.isContextDependent();
      step1.toString();
      step1.isContextDependent();
      expressionPath0.createContextForStep((EvalContext) null, 602, (NodeTest) null);
      coreFunction0.compute((EvalContext) null);
      assertEquals((-1120), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1120), (Expression[]) null);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-1120), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1120), (NodeTest) null, (Expression[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreFunction0);
      coreOperationLessThanOrEqual0.toString();
      Constant constant0 = new Constant("n>V-p=|I+5d$D>8");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationMultiply0);
      Constant constant1 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004 <= org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001");
      constant1.toString();
      CoreFunction coreFunction1 = new CoreFunction((-1120), (Expression[]) null);
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      coreFunction0.functionTrue(selfContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(79, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(79);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr1;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("");
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VDtu");
      processingInstructionTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationLessThanOrEqual0.toString();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[3], coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      constant0.toString();
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after('null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, $null, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002) >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004) >= org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000006), (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004) * (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1079, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      QName qName0 = null;
      String string0 = "";
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getJXPathContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(93, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      
      expressionArray0[1] = null;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("^Ieb'pi`j<");
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, expression0);
      expressionArray1[6] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[2], expression0);
      expressionArray1[7] = (Expression) coreOperationNotEqual0;
      Step step0 = new Step((-730), processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Constant constant1 = new Constant("^Ieb'pi`j<");
      expressionArray0[4] = (Expression) constant1;
      QName qName0 = new QName("parent", "parent");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, (Expression) null);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[4], expressionArray0[0]);
      expressionArray0[8] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(93, expressionArray0);
      assertEquals(93, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2061, expressionArray0);
      coreFunction0.computeContextDependent();
      Integer integer0 = new Integer(1015);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) integer0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, decimalFormat0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[2] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference((QName) null);
      expressionArray0[3] = (Expression) variableReference1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      Step step0 = new Step(17, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step1 = new Step(17, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-1280), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(22, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(Integer.MIN_VALUE, nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray1, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) variableReference1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray2);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-629), expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionCode();
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-629()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3457, expressionArray0);
      Integer integer0 = new Integer((-2101));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationMod");
      jXPathContext0.setLenient(false);
      Locale locale0 = Locale.JAPAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3457()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4737), (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4737()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1703), (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("#$r/k");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      namespaceContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      QName qName0 = new QName("#$r/k", "<<unknown namespace>>");
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1703()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1177, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3194), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3194()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr1;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2198));
      Step step1 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      Step step2 = new Step((-1309), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1057), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1450), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) variableReference0;
      expressionArray2[4] = (Expression) coreOperationOr0;
      expressionArray2[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[6] = (Expression) constant0;
      expressionArray2[7] = (Expression) variableReference0;
      expressionArray2[8] = (Expression) coreOperationOr1;
      Step step5 = new Step((-1005), nodeTypeTest0, expressionArray2);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(descendantContext0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = evalContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = evalContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) <= (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003 or org.apache.commons.jxpath.ri.compiler.Constant@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008, 0, org.apache.commons.jxpath.ri.compiler.Constant@0000000004 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) and org.apache.commons.jxpath.ri.compiler.Constant@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008, $)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(79, expressionArray0);
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction79()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      Constant constant0 = new Constant((String) null);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(1455, expressionArray0);
      assertEquals(1455, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreOperationNegate0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("tN#bq}6Uh#");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2112), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(500, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], locationPath1);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2112), expressionArray0);
      coreFunction0.getArg1();
      assertEquals((-2112), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = 32;
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("]-WZGJ>'m", "]-WZGJ>'m");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2255), expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.getFunctionCode();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      Locale locale0 = Locale.FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "]-WZGJ>'m", locale0);
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1963, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1963()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionCode();
      coreFunction0.toString();
      QName qName0 = new QName("0");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.getFunctionName();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }
}
