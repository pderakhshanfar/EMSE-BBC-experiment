/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 05:53:08 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(1938, expressionArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) decimalFormat0);
      QName qName0 = new QName("T)NK'A'S(<;SLKi_.!", "T)NK'A'S(<;SLKi_.!");
      Integer integer0 = Integer.getInteger("T)NK'A'S(<;SLKi_.!", 1061);
      Locale locale0 = new Locale("00", "00");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreOperationOr0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      coreFunction0.functionStringLength((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("O\"j{iZCT");
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nameAttributeTest0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreFunction0.functionRound(rootContext1);
      coreFunction0.functionNormalizeSpace(rootContext1);
      coreFunction0.functionCeiling(attributeContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeTypeTest0, false);
      coreFunction0.functionCount(rootContext1);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("_E:hi-l~b2w;", "_E:hi-l~b2w;");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory");
      expressionArray0[2] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CoreFunction coreFunction0 = new CoreFunction((-1200), expressionArray0);
      coreFunction0.getArgumentCount();
      Step[] stepArray0 = new Step[7];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1200), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      Step step2 = new Step(2637, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(42, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[0];
      Step step4 = new Step(42, nodeNameTest0, expressionArray2);
      stepArray0[4] = step4;
      Step step5 = new Step(2637, nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step6 = new Step(1719, nodeNameTest1, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, nodeNameTest1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("_E:hi-l~b2w;");
      expressionPath0.createContextForStep(ancestorContext0, 1719, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-446));
      Step step0 = new Step(24, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-446), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = (Expression) constant0;
      QName qName0 = new QName((String) null, "string");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray2[3] = (Expression) variableReference0;
      expressionArray2[4] = (Expression) constant0;
      expressionArray2[5] = (Expression) constant0;
      expressionArray2[6] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray2);
      expressionArray2[7] = (Expression) coreOperationAdd0;
      expressionArray2[8] = (Expression) constant0;
      Step step3 = new Step(32, nodeTypeTest0, expressionArray2);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1610612712);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(292, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-828), expressionArray1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationOr0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray1[1], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      QName qName0 = new QName("g?B_Xe#%K;2U+E`O");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g?B_Xe#%K;2U+E`O");
      ParentContext parentContext0 = new ParentContext(initialContext0, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction1.functionLast(initialContext0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("^;*(?n^", "^;*(?n^");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, extensionFunction1);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2407), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-15));
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-15), expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      QName qName0 = new QName("g?B_Xe#%K;2U+E`O");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction1.functionNamespaceURI(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: g?B_Xe#%K;2U+E`O
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("GUtOl=mlc9lLPU", "GUtOl=mlc9lLPU");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("GUtOl=mlc9lLPU");
      Step step0 = new Step((-1751), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1711), expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionBoolean(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      coreOperationOr0.args = expressionArray1;
      CoreFunction coreFunction0 = new CoreFunction((-825), expressionArray1);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Byte byte0 = new Byte((byte) (-37));
      Constant constant0 = new Constant(byte0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-841), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((byte) (-37), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-841), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("KX=!E");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      Constant constant0 = new Constant((Number) null);
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, coreOperationOr0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[2];
      QName qName1 = new QName("id", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step0 = new Step(5, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(5, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath1, nameAttributeTest0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationOr0, locationPath1);
      expressionArray0[5] = (Expression) coreOperationNotEqual1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[7] = (Expression) constant1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) selfContext0;
      evalContextArray0[2] = (EvalContext) selfContext0;
      evalContextArray0[3] = (EvalContext) selfContext0;
      evalContextArray0[4] = (EvalContext) selfContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionNull(unionContext0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1610612736);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("{TuR}lGO", "Cannot find an element by ID - no IdentityManager has been specified");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Integer integer0 = new Integer(1610612736);
      Constant constant0 = new Constant(integer0);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAnd1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], extensionFunction0);
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1610612736, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      coreOperationOr0.args = expressionArray1;
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-846), expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray1);
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-825), expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("d");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "Ln*G ]|u-4K");
      Step step0 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(16, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(14, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(14, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionTrue(parentContext0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0false");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(selfContext0, basicNodeSet0);
      constant0.iteratePointers(nodeSetContext0);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionName(nodeSetContext0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationEqual0);
      QName qName0 = new QName("0aY5", "false");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeNameTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) coreOperationOr0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      QName qName0 = new QName("p\"&_", "p\"&_");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: p\"&_:p\"&_
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-7));
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-825), expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2147483645);
      Step step0 = new Step(4, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1676, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2147483645, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1375, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1676, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(1105, (Expression[]) null);
      JXPathContext jXPathContext0 = null;
      String string0 = "DA";
      QName qName0 = new QName("DA");
      Locale.forLanguageTag("CD^A_");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, "CD^A_");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      SelfContext selfContext0 = new SelfContext(unionContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(selfContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-7));
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&J^|?#+");
      CoreFunction coreFunction0 = new CoreFunction(468, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionCount((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction468()(-7)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(3341, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(3341, expressionArray1);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(3341, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(3341, expressionArray1);
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(3341, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, unionContext0, (Pointer) null);
      QName qName0 = new QName("`(G@<h>]xBQc*_wl(P", "`(G@<h>]xBQc*_wl(P");
      Locale locale0 = new Locale("`(G@<h>]xBQc*_wl(P", "4z8'no<YQ@Qbm{-");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getAbsoluteRootContext();
      EvalContext[] evalContextArray1 = new EvalContext[8];
      evalContextArray1[0] = (EvalContext) rootContext1;
      InitialContext initialContext0 = new InitialContext(evalContextArray1[0]);
      evalContextArray1[1] = (EvalContext) initialContext0;
      evalContextArray1[2] = (EvalContext) rootContext0;
      evalContextArray1[3] = (EvalContext) rootContext1;
      evalContextArray1[4] = (EvalContext) unionContext0;
      evalContextArray1[5] = (EvalContext) rootContext0;
      evalContextArray1[6] = evalContext0;
      evalContextArray1[7] = evalContext0;
      UnionContext unionContext1 = new UnionContext(evalContext0, evalContextArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(unionContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(3341, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      coreFunction1.toString();
      coreFunction1.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(3341, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      coreFunction1.toString();
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction1.toString();
      coreFunction1.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w]ct-^h{3'9|g4");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("fTOq}N");
      Step step0 = new Step((-328), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, expressionPath0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionPath1);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationEqual0, coreOperationGreaterThan0);
      expressionArray0[4] = (Expression) coreOperationSubtract1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      expressionPath1.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Byte byte0 = new Byte((byte) (-10));
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("h{/3{DThB", "h{/3{DThB");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Byte byte0 = new Byte((byte) (-10));
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1716), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1716), expressionArray0);
      coreFunction1.toString();
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction1.functionSubstring((EvalContext) null);
      coreFunction1.functionContains((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Byte byte0 = new Byte((byte) (-10));
      Constant constant1 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(468, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Byte
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(3341, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray1);
      coreFunction1.toString();
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      nodeTypeTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(1105, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      coreOperationOr0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("$M+t=69Yb7Y!)[", "$M+t=69Yb7Y!)[");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      // Undeclared exception!
      coreFunction0.functionID(childContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 23;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6144);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeTypeTest0);
      Expression[] expressionArray1 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(6144, expressionArray1);
      coreFunction0.getArg2();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreFunction0);
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      coreFunction0.getArg3();
      expressionArray1[1] = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray1[2] = (Expression) coreOperationOr0;
      QName qName0 = new QName("+KQorz3[=2p1%", "+KQorz3[=2p1%");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1482), expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction((-1482), expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("zxV-_p7p$b");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(4449, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      coreFunction0.compute((EvalContext) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, false);
      QName qName1 = new QName("", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      DescendantContext descendantContext0 = new DescendantContext(childContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("", "");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      coreOperationAnd0.computeContextDependent();
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("string-length", "unknownFunction0()");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(variablePointer0).when(jXPathContextReferenceImpl0).getPointerByID(anyString());
      doReturn(variablePointer0).when(jXPathContextReferenceImpl0).getContextPointer();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName1 = new QName(",");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, "unknownFunction0()", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getJXPathContext();
      coreFunction0.functionID(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      Locale locale0 = Locale.JAPANESE;
      QName qName0 = new QName("string-length", "unknownFunction0()");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Pointer) null).when(jXPathContextReferenceImpl0).getPointerByID(anyString());
      doReturn(variablePointer0).when(jXPathContextReferenceImpl0).getContextPointer();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName1 = new QName(",");
      Locale locale1 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, "unknownFunction0()", locale1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getJXPathContext();
      coreFunction0.functionID(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1105, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1105, expressionArray0);
      coreFunction0.functionSubstringBefore(attributeContext0);
      CoreFunction coreFunction2 = new CoreFunction(1105, expressionArray0);
      coreFunction2.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1105()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(63, expressionArray1);
      coreFunction0.toString();
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1610612736);
      Expression[] expressionArray1 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(1610612736, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreOperationUnion0);
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      expressionArray1[1] = (Expression) coreFunction1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationOr0, coreFunction0);
      expressionArray1[2] = (Expression) coreOperationNotEqual1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreOperationNotEqual1);
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationOr1;
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(6, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(6, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(41, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[5] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr2 = new CoreOperationOr(expressionArray1);
      expressionArray1[6] = (Expression) coreOperationOr2;
      CoreFunction coreFunction2 = new CoreFunction(1610612736, expressionArray1);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[1], expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      coreFunction2.functionLocalName(evalContext0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      Step step3 = new Step((-5886), processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(4603, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[1], coreOperationUnion0);
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, processingInstructionTest0, false);
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, expressionArray0[7]);
      // Undeclared exception!
      coreFunction0.functionRound(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(63);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationUnion0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1610612736, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2664));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      constant0.iteratePointers(childContext0);
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      expressionArray1[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray1);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant1 = new Constant(double0);
      expressionArray0[2] = (Expression) constant1;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference1;
      VariableReference variableReference2 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference2;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(480, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(480, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1105, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(1105, expressionArray1);
      coreFunction1.functionSubstringBefore(attributeContext0);
      coreFunction0.toString();
      coreFunction1.compute(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1610612736);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1610612736, expressionArray0);
      coreFunction0.functionStringLength(attributeContext0);
      coreFunction0.functionLast(attributeContext0);
      coreFunction0.functionLast(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("[(#lz])47#+]9Pf");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, constant0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[4] = (Expression) locationPath0;
      Constant constant1 = new Constant("");
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2048, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, false, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, expressionArray0[2]);
      // Undeclared exception!
      coreFunction0.functionConcat(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      Byte byte0 = new Byte((byte)104);
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("format-number");
      Step step0 = new Step((byte)104, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(654, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((byte)104, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(594, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((byte)104, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      coreOperationMultiply0.computeContextDependent();
      Step step5 = new Step((byte)104, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(654, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(654, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod2 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod2;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w]ct-^h{3'9|g4");
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("fTOq}N");
      Step step0 = new Step((-328), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, expressionPath0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionPath1);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationEqual0, coreOperationGreaterThan0);
      expressionArray0[4] = (Expression) coreOperationSubtract1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, coreOperationDivide0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2547, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.iterate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("count");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("_eT\"dZz(", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "count");
      Step step0 = new Step(17, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1594), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1594), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(402, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(402, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1935, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(104, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-992), nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(402, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant((Number) null);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2045, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2045);
      CoreFunction coreFunction1 = new CoreFunction(2045, expressionArray0);
      coreFunction1.computeContextDependent();
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod2 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod2;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number($:null, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 mod org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 mod org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("#V7", "dM|5*ZWW.>}N&Wrs6%");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-247), expressionArray0);
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(508, expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray1);
      // Undeclared exception!
      coreFunction2.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getFunctionName();
      JXPathContext jXPathContext0 = null;
      QName qName0 = new QName("G< /wzekt~HAy/");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        variablePointer0.getRootNode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: G< /wzekt~HAy/
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1815, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      Short short0 = new Short((short)9);
      Constant constant1 = new Constant(short0);
      expressionArray0[2] = (Expression) constant1;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[3], coreOperationAnd0);
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray1 = new Expression[9];
      QName qName0 = new QName("number");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[0], expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("number");
      expressionArray1[3] = (Expression) constant0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray1[4] = (Expression) coreOperationOr1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray1[5] = (Expression) coreOperationNegate0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[6] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[2], constant0);
      expressionArray1[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[8] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 11;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathFunctionNotFoundException");
      expressionArray1[1] = (Expression) constant0;
      QName qName0 = new QName("`Os]~ 7.3l08:y1j0");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, expressionArray1[2]);
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, expressionArray1[2]);
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray1[5] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray1[4], coreOperationOr0);
      expressionArray1[6] = (Expression) coreOperationSubtract1;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationOr1);
      expressionArray1[7] = (Expression) coreOperationDivide0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationSubtract0);
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "`Os]~ 7.3l08:y1j0");
      Step step0 = new Step(47, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(47, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(47, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(517, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      QName qName1 = new QName("Q3nWI?", "Q3nWI?");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      Step step4 = new Step(517, nodeNameTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(517, nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(47, nodeNameTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(13, nodeNameTest0, expressionArray1);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, coreOperationAnd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationOr1);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationDivide0, expressionArray1, stepArray0);
      expressionArray0[3] = (Expression) expressionPath1;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, expressionArray1[2]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(517, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], coreOperationDivide0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant0 = new Constant("");
      expressionArray0[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "format-number");
      Step step0 = new Step((-3645), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(397, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(397, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual1, expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationUnion1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-3645), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(1105, (Expression[]) null);
      coreFunction0.compute(attributeContext0);
      coreFunction1.functionLast(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      coreFunction0.functionStringLength(parentContext0);
      coreFunction0.functionLast(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(63, expressionArray1);
      coreFunction0.toString();
      coreFunction0.functionTranslate((EvalContext) null);
      coreFunction0.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction63()(, , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("LH@nkPP3v0m{0V3$e");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, coreOperationNegate0);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      Expression[] expressionArray1 = new Expression[1];
      Step step0 = new Step(11, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(13, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      Byte byte0 = new Byte((byte)10);
      Constant constant0 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionPath0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(847, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">z36b-<ZYYav%fzJ50");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) selfContext0);
      ChildContext childContext0 = new ChildContext(selfContext0, processingInstructionTest0, true, false);
      QName qName0 = new QName("JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates", "");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, processingInstructionTest0, false);
      Locale locale0 = Locale.JAPAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, precedingOrFollowingContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, childContext0, nodePointer0);
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, processingInstructionTest0);
      parentContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      coreFunction0.functionCeiling(rootContext0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("#Fj*UN qW>");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, variableReference0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(116);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.computeValue(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-320), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("NPcf$zPnZ3q", "\"namespace::\"");
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "K/h~p4g");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-141), expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[0] = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      // Undeclared exception!
      coreFunction1.toString();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, expressionArray1[5]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      Step step1 = new Step(8, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step2 = new Step(88, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(8, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(21, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(21, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(88, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, expressionArray1[5]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      QName qName0 = new QName("", "");
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-756), (Expression[]) null);
      coreFunction1.computeContextDependent();
      coreFunction1.toString();
      CoreFunction coreFunction3 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction3.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3580));
      CoreFunction coreFunction1 = new CoreFunction((-3580), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionBoolean((EvalContext) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      coreFunction1.functionNot((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(-1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VariableReference variableReference0 = new VariableReference((QName) null);
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(204, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VariableReference variableReference0 = new VariableReference((QName) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3580));
      CoreFunction coreFunction1 = new CoreFunction((-3580), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.functionNot((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(-1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[2] = (Expression) variableReference0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[3] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-1783), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      Constant constant1 = new Constant("\"namespace::\"");
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      coreOperationAdd0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction((-24), expressionArray1);
      Expression[] expressionArray2 = new Expression[8];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreOperationOr0;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreFunction0;
      expressionArray2[4] = (Expression) coreOperationOr0;
      expressionArray2[5] = (Expression) coreFunction0;
      expressionArray2[6] = (Expression) coreOperationAdd0;
      expressionArray2[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray2);
      CoreFunction coreFunction2 = new CoreFunction(23, expressionArray2);
      QName qName0 = new QName("m@ji", "m@ji");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "9E(l#@r2)#dvJ3j8W<<");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction2.iteratePointers(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(unknownFunction-24()(, , ), , unknownFunction-24()(, , ), unknownFunction-24()(, , ), , unknownFunction-24()(, , ), , unknownFunction-24()(, , ))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      QName qName0 = new QName("Q3@oUu[[Sm{FS");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      coreFunction0.functionName(parentContext0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      Object object0 = coreFunction0.functionSum((EvalContext) null);
      assertEquals(0.0, object0);
      
      Object object1 = coreFunction1.compute(parentContext0);
      assertNotNull(object1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      QName qName0 = new QName("d`0i3.o)POZ");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[9];
      QName qName1 = new QName((String) null, "d`0i3.o)POZ");
      VariableReference variableReference1 = new VariableReference(qName1);
      expressionArray1[0] = (Expression) variableReference1;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray1[5]);
      expressionArray1[8] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(1856, expressionArray1);
      coreFunction2.toString();
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean($d`0i3.o)POZ, unknownFunction0()('null'), unknownFunction0()('null'), 'null', 'null', 'null', unknownFunction0()('null'), $d`0i3.o)POZ, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      QName qName0 = new QName((String) null, "LZZqhiTw ");
      CoreFunction coreFunction1 = new CoreFunction(397, expressionArray0);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(397, expressionArray0);
      coreFunction1.computeContextDependent();
      coreFunction2.toString();
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        unionContext0.getSingleNodePointer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      QName qName0 = new QName("", "");
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      constant0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(". It cannot be converted to ");
      Step step0 = new Step((-1948), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-24), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1948), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-1948), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      expressionArray0[6] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[5], expressionArray0[6]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-3512), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      Step step0 = new Step(32, nodeNameTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-3512), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3512()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Float float0 = new Float((float) 3);
      Constant constant0 = new Constant(float0);
      expressionArray0[2] = (Expression) constant0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Gw.A5g:$[lKy<mK";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gw.A5g:$[lKy<mK");
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Gw.A5g:$[lKy<mK");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Gw.A5g:$[lKy<mK");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      coreFunction0.computeValue(namespaceContext0);
      coreFunction0.getArgumentCount();
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      QName qName0 = new QName("}$1)mS");
      VariableReference variableReference0 = new VariableReference(qName0);
      QName qName1 = new QName("boolean", "boolean");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(80, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray0);
      coreFunction2.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("Um", "Um");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Um");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(79, (Expression[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 7;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      int int0 = 17;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      QName qName0 = new QName((String) null, "translate()");
      QName qName1 = new QName("T{,a2MN;x");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Integer integer0 = new Integer(2812);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) integer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, "T{,a2MN;x", (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionString(evalContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "Zu#|SzL+eX)w-05";
      String string1 = ",lD";
      QName qName0 = new QName("Zu#|SzL+eX)w-05", ",lD");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-924), expressionArray0);
      JXPathContext jXPathContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",lD");
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName1 = new QName(",lD");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 11;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&");
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1642, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      QName qName0 = new QName((String) null, "format-number()");
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      QName qName1 = new QName("T{,a2MN;x");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray1);
      coreFunction2.computeContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      Expression[] expressionArray2 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction0.getArgumentCount();
      Expression[] expressionArray3 = new Expression[2];
      expressionArray3[0] = (Expression) variableReference0;
      expressionArray3[1] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray3);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("name", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      QName qName0 = new QName("qq$y$^e,,L&Soat", "Ko8[");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(516, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      coreFunction0.toString();
      String string0 = coreFunction1.toString();
      assertEquals("string('null')", string0);
      
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertEquals(8, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      QName qName0 = new QName((String) null, "format-number()");
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(18, (Expression[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction2.computeContextDependent();
      CoreFunction coreFunction3 = new CoreFunction(993, (Expression[]) null);
      coreFunction2.toString();
      coreFunction3.toString();
      CoreFunction coreFunction4 = new CoreFunction((-4025), (Expression[]) null);
      CoreFunction coreFunction5 = new CoreFunction((-4025), (Expression[]) null);
      CoreFunction coreFunction6 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction3.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      QName qName0 = new QName("Gb]C3]KY*hR=p$y+Tz", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("T{,a2MN;x");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      coreFunction1.toString();
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 12;
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      QName qName1 = new QName("org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory", (String) null);
      VariableReference variableReference0 = new VariableReference(qName1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step step0 = new Step(32, nodeNameTest0, expressionArray0);
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      Step step2 = new Step(2, nodeNameTest0, expressionArray0);
      Step step3 = new Step(40, nodeNameTest0, expressionArray0);
      Step step4 = new Step(1485, nodeNameTest0, expressionArray0);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr1, expressionArray0, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step step0 = new Step(25, nodeNameTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      Step step1 = new Step(134217728, nodeTypeTest0, expressionArray0);
      Step step2 = new Step(7, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      Step step3 = new Step(0, nodeTypeTest0, expressionArray1);
      Step step4 = new Step(20, nodeNameTest0, expressionArray1);
      Step step5 = new Step(15, nodeNameTest0, expressionArray1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, expressionArray1[0]);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step4;
      stepArray0[1] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray1, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-934), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(15, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 6;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1642, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1642, expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction((-2173), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      QName qName0 = new QName("=6nLI)'6wF4+7V", "*[8-D)");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      Step step0 = new Step(355, nodeTypeTest0, expressionArray1);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Step[] stepArray0 = new Step[8];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      Step step1 = new Step(6, nodeTypeTest0, expressionArray1);
      stepArray0[7] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(117, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      coreFunction1.toString();
      QName qName0 = new QName((String) null, "");
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray0);
      QName qName1 = new QName("T{,a2MN;x");
      QName qName2 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction2.computeContextDependent();
      CoreFunction coreFunction3 = new CoreFunction(19, (Expression[]) null);
      CoreFunction coreFunction4 = new CoreFunction((-39), expressionArray0);
      coreFunction4.toString();
      CoreFunction coreFunction5 = new CoreFunction((-39), (Expression[]) null);
      coreFunction5.compute((EvalContext) null);
      CoreFunction coreFunction6 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction4.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(25, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "number");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, (NodeTest) null, false);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) nodeSetContext0;
      UnionContext unionContext0 = new UnionContext(precedingOrFollowingContext0, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionRound(unionContext0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      QName qName0 = new QName("+.ofgY{?zmC:{17ennY");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "eC2s)tdC_r{!uul");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction2 = new CoreFunction((-1291), (Expression[]) null);
      Constant constant0 = new Constant("eC2s)tdC_r{!uul");
      CoreFunction coreFunction3 = new CoreFunction(20, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      Expression[] expressionArray2 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray2);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2107);
      Step step0 = new Step(3, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction((-56), expressionArray0);
      coreFunction0.toString();
      CoreFunction coreFunction2 = new CoreFunction(71, expressionArray2);
      coreFunction2.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      QName qName0 = new QName("boolean", "boolean");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(1895, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(993, expressionArray0);
      coreFunction0.toString();
      coreFunction2.toString();
      CoreFunction coreFunction3 = new CoreFunction(1895, expressionArray0);
      CoreFunction coreFunction4 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction4.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("u<o*", ", column ");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant("u<o*");
      expressionArray0[4] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-220), expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationSubtract0);
      CoreFunction coreFunction1 = new CoreFunction(1242, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-507), expressionArray0);
      // Undeclared exception!
      coreFunction1.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("namespace-uri");
      String string0 = "eC2s)tdC_r{!uul";
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "namespace-uri");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 26;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray1[0]);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      QName qName0 = new QName("^BK;r0wp29t4il@H7%", "last");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray2 = new Expression[8];
      expressionArray2[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction1);
      expressionArray2[1] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("last");
      expressionArray2[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) coreFunction1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray2[1], expressionArray2[0]);
      expressionArray2[4] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, expressionArray2[0]);
      expressionArray2[6] = (Expression) coreFunction0;
      expressionArray2[7] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(28, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction2.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      Expression[] expressionArray2 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray2);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      expressionArray2[0] = (Expression) coreOperationGreaterThan0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray2[1] = expression0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expression0, expressionArray2[1]);
      expressionArray2[2] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("\"key\"");
      expressionArray2[3] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray2[4] = (Expression) coreOperationUnion0;
      Expression expression1 = coreFunction0.getArg2();
      expressionArray2[5] = expression1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray2[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray2);
      QName qName0 = new QName("\"key\"", "\"key\"");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = null;
      int int0 = 456;
      CoreFunction coreFunction2 = new CoreFunction(456, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray2);
      coreFunction2.toString();
      // Undeclared exception!
      try { 
        coreFunction3.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray1[1]);
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("Z^FK{LtdUR!,", "*[8-D)");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[1] = (Expression) variableReference0;
      expressionArray2[2] = (Expression) coreOperationUnion0;
      Step step0 = new Step(Integer.MIN_VALUE, nodeTypeTest0, expressionArray2);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      QName qName0 = new QName("boolean", "boolean");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      coreFunction2.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("+.ofgY{?zmC:{17ennY");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "eC2s)tdC_r{!uul");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction1.computeValue((EvalContext) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      QName qName0 = new QName((String) null, "format-number()");
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      QName qName1 = new QName("T{,a2MN;x");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray1);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(1012, expressionArray0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(false(), false())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction1.toString();
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray0);
      Expression[] expressionArray2 = new Expression[2];
      Constant constant1 = new Constant("unknownFunction0()('null')");
      expressionArray2[0] = (Expression) constant1;
      expressionArray2[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction3 = new CoreFunction(29, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction3.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(29, nodeTypeTest0, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.functionNamespaceURI((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction0()('null')", string0);
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      String string1 = coreFunction2.getFunctionName();
      assertEquals("local-name", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      QName qName0 = new QName("Gb]C3]KY*hR=p$y+Tz", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(8, (Expression[]) null);
      coreFunction3.toString();
      coreFunction3.toString();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      Step[] stepArray0 = new Step[1];
      NodeTest nodeTest0 = null;
      Step step0 = new Step(74, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      QName qName0 = new QName("", "");
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) expressionPath0;
      expressionArray1[5] = null;
      expressionArray1[6] = (Expression) coreFunction0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(74, expressionArray0);
      expressionArray0[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      QName qName0 = new QName("normalize-space()", "normalize-space()");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      QName qName0 = new QName("Gb]C3]KY*hR=p$y+Tz", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(8, (Expression[]) null);
      coreFunction3.toString();
      coreFunction3.toString();
      CoreFunction coreFunction4 = new CoreFunction(21, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray1);
      coreFunction2.isContextDependent();
      coreFunction1.functionNull((EvalContext) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      coreFunction2.functionTrue(selfContext0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      Expression[] expressionArray2 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(3217, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      Constant constant1 = new Constant((Number) null);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(constant0, constant1);
      expressionArray1[2] = (Expression) nameAttributeTest1;
      expressionArray1[3] = (Expression) nameAttributeTest0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, constant1);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, (Step[]) null);
      expressionArray1[6] = (Expression) expressionPath0;
      expressionArray1[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.compute(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count('null', 'null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000007, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, ((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) mod org.apache.commons.jxpath.ri.compiler.Constant@0000000007)['null'], org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1642, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1642, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "I7h!%@O;n,>|Q~!";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I7h!%@O;n,>|Q~!");
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      QName qName0 = new QName("I7h!%@O;n,>|Q~!");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      int int0 = (-1819);
      CoreFunction coreFunction1 = new CoreFunction((-1819), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((Number) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      Expression[] expressionArray2 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(3217, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-380), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      Expression[] expressionArray2 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray2);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray1);
      coreFunction1.toString();
      coreFunction2.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1642, expressionArray0);
      String string0 = "unknownFunction";
      QName qName0 = new QName("unknownFunction", "unknownFunction");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      CoreFunction coreFunction1 = new CoreFunction(4992, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(16, (Expression[]) null);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      expressionArray1[8] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction3 = new CoreFunction(16, expressionArray1);
      String string0 = coreFunction0.toString();
      assertEquals("normalize-space()", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      int int0 = 8;
      Expression[] expressionArray0 = null;
      int int1 = 23;
      Expression[] expressionArray1 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1642, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1642, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.functionNamespaceURI((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(3012, expressionArray1);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction0()('null')", string0);
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      Object object0 = coreFunction2.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(5, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1105, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(1105, expressionArray1);
      coreFunction0.toString();
      coreFunction1.compute(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("lang()", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      coreFunction0.getFunctionName();
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction1);
      CoreFunction coreFunction2 = new CoreFunction(4156, (Expression[]) null);
      QName qName0 = new QName("`9+<O:>[j.", "last");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, coreFunction0);
      QName qName1 = new QName("`9+<O:>[j.");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction3 = new CoreFunction(4156, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction4 = new CoreFunction(4156, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction4.functionLocalName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction4156()(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003, last())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) expressionPath0;
      expressionArray1[7] = (Expression) variableReference0;
      expressionArray1[8] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[1], coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[8], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      int int0 = 7;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 223;
      Expression[] expressionArray1 = new Expression[2];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("[");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(63, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(223, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(223, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(63, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray1, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(223, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(63);
      QName qName1 = new QName("string");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "[");
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest1);
      namespaceContext0.reset();
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2665, (Expression[]) null);
      QName qName0 = new QName("'Be(^+ok", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(1, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction2.computeContextDependent();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) coreOperationUnion0;
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction3 = new CoreFunction(2665, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction((-2396), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction3 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction3.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction0()('null')", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "I7h!%@O;n,>|Q~!";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I7h!%@O;n,>|Q~!");
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("I7h!%@O;n,>|Q~!");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "I7h!%@O;n,>|Q~!");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.NamespaceContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(4992, (Expression[]) null);
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(4992, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(4992, (Expression[]) null);
      coreFunction3.toString();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      EvalContext evalContext0 = null;
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(, , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1105, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(1105, expressionArray1);
      coreFunction0.toString();
      coreFunction1.compute(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      QName qName0 = new QName("Gb]C3]KY*hR=p$y+Tz", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(8, (Expression[]) null);
      coreFunction3.toString();
      // Undeclared exception!
      try { 
        coreFunction3.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(52, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(, , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1642, expressionArray0);
      EvalContext evalContext0 = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.toString();
      coreFunction1.functionBoolean((EvalContext) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreOperationOr0);
      coreOperationMultiply0.isContextDependent();
      CoreFunction coreFunction2 = new CoreFunction((-1795), expressionArray0);
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("2Hb>V");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, nameAttributeTest0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationGreaterThan0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Integer integer0 = Integer.valueOf((-402));
      Constant constant1 = new Constant(integer0);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationSubtract0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[2], coreOperationSubtract0);
      expressionArray0[6] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("2Hb>V");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "2Hb>V");
      Step step0 = new Step((-402), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2Hb>V");
      Step step2 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(93, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring((org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) > (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004), -402, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000008 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005) | org.apache.commons.jxpath.ri.compiler.Constant@0000000006 | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000007) | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000009) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000010 | (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000011), org.apache.commons.jxpath.ri.compiler.Constant@0000000006 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.reset();
      coreFunction0.functionStringLength(namespaceContext0);
      coreFunction0.functionPosition(namespaceContext0);
      assertEquals(19, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      QName qName0 = new QName("Gb]C3]KY*hR=p$y+Tz", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(8, (Expression[]) null);
      coreFunction3.toString();
      // Undeclared exception!
      try { 
        coreFunction3.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreOperationLessThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationLessThanOrEqual1);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual2;
      Constant constant0 = new Constant("LJ^>]Bxj7");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[0]);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, constant0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual1, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreOperationGreaterThanOrEqual0);
      int int0 = 1105;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 <= org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000008 * org.apache.commons.jxpath.ri.compiler.Constant@0000000007)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[6];
      String string0 = "TK/*j]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TK/*j]");
      Constant constant0 = new Constant("TK/*j]");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationLessThan0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      Constant constant1 = new Constant("TK/*j]");
      expressionArray0[3] = (Expression) constant1;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[1], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      coreOperationGreaterThan0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-4084), expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      Expression[] expressionArray2 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray2);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray1);
      coreFunction1.toString();
      coreFunction2.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-561), expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      int int0 = 2389;
      CoreFunction coreFunction1 = new CoreFunction(2389, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      coreFunction0.functionStringLength((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-2033), expressionArray0);
      coreFunction1.functionNumber(parentContext0);
      QName qName0 = new QName("java.util.concurrent.atomic.AtomicBoolean");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeTypeTest0);
      coreFunction1.functionStringLength((EvalContext) null);
      assertEquals((-2033), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(29, nodeTypeTest0, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3610, expressionArray0);
      coreFunction2.functionNot((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3610()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      QName qName0 = new QName("MPkhz[Sn");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(NaN, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr1, coreOperationEqual0);
      int int0 = 1105;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(14);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      QName qName0 = new QName("unknownFunction0()");
      Locale locale0 = Locale.ITALIAN;
      NodePointer.newNodePointer(qName0, "unknownFunction0()", locale0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = 976;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(976, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      QName qName0 = new QName("UF]YZKhtZ<0=xr>a", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, constant0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3610()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      coreFunction0.functionStringLength((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("O\"j{iZCT");
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nameAttributeTest0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreFunction0.functionRound(rootContext1);
      coreFunction0.functionNormalizeSpace(rootContext1);
      coreFunction0.functionCeiling(attributeContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeTypeTest0, false);
      coreFunction0.functionCount(rootContext1);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2274), (Expression[]) null);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      coreFunction0.iterate((EvalContext) null);
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2274), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2274()(unknownFunction-2274()(), null, null, unknownFunction-2274()(), unknownFunction-2274()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 7;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      QName qName0 = new QName("unknownFunction0()");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-2274), expressionArray1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction2 = new CoreFunction(29, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Step[] stepArray0 = new Step[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      QName qName0 = new QName(" is of unrecognized type and cannot be added");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[5];
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(nameAttributeTest0, expressionPath1);
      expressionArray0[3] = (Expression) nameAttributeTest1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, nameAttributeTest0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest1, coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, constant0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      coreFunction1.functionSum(precedingOrFollowingContext0);
      QName qName1 = new QName("round");
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3610()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      coreOperationSubtract0.toString();
      QName qName0 = new QName("namespace-uri");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[1]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Step step0 = new Step(22, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray2 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray2);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, coreFunction1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("f", "f");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step1 = new Step(1232, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(251, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(925, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(251, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1539, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-2761), nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath1, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[0]);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      ExpressionPath expressionPath2 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      expressionArray0[5] = (Expression) expressionPath2;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("f");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest1, true);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, processingInstructionTest0, false, false);
      // Undeclared exception!
      coreFunction0.functionName(childContext0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n    ");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getArgumentCount();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      coreFunction0.args = expressionArray0;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ancestorContext0.getNodeSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      Step[] stepArray0 = new Step[6];
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionFloor((EvalContext) null);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationGreaterThan0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, (NodeSet) null);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, nameAttributeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, (NodeTest) null);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j");
      int int0 = 19;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, constant0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      coreFunction1.functionSum(precedingOrFollowingContext0);
      QName qName1 = new QName("round");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        attributeContext0.nextSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      assertEquals(3610, coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("UF]YZKhtZ<0=xr>a", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, constant0);
      QName qName1 = new QName("unknownFunction0()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionRound(attributeContext0);
      coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-561), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(0, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction1 = new CoreFunction(629, expressionArray1);
      QName qName0 = new QName("UF]YZKhtZ<0=xr>a", ".i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, coreOperationDivide0);
      QName qName1 = new QName("-IcH;`J@");
      QName qName2 = new QName(".i");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      coreFunction1.functionTrue(childContext0);
      assertEquals(629, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      QName qName0 = new QName("g}`09)", "g}`09)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction((-3396), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      QName qName0 = new QName("UF]YZKhtZ<0=xr>a", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, constant0);
      QName qName1 = new QName("unknownFunction0()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionRound(attributeContext0);
      Object object0 = coreFunction1.functionCount((EvalContext) null);
      assertEquals(3610, coreFunction1.getFunctionCode());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationEqual0);
      coreOperationMultiply0.toString();
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      int int0 = 24;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationOr1.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(0, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction1 = new CoreFunction(629, expressionArray1);
      QName qName0 = new QName("UF]YZKhtZ<0=xr>a", ".i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, coreOperationDivide0);
      QName qName1 = new QName("-IcH;`J@");
      QName qName2 = new QName(".i");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      assertEquals(3610, coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("UF]YZKhtZ<0=xr>a", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, constant0);
      QName qName1 = new QName("unknownFunction0()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionStringLength((EvalContext) null);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      Locale locale0 = new Locale("", "_8Ho");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("unknownFunction0()");
      Locale locale1 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "unknownFunction0()", locale1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "", nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      coreFunction0.functionName(evalContext0);
      coreFunction0.functionCeiling(rootContext0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionString(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction900()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, expressionArray0[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, nameAttributeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1245, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray1);
      coreFunction1.functionFalse((EvalContext) null);
      coreFunction1.compute((EvalContext) null);
      assertEquals(95, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, expressionArray0[1]);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, expressionArray0[1]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(1245, expressionArray0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) nameAttributeTest0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      expressionArray1[3] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(125, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction((-1372), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1372), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      coreFunction1.toString();
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1372()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("p<b^~Dv%");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationOr0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, coreOperationGreaterThanOrEqual0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationDivide0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, variableReference0);
      CoreFunction coreFunction0 = new CoreFunction(1245, expressionArray0);
      Expression[] expressionArray1 = new Expression[18];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-569), expressionArray0);
      QName qName0 = new QName("position");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-569), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-569()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.reset();
      coreFunction0.functionStringLength(namespaceContext0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      String string0 = coreFunction0.toString();
      assertEquals("not()", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      Locale locale0 = new Locale("", "_8Ho");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(",");
      Locale locale1 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "unknownFunction0()", locale1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, ",", nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Object object0 = coreFunction0.functionName(evalContext0);
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionCeiling(rootContext0);
      assertEquals(0.0, object1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb]C3]KY*hR=p$y+Tz");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      QName qName0 = new QName("Gb]C3]KY*hR=p$y+Tz", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction3 = new CoreFunction(40, (Expression[]) null);
      coreFunction2.functionNull((EvalContext) null);
      coreFunction3.functionTrue((EvalContext) null);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[1];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, constant0);
      QName qName1 = new QName("unknownFunction0()");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction1.functionCeiling(ancestorContext0);
      coreFunction1.computeContextDependent();
      coreFunction0.functionString((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      QName qName0 = new QName("namespace-uri");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[1]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeNameTest1);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      coreFunction1.getArg1();
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      int int0 = 9;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(342);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      NodeSet nodeSet0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, (NodeSet) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction900()(null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction((-2977), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction((-1683), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1683()(null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationOr0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(530);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, (NodeTest) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, (NodeSet) null);
      QName qName0 = new QName("wo2`", "CnP{5k");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "CnP{5k");
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, (NodeSet) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, (NodeTest) null);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("p<b^~Dv%");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeNameTest0);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      int int0 = 0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(26, nodeTypeTest0, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-569), expressionArray0);
      QName qName0 = new QName("BCrA2JAcKe+67a63hlY");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      nodeTypeTest0.toString();
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(451);
      Step step0 = new Step(451, nodeTypeTest1, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationSubtract0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, expressionArray0[1]);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext1 = new AttributeContext(attributeContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(attributeContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      coreOperationMultiply0.toString();
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationOr0.toString();
      int int0 = 10;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(NaN, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      Expression expression0 = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, (Expression) null);
      // Undeclared exception!
      try { 
        coreOperationSubtract0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("p<b^~Dv%");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("p<b^~Dv%");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeNameTest0);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, (NodeSet) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, (NodeTest) null);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray1);
      coreFunction0.functionNull(namespaceContext0);
      coreFunction0.computeValue(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-569), expressionArray0);
      Step[] stepArray0 = new Step[13];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-569()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-569), expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, int0);
      assertEquals((-569), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, expressionArray0[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, nameAttributeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1245, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("AU/'^c'5YjS_W");
      CoreFunction coreFunction1 = new CoreFunction((-879), expressionArray1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1245()((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-569), expressionArray0);
      QName qName0 = new QName("position");
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-569), expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(61, expressionArray0);
      coreOperationOr0.toString();
      JXPathContext.newContext((Object) null);
      QName qName0 = new QName("position");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreFunction1);
      coreOperationMultiply0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      coreOperationMultiply0.toString();
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationOr0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(NaN, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[2]);
      JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[3]);
      NodePointer nodePointer0 = null;
      QName qName0 = new QName("Factory ");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[0], (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, nodeNameTest0);
      NodePointer.newChildNodePointer((NodePointer) null, qName0, descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[5];
      Expression[] expressionArray2 = new Expression[0];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[1] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, expressionArray1[2]);
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      expressionArray1[4] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, expressionArray1[0]);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-!x^Jvca9<");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreOperationOr0.toString();
      JXPathContext.newContext((Object) constant0);
      coreOperationMultiply0.toString();
      coreFunction0.getArg1();
      coreFunction0.getArg3();
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(NaN, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      coreOperationDivide0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      QName qName0 = new QName("'qD!vVt+ 8");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[4], (Expression) null);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(58, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-361), expressionArray0);
      coreFunction0.functionNumber((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      Locale locale0 = Locale.JAPANESE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Pointer) null).when(jXPathContextReferenceImpl0).getContextPointer();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(",");
      Locale locale1 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "unknownFunction0()", locale1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 7;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction0()('null')", string0);
      
      Locale locale0 = Locale.CHINESE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(",");
      Locale locale1 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "unknownFunction0()('null')", locale1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, ",", nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Object object0 = coreFunction0.functionName(evalContext0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-736), (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(95);
      Step step0 = new Step((-736), nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-736), nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-736), nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-1589), nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(3477, nodeTypeTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      expressionPath0.createContextForStep(selfContext0, 8, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      coreOperationMultiply0.toString();
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationOr0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(NaN, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg2();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("_@+{u|(h5");
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("p<b^~Dv%");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003), (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, expressionArray1[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreOperationLessThanOrEqual0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationAdd0, coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAdd1;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationLessThan0, coreOperationAdd1);
      expressionArray0[5] = (Expression) coreOperationNotEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationAdd0);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreOperationAdd1;
      expressionArray2[1] = (Expression) coreOperationAdd0;
      expressionArray2[2] = (Expression) coreOperationNotEqual0;
      expressionArray2[3] = (Expression) coreOperationUnion0;
      expressionArray2[4] = (Expression) coreOperationMultiply1;
      expressionArray2[5] = (Expression) coreOperationAdd0;
      expressionArray2[6] = (Expression) coreOperationUnion0;
      expressionArray2[7] = (Expression) coreOperationAdd0;
      expressionArray2[8] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray2);
      expressionArray0[7] = (Expression) coreOperationAdd2;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray2[4]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray2[7]);
      QName qName0 = new QName("\"s");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, expressionArray2[7]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[6], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreFunction0.computeValue(rootContext1);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.toString();
      JXPathContext.newContext((Object) coreFunction0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[5];
      Expression[] expressionArray2 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray2);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[1] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, expressionArray1[2]);
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      expressionArray1[4] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, expressionArray1[0]);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-!x^Jvca9<");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002) | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000004 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005) | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000006) | org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000007)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expression0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationLessThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-3900), expressionArray0);
      assertEquals((-3900), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-736), (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(95);
      Step step0 = new Step((-736), nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-736), nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-736), nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-1589), nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(3477, nodeTypeTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeTypeTest0);
      expressionPath0.createContextForStep(namespaceContext0, 95, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, (NodeSet) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, (NodeTest) null);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray1);
      coreFunction0.functionNull(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(29, nodeTypeTest0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(3610, expressionArray0);
      QName qName0 = new QName("", "");
      QName qName1 = new QName("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, jXPathContext0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionName(evalContext0);
      coreFunction0.functionCeiling(rootContext0);
      coreFunction0.computeContextDependent();
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionString(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3610()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(",");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "unknownFunction0()", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, ",", nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Object object0 = coreFunction0.functionName(evalContext0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Float float0 = new Float((-470.0F));
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray1);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      Step step0 = new Step(29, nodeTypeTest0, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[1], expressionArray1[0]);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(-470, -470, -470)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1105);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(1154);
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationSubtract1;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(1154, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(520, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(520, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, locationPath0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract1, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, constant0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[2], coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationMultiply1);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationNegate0, locationPath1);
      expressionArray0[7] = (Expression) coreOperationLessThan1;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1154, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationDivide0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationNegate0);
      Locale locale0 = Locale.US;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationSubtract1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, step1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      // Undeclared exception!
      coreFunction0.functionSubstring(evalContext0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      QName qName0 = new QName("'qD!vVt+ 8");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003, (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(41, (Expression[]) null);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(41, int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction((-1779), expressionArray0);
      coreFunction0.getArg1();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual((Expression) null, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[2]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      Step step2 = new Step(1, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1779), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(46, expressionArray0);
      Expression expression0 = coreFunction1.getArg3();
      assertSame(expression0, coreOperationEqual1);
      
      expressionArray0[6] = expression0;
      CoreFunction coreFunction2 = new CoreFunction(2476, expressionArray0);
      assertEquals(2476, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[8];
      Constant constant0 = new Constant("");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, constant0);
      expressionArray1[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2579), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray1[2] = null;
      QName qName0 = new QName("KMRPY84898K9)y _Y");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[3] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray1[3], expression0);
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, extensionFunction0);
      expressionArray1[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(expressionArray1[5], nameAttributeTest0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual2);
      expressionArray1[6] = (Expression) coreOperationNegate0;
      Long long0 = new Long(3659);
      Constant constant1 = new Constant(long0);
      expressionArray1[7] = (Expression) constant1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, expressionArray1[5]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(3659, expressionArray0);
      assertEquals(3659, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction0.functionNull(descendantContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-569), expressionArray0);
      Step[] stepArray0 = new Step[1];
      int int0 = 0;
      QName qName0 = new QName("position");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "position", (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext(nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-569()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[4], (Expression) null);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(58, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      constant0.iterate((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }
}
