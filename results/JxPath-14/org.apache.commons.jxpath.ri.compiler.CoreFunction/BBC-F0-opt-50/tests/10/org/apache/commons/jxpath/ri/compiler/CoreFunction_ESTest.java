/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 06:00:53 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.KeyManager;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-376), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-376), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-59432204));
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeTypeTest0);
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("jxK>m,9lj2/b2O|P");
      assertEquals("jxK>m,9lj2/b2O|P", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("jxK>m,9lj2/b2O|P", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = new InitialContext(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeTypeTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(selfContext0);
      
      evalContextArray0[0] = (EvalContext) selfContext0;
      evalContextArray0[1] = (EvalContext) initialContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, evalContextArray0.length);
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(unionContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, nodeTypeTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, evalContextArray0.length);
      assertEquals((-59432204), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("jxK>m,9lj2/b2O|P", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(namespaceContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(45, (Expression[]) null);
      assertEquals(45, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContextArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'jxK>m,9lj2/b2O|P'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationAdd0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      coreOperationNegate0.args = expressionArray0;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(50, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertFalse(boolean0);
      assertEquals(50, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(attributeContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1860, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(1860, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((KeyManager) null).when(jXPathContextReferenceImpl0).getKeyManager();
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("NaN", "NaN");
      assertEquals("NaN:NaN", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("NaN", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationAdd0, locale0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("NaN:NaN", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("NaN", qName0.getName());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("NaN:NaN", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("NaN", qName0.getName());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("NaN:NaN", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("NaN", qName0.getName());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      
      String string0 = (String)coreFunction0.functionSubstringAfter(rootContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals("", string0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1860, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("NaN:NaN", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("NaN", qName0.getName());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "", beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("NaN:NaN", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("NaN", qName0.getName());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("NaN:NaN", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("NaN", qName0.getName());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-945), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-945), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      Object object0 = coreFunction0.functionString(nodeSetContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-945), coreFunction0.getFunctionCode());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray1.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(expressionArray0, expressionArray1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      Integer integer0 = new Integer(30);
      assertEquals(30, (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, integer0, (Pointer) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("6Z2U=GXdb=}pbZz(?rA", "6Z2U=GXdb=}pbZz(?rA");
      assertEquals("6Z2U=GXdb=}pbZz(?rA:6Z2U=GXdb=}pbZz(?rA", qName0.toString());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getName());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("6Z2U=GXdb=}pbZz(?rA:6Z2U=GXdb=}pbZz(?rA", qName0.toString());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getName());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, variablePointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("6Z2U=GXdb=}pbZz(?rA:6Z2U=GXdb=}pbZz(?rA", qName0.toString());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getName());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      ParentContext parentContext0 = new ParentContext(rootContext0, (NodeTest) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("6Z2U=GXdb=}pbZz(?rA:6Z2U=GXdb=}pbZz(?rA", qName0.toString());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getName());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(parentContext0);
      
      String string0 = (String)coreFunction0.computeValue(parentContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertEquals("NaN0", string0);
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("6Z2U=GXdb=}pbZz(?rA:6Z2U=GXdb=}pbZz(?rA", qName0.toString());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getName());
      assertEquals("6Z2U=GXdb=}pbZz(?rA", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("NaN0");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreFunction coreFunction0 = new CoreFunction(231, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(231, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object0);
      assertEquals(231, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(1331, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1331, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals("false", object0);
      assertEquals(1331, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1331()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(6, nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(6, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      String string0 = constant1.toString();
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("'null'", string0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotSame(constant1, constant0);
      assertNotNull(string0);
      
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 3016, nodeNameTest0);
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNotSame(constant0, constant1);
      assertNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("(n3'oa\"zcbSjc-8", "-&il{~c(C,~XP");
      assertEquals("(n3'oa\"zcbSjc-8", qName0.getPrefix());
      assertEquals("(n3'oa\"zcbSjc-8:-&il{~c(C,~XP", qName0.toString());
      assertEquals("-&il{~c(C,~XP", qName0.getName());
      assertNotNull(qName0);
      
      Integer integer0 = new Integer(30);
      assertEquals(30, (int)integer0);
      assertNotNull(integer0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, integer0, locale0);
      assertEquals("(n3'oa\"zcbSjc-8", qName0.getPrefix());
      assertEquals("(n3'oa\"zcbSjc-8:-&il{~c(C,~XP", qName0.toString());
      assertEquals("-&il{~c(C,~XP", qName0.getName());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationDivide0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("(n3'oa\"zcbSjc-8", qName0.getPrefix());
      assertEquals("(n3'oa\"zcbSjc-8:-&il{~c(C,~XP", qName0.toString());
      assertEquals("-&il{~c(C,~XP", qName0.getName());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("(n3'oa\"zcbSjc-8", qName0.getPrefix());
      assertEquals("(n3'oa\"zcbSjc-8:-&il{~c(C,~XP", qName0.toString());
      assertEquals("-&il{~c(C,~XP", qName0.getName());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("(n3'oa\"zcbSjc-8", qName0.getPrefix());
      assertEquals("(n3'oa\"zcbSjc-8:-&il{~c(C,~XP", qName0.toString());
      assertEquals("-&il{~c(C,~XP", qName0.getName());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("|>@,P`|", "3@5(z21-!");
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((AbstractFactory) null).when(jXPathContextReferenceImpl0).getFactory();
      doReturn(locale0, locale0).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((JXPathContext) null).when(jXPathContextReferenceImpl0).getParentContext();
      doReturn(basicVariables0).when(jXPathContextReferenceImpl0).getVariables();
      doReturn(namespaceResolver0, namespaceResolver0).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName1 = new QName("unknownFunction", "wy'_5");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertNotNull(qName1);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("unknownFunction");
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, decimalFormat0, (Locale) null);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      
      AbstractFactory abstractFactory0 = jXPathContext0.getFactory();
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(abstractFactory0);
      
      jXPathContext0.setFactory((AbstractFactory) null);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeNameTest0, true);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(precedingOrFollowingContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, precedingOrFollowingContext0, beanPointer0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(namespaceResolver0.isSealed());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: |>@,P`|:3@5(z21-!
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-10), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-10), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-10), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName(")g@7mA&4q\"<z0?!ngsd");
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("^n5W");
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("^n5W#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("^n5W", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("-^n5W", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("^n5W#", decimalFormat0.toLocalizedPattern());
      assertNotNull(decimalFormat0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNull(qName0.getPrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("^n5W#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("^n5W", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("-^n5W", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("^n5W#", decimalFormat0.toLocalizedPattern());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-10), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("^n5W#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("^n5W", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("-^n5W", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("^n5W#", decimalFormat0.toLocalizedPattern());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-10), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("^n5W#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("^n5W", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("-^n5W", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("^n5W#", decimalFormat0.toLocalizedPattern());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = new InitialContext(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-10), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("^n5W#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("^n5W", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("-^n5W", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("^n5W#", decimalFormat0.toLocalizedPattern());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: )g@7mA&4q\"<z0?!ngsd
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, jXPathContextReferenceImpl1, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(double0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("bWEVmN$JH3S(CDe");
      assertEquals("bWEVmN$JH3S(CDe", qName0.toString());
      assertEquals("bWEVmN$JH3S(CDe", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("bWEVmN$JH3S(CDe", qName0.toString());
      assertEquals("bWEVmN$JH3S(CDe", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertEquals("bWEVmN$JH3S(CDe", qName0.toString());
      assertEquals("bWEVmN$JH3S(CDe", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray0[1]);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationDivide0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1215), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-1215), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*A");
      assertEquals("bWEVmN$JH3S(CDe", qName0.toString());
      assertEquals("bWEVmN$JH3S(CDe", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("*A", nodeNameTest0.getNamespaceURI());
      assertEquals("bWEVmN$JH3S(CDe", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertEquals("bWEVmN$JH3S(CDe", qName0.toString());
      assertEquals("bWEVmN$JH3S(CDe", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("*A", nodeNameTest0.getNamespaceURI());
      assertEquals("bWEVmN$JH3S(CDe", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeNameTest0);
      assertEquals("bWEVmN$JH3S(CDe", qName0.toString());
      assertEquals("bWEVmN$JH3S(CDe", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("*A", nodeNameTest0.getNamespaceURI());
      assertEquals("bWEVmN$JH3S(CDe", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(82, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(82, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(82, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(82, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      QName qName0 = new QName("1hhL4{5@K o}.");
      assertEquals("1hhL4{5@K o}.", qName0.getName());
      assertEquals("1hhL4{5@K o}.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("1hhL4{5@K o}.", qName0.getName());
      assertEquals("1hhL4{5@K o}.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(82, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("1hhL4{5@K o}.", qName0.getName());
      assertEquals("1hhL4{5@K o}.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(82, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("1hhL4{5@K o}.", qName0.getName());
      assertEquals("1hhL4{5@K o}.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext1;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext1;
      evalContextArray0[5] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext1, evalContextArray0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(6, evalContextArray0.length);
      assertEquals(82, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("1hhL4{5@K o}.", qName0.getName());
      assertEquals("1hhL4{5@K o}.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3109), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3109), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3109), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3109), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      QName qName0 = new QName("The PI \"");
      assertNull(qName0.getPrefix());
      assertEquals("The PI \"", qName0.getName());
      assertEquals("The PI \"", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("The PI \"", qName0.getName());
      assertEquals("The PI \"", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3109), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("The PI \"", qName0.getName());
      assertEquals("The PI \"", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = new InitialContext(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3109), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("The PI \"", qName0.getName());
      assertEquals("The PI \"", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: The PI \"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2665, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2665, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2665, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2665, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2665, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(318, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(318, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(85, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(85, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionCount((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      coreOperationDivide0.args = expressionArray1;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, expressionArray0.length);
      assertEquals("0", object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      boolean boolean0 = coreOperationAdd0.isContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertFalse(boolean0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotSame(expressionArray1, expressionArray0);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      coreOperationDivide0.args = expressionArray1;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], coreOperationAdd0);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1288), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1288), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "<<unknown namespace>>");
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeNameTest0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) attributeContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, nodeNameTest0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) descendantContext0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      NodePointer nodePointer0 = selfContext0.getCurrentNodePointer();
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, (NodePointer) null);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(descendantContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("normalize-space");
      assertEquals("normalize-space", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(198, processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("normalize-space", processingInstructionTest0.getTarget());
      assertEquals(198, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, constant0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(198, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(198, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, expressionArray0[0], locale0);
      assertEquals(3, expressionArray0.length);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(198, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, expressionPath0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(rootContext0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      coreOperationDivide0.args = expressionArray1;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant(");");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], coreOperationEqual0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("Q5Wi@H,.<$SqZ4");
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[0], coreOperationEqual0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray1[3] = (Expression) coreOperationDivide0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q5Wi@H,.<$SqZ4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.getName());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray2[0] = (Expression) constant1;
      expressionArray2[1] = (Expression) coreOperationDivide0;
      expressionArray2[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) coreOperationEqual0;
      Step step0 = new Step(1, nodeNameTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(4, expressionArray2.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q5Wi@H,.<$SqZ4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.getName());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals(8, expressionArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q5Wi@H,.<$SqZ4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.getName());
      assertEquals(13, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray1, stepArray0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, stepArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      Expression[] expressionArray3 = new Expression[1];
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      
      expressionArray3[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray3);
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertEquals(1, expressionArray3.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[1], constant0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[6] = (Expression) coreOperationEqual1;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(constant1, expressionArray1[0]);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(6, expressionArray1.length);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMultiply1);
      
      expressionArray0[7] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q5Wi@H,.<$SqZ4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.getName());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, extensionFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(6, expressionArray1.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Q5Wi@H,.<$SqZ4", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Q5Wi@H,.<$SqZ4", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Expression[] expressionArray2 = new Expression[6];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationAdd0;
      expressionArray2[1] = (Expression) coreOperationAdd0;
      expressionArray2[2] = (Expression) coreOperationAdd0;
      expressionArray2[3] = (Expression) coreOperationAdd0;
      expressionArray2[4] = (Expression) coreOperationAdd0;
      expressionArray2[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(6, expressionArray2.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(6, expressionArray2.length);
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray2, expressionArray1);
      assertNotSame(expressionArray2, expressionArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("aD[d+_b6/P/");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationDivide0);
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("position", "position");
      assertEquals("position", qName0.getName());
      assertEquals("position:position", qName0.toString());
      assertEquals("position", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("position", qName0.getName());
      assertEquals("position:position", qName0.toString());
      assertEquals("position", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1328), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-1328), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-932), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-932), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("", "JXPath: found system property");
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNotNull(qName0);
      
      QName qName1 = new QName("JXPath: found system property", "namespace-uri");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("namespace-uri", qName1.getName());
      assertEquals("JXPath: found system property", qName1.getPrefix());
      assertEquals("JXPath: found system property:namespace-uri", qName1.toString());
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("namespace-uri", qName1.getName());
      assertEquals("JXPath: found system property", qName1.getPrefix());
      assertEquals("JXPath: found system property:namespace-uri", qName1.toString());
      assertEquals("JXPath: found system property:namespace-uri", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(1, expressionArray0.length);
      assertEquals("namespace-uri", qName1.getName());
      assertEquals("JXPath: found system property", qName1.getPrefix());
      assertEquals("JXPath: found system property:namespace-uri", qName1.toString());
      assertEquals("JXPath: found system property:namespace-uri", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, step0.getAxis());
      assertNotNull(step0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationNotEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(nameAttributeTest0, coreOperationUnion0);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(coreOperationNotEqual1);
      
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      coreOperationNotEqual0.args = expressionArray0;
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual1, expressionArray0, stepArray0);
      assertFalse(coreOperationNotEqual0.equals((Object)coreOperationNotEqual1));
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(expressionPath0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)127;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)27, (byte)127}, byteArray0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, (Expression) null);
      assertFalse(coreOperationNotEqual0.equals((Object)coreOperationNotEqual1));
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("namespace-uri", qName1.getName());
      assertEquals("JXPath: found system property", qName1.getPrefix());
      assertEquals("JXPath: found system property:namespace-uri", qName1.toString());
      assertEquals("JXPath: found system property:namespace-uri", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(namespaceContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(1, expressionArray2.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("NaN0", "substring-before");
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-3223), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-3223), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-47), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals((-47), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName(" ;_^}SCDSy!s:B]O@");
      assertEquals(" ;_^}SCDSy!s", qName0.getPrefix());
      assertEquals("B]O@", qName0.getName());
      assertEquals(" ;_^}SCDSy!s:B]O@", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("child::");
      assertEquals("child::", qName0.toString());
      assertEquals("child", qName0.getPrefix());
      assertEquals(":", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "child::");
      assertEquals("child::", qName0.toString());
      assertEquals("child", qName0.getPrefix());
      assertEquals(":", qName0.getName());
      assertEquals("child::", nodeNameTest0.toString());
      assertEquals("child::", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertEquals("child::", qName0.toString());
      assertEquals("child", qName0.getPrefix());
      assertEquals(":", qName0.getName());
      assertEquals("child::", nodeNameTest0.toString());
      assertEquals("child::", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, attributeContext0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("child::", qName0.toString());
      assertEquals("child", qName0.getPrefix());
      assertEquals(":", qName0.getName());
      assertEquals("child::", nodeNameTest0.toString());
      assertEquals("child::", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("child::", qName0.toString());
      assertEquals("child", qName0.getPrefix());
      assertEquals(":", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("child::", qName0.toString());
      assertEquals("child", qName0.getPrefix());
      assertEquals(":", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isNode());
      assertTrue(variablePointer1.isContainer());
      assertNull(variablePointer1.getNamespaceURI());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("child::", qName0.toString());
      assertEquals("child", qName0.getPrefix());
      assertEquals(":", qName0.getName());
      assertEquals("child::", nodeNameTest0.toString());
      assertEquals("child::", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isNode());
      assertTrue(variablePointer1.isContainer());
      assertNull(variablePointer1.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'child::'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("LPWn`S]YQnS[U!NcEsf");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationGreaterThan0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = (CoreOperationGreaterThan)coreFunction0.getArg1();
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertSame(coreOperationGreaterThan1, coreOperationGreaterThan0);
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan1;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[3], expressionArray0[1]);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(8, expressionArray0.length);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[4] = (Expression) coreOperationEqual1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, constant0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan(expressionArray0[0], extensionFunction0);
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan1));
      assertEquals(8, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan2.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(coreOperationGreaterThan2);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan2, expressionArray0[3]);
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan1));
      assertEquals(8, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan2.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNull(object0);
      
      coreOperationDivide0.args = expressionArray1;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(".`WT.gxrdxf");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName(".`WT.gxrdxf", ".`WT.gxrdxf");
      assertEquals(".`WT.gxrdxf", qName0.getName());
      assertEquals(".`WT.gxrdxf", qName0.getPrefix());
      assertEquals(".`WT.gxrdxf:.`WT.gxrdxf", qName0.toString());
      assertNotNull(qName0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertNotNull(decimalFormat0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, (Locale) null);
      assertEquals(".`WT.gxrdxf", qName0.getName());
      assertEquals(".`WT.gxrdxf", qName0.getPrefix());
      assertEquals(".`WT.gxrdxf:.`WT.gxrdxf", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, beanPointer0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(".`WT.gxrdxf", qName0.getName());
      assertEquals(".`WT.gxrdxf", qName0.getPrefix());
      assertEquals(".`WT.gxrdxf:.`WT.gxrdxf", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(".`WT.gxrdxf", qName0.getName());
      assertEquals(".`WT.gxrdxf", qName0.getPrefix());
      assertEquals(".`WT.gxrdxf:.`WT.gxrdxf", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(".`WT.gxrdxf", qName0.getName());
      assertEquals(".`WT.gxrdxf", qName0.getPrefix());
      assertEquals(".`WT.gxrdxf:.`WT.gxrdxf", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(".`WT.gxrdxf", qName0.getName());
      assertEquals(".`WT.gxrdxf", qName0.getPrefix());
      assertEquals(".`WT.gxrdxf:.`WT.gxrdxf", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(initialContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("y\"UKL&tH[?dT");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationOr0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("y\"UKL&tH[?dT", "0");
      assertEquals("0", qName0.getName());
      assertEquals("y\"UKL&tH[?dT", qName0.getPrefix());
      assertEquals("y\"UKL&tH[?dT:0", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("y\"UKL&tH[?dT", qName0.getPrefix());
      assertEquals("y\"UKL&tH[?dT:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(expressionArray0, expressionArray1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "y\"UKL&tH[?dT");
      assertEquals("y\"UKL&tH[?dT", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y\"UKL&tH[?dT:0", nodeNameTest0.toString());
      assertEquals("0", qName0.getName());
      assertEquals("y\"UKL&tH[?dT", qName0.getPrefix());
      assertEquals("y\"UKL&tH[?dT:0", qName0.toString());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("y\"UKL&tH[?dT", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y\"UKL&tH[?dT:0", nodeNameTest0.toString());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals("0", qName0.getName());
      assertEquals("y\"UKL&tH[?dT", qName0.getPrefix());
      assertEquals("y\"UKL&tH[?dT:0", qName0.toString());
      assertNotNull(ancestorContext0);
      
      Pointer pointer0 = ancestorContext0.getContextNodePointer();
      assertEquals("y\"UKL&tH[?dT", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y\"UKL&tH[?dT:0", nodeNameTest0.toString());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals("0", qName0.getName());
      assertEquals("y\"UKL&tH[?dT", qName0.getPrefix());
      assertEquals("y\"UKL&tH[?dT:0", qName0.toString());
      assertNull(pointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray1[0], (Pointer) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      coreFunction0.functionConcat(initialContext0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("C0");
      assertEquals("C0", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertEquals("C0", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2137), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer((-2137));
      assertEquals((-2137), (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2137), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2137), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) rootContext1;
      evalContextArray0[1] = (EvalContext) rootContext1;
      evalContextArray0[2] = (EvalContext) rootContext1;
      evalContextArray0[3] = (EvalContext) rootContext1;
      evalContextArray0[4] = (EvalContext) rootContext1;
      evalContextArray0[5] = (EvalContext) rootContext1;
      evalContextArray0[6] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext1, evalContextArray0);
      assertEquals(7, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      QName qName0 = new QName("N ZfeW@^;$w$44", "N ZfeW@^;$w$44");
      assertEquals("N ZfeW@^;$w$44", qName0.getPrefix());
      assertEquals("N ZfeW@^;$w$44:N ZfeW@^;$w$44", qName0.toString());
      assertEquals("N ZfeW@^;$w$44", qName0.getName());
      assertNotNull(qName0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("N ZfeW@^;$w$44");
      assertEquals("N ZfeW@^;$w$44", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("N ZfeW@^;$w$44", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, descendantContext0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("N ZfeW@^;$w$44", qName0.getPrefix());
      assertEquals("N ZfeW@^;$w$44:N ZfeW@^;$w$44", qName0.toString());
      assertEquals("N ZfeW@^;$w$44", qName0.getName());
      assertEquals("N ZfeW@^;$w$44", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) descendantContext0);
      assertEquals("N ZfeW@^;$w$44", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("N ZfeW@^;$w$44", qName0.getPrefix());
      assertEquals("N ZfeW@^;$w$44:N ZfeW@^;$w$44", qName0.toString());
      assertEquals("N ZfeW@^;$w$44", qName0.getName());
      assertEquals("N ZfeW@^;$w$44", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("N ZfeW@^;$w$44", qName0.getPrefix());
      assertEquals("N ZfeW@^;$w$44:N ZfeW@^;$w$44", qName0.toString());
      assertEquals("N ZfeW@^;$w$44", qName0.getName());
      assertEquals("N ZfeW@^;$w$44", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("N ZfeW@^;$w$44", qName0.getPrefix());
      assertEquals("N ZfeW@^;$w$44:N ZfeW@^;$w$44", qName0.toString());
      assertEquals("N ZfeW@^;$w$44", qName0.getName());
      assertEquals("N ZfeW@^;$w$44", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-588), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-588), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("`);Yv VFA-*<[0;Fy?L");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Constant constant1 = new Constant("`);Yv VFA-*<[0;Fy?L");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`);Yv VFA-*<[0;Fy?L");
      assertEquals("`);Yv VFA-*<[0;Fy?L", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(3893, processingInstructionTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("`);Yv VFA-*<[0;Fy?L", processingInstructionTest0.getTarget());
      assertEquals(3893, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[4]);
      assertEquals(7, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      String string0 = "Empty expression context";
      Constant constant2 = new Constant("Empty expression context");
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertNotNull(constant2);
      
      expressionArray0[6] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, expressionArray0.length);
      assertEquals("ceiling", string1);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(string1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-404));
      assertEquals((-404), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(23, nodeTypeTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-404), nodeTypeTest0.getNodeType());
      assertEquals(23, step0.getAxis());
      assertNotNull(step0);
      
      Step step1 = new Step(0, nodeTypeTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertEquals((-404), nodeTypeTest0.getNodeType());
      assertEquals(0, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-404), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals((-404), nodeTypeTest0.getNodeType());
      assertEquals((-404), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      stepArray0[3] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      expressionArray0[1] = (Expression) locationPath1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertNotNull(coreOperationOr1);
      
      expressionArray0[8] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction(1540, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1540, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("DocType");
      assertEquals("DocType", qName0.getName());
      assertEquals("DocType", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("DocType", qName0.getName());
      assertEquals("DocType", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals("DocType", qName0.getName());
      assertEquals("DocType", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      Constant constant0 = new Constant("NaN0");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, constant0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      QName qName0 = new QName("NaN0", "NaN0");
      assertEquals("NaN0", qName0.getName());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0:NaN0", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("NaN0", qName0.getName());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0:NaN0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[4], coreOperationEqual0);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertNotNull(coreOperationMod1);
      
      expressionArray0[5] = (Expression) coreOperationMod1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], expressionArray0[5]);
      assertEquals(7, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("0", "0");
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(2479, nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2479, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-74), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-74), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2479, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2479, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(20, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(4, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(20, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(1610612736, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1610612736, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1265), nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertEquals(4, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1265), step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationUnion0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      Step step6 = new Step(20, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertEquals(1, expressionArray1.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(20, step6.getAxis());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(20, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step6));
      assertEquals(1, expressionArray1.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(20, step7.getAxis());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step((-1778), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step5));
      assertEquals(4, expressionArray0.length);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1778), step8.getAxis());
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(9, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationGreaterThan0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThanOrEqual0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray1.length);
      assertEquals(4, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(9, stepArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(2479, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertEquals(2479, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertEquals("0", qName0.getName());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0:0", qName0.toString());
      assertEquals("0:0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("\"namespace-uri\"");
      assertNull(qName0.getPrefix());
      assertEquals("\"namespace-uri\"", qName0.getName());
      assertEquals("\"namespace-uri\"", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("\"namespace-uri\"", qName0.getName());
      assertEquals("\"namespace-uri\"", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      assertEquals(6, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"namespace-uri\"", qName0.getName());
      assertEquals("\"namespace-uri\"", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(variableReference0, expressionArray0[2]);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(6, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"namespace-uri\"", qName0.getName());
      assertEquals("\"namespace-uri\"", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertNotNull(coreOperationSubtract1);
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], variableReference0);
      assertEquals(6, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"namespace-uri\"", qName0.getName());
      assertEquals("\"namespace-uri\"", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("J");
      assertEquals("J", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(23, processingInstructionTest0, (Expression[]) null);
      assertEquals("J", processingInstructionTest0.getTarget());
      assertEquals(23, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(23, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals(23, step1.getAxis());
      assertEquals("J", processingInstructionTest0.getTarget());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      QName qName0 = new QName("k7m-=2x^[+^qKU'y)");
      assertNull(qName0.getPrefix());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.getName());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = new Locale("~s-vw8p&(49y");
      assertEquals("~s-vw8p&(49y", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("~s-vw8p&(49y", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.getName());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.toString());
      assertEquals("~s-vw8p&(49y", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("~s-vw8p&(49y", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction1, beanPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.getName());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.toString());
      assertEquals("~s-vw8p&(49y", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("~s-vw8p&(49y", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.getName());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.toString());
      assertEquals("~s-vw8p&(49y", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("~s-vw8p&(49y", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.getName());
      assertEquals("k7m-=2x^[+^qKU'y)", qName0.toString());
      assertEquals("~s-vw8p&(49y", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("~s-vw8p&(49y", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: k7m-=2x^[+^qKU'y)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[1], coreOperationLessThanOrEqual0);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(coreOperationNotEqual1);
      
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      Constant constant0 = new Constant("floor");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[4] = (Expression) constant0;
      QName qName0 = new QName("NaN0", "A@o3Rvl%snuYR&/1be=");
      assertEquals("A@o3Rvl%snuYR&/1be=", qName0.getName());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0:A@o3Rvl%snuYR&/1be=", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("A@o3Rvl%snuYR&/1be=", qName0.getName());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0:A@o3Rvl%snuYR&/1be=", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(77, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(77, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("last", "last");
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(8, expressionArray1.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertNotNull(coreOperationOr1);
      
      expressionArray0[2] = (Expression) coreOperationOr1;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("last:last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(1, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("last:last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, step0.getAxis());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeNameTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("last:last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertEquals(1, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-932), nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(8, expressionArray1.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("last:last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertEquals((-932), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(8, expressionArray1.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("last:last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertEquals(1, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-932), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertEquals(8, expressionArray0.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("last:last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertEquals((-932), step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(5, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[3] = (Expression) locationPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[4] = (Expression) variableReference0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(5, stepArray0.length);
      assertFalse(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath1, expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(8, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], coreOperationOr1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("or", coreOperationOr1.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[6]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      Locale locale0 = new Locale("", "");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      
      InitialContext initialContext1 = new InitialContext(initialContext0);
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, initialContext1.getDocumentOrder());
      assertEquals(0, initialContext1.getPosition());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:last", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext1);
      
      // Undeclared exception!
      coreFunction0.functionSubstring(initialContext1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(2048, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(2048, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray2 = new Expression[0];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Step step1 = new Step(0, nodeTypeTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray2.length);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(0, step1.getAxis());
      assertNotNull(step1);
      
      Expression[] expressionArray3 = new Expression[0];
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      
      Step step2 = new Step(1439, nodeTypeTest0, expressionArray3);
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray3.length);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(1439, step2.getAxis());
      assertNotNull(step2);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      Expression[] expressionArray4 = new Expression[0];
      assertFalse(expressionArray4.equals((Object)expressionArray3));
      assertFalse(expressionArray4.equals((Object)expressionArray1));
      assertFalse(expressionArray4.equals((Object)expressionArray0));
      assertFalse(expressionArray4.equals((Object)expressionArray2));
      
      coreOperationDivide0.args = expressionArray4;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      evalContextArray0[1] = (EvalContext) nodeSetContext0;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) namespaceContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) namespaceContext0;
      evalContextArray0[7] = (EvalContext) namespaceContext0;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2137), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer((-2137));
      assertEquals((-2137), (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals(8, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(1729.67745322);
      assertEquals(1729.6775F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(408, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(408, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(408, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      
      String string0 = coreFunction1.getFunctionName();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction408()", string0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(408, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(string0);
      
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 mod org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(2048, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(2048, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[0];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Step step1 = new Step(0, nodeTypeTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray2.length);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(0, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Expression[] expressionArray3 = new Expression[0];
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      
      Step step2 = new Step(1439, nodeTypeTest0, expressionArray3);
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(0, expressionArray3.length);
      assertEquals(1439, step2.getAxis());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(0, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(namespaceContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, basicNodeSet0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(nodeSetContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) nodeSetContext0;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) namespaceContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) namespaceContext0;
      evalContextArray0[7] = (EvalContext) namespaceContext0;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(2048, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(2048, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[0];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Step step1 = new Step(0, nodeTypeTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray2.length);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(0, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Expression[] expressionArray3 = new Expression[0];
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      
      Step step2 = new Step(1439, nodeTypeTest0, expressionArray3);
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray3.length);
      assertEquals(1439, step2.getAxis());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(0, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(namespaceContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, basicNodeSet0);
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(nodeSetContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) nodeSetContext0;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) namespaceContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) namespaceContext0;
      evalContextArray0[7] = (EvalContext) namespaceContext0;
      evalContextArray0[8] = (EvalContext) nodeSetContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      assertEquals(9, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(unionContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, nodeTypeTest0, false);
      assertEquals(9, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(precedingOrFollowingContext0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(precedingOrFollowingContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(0, expressionArray1.length);
      assertEquals(9, evalContextArray0.length);
      assertEquals(3, stepArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray3);
      assertNotSame(expressionArray1, expressionArray2);
      assertNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(, (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Float float0 = new Float((float) 662);
      assertEquals(662.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationAnd0);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMultiply1);
      
      expressionArray0[5] = (Expression) coreOperationMultiply1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationSubtract0, coreOperationMultiply1);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(9, expressionArray0.length);
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(nameAttributeTest1);
      
      expressionArray0[7] = (Expression) nameAttributeTest1;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2998));
      assertEquals((-2998), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(203, nodeTypeTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2998), nodeTypeTest0.getNodeType());
      assertEquals(203, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(203, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals((-2998), nodeTypeTest0.getNodeType());
      assertEquals(203, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1071, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals((-2998), nodeTypeTest0.getNodeType());
      assertEquals(1071, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2998), nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(9, expressionArray0.length);
      assertEquals((-2998), nodeTypeTest0.getNodeType());
      assertEquals((-2998), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(1245, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals((-2998), nodeTypeTest0.getNodeType());
      assertEquals(1245, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(662, nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertEquals(9, expressionArray0.length);
      assertEquals((-2998), nodeTypeTest0.getNodeType());
      assertEquals(662, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(6, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[8] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(662, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(662, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("LPWn`S]YQnS[U!NcEsf");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationGreaterThan0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = (CoreOperationGreaterThan)coreFunction0.getArg1();
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertSame(coreOperationGreaterThan1, coreOperationGreaterThan0);
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan1;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[3], expressionArray0[1]);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(8, expressionArray0.length);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[4] = (Expression) coreOperationEqual1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, constant0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan(expressionArray0[0], extensionFunction0);
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan1));
      assertEquals(8, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan2.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(coreOperationGreaterThan2);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan2, expressionArray0[3]);
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan1));
      assertEquals(8, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan2.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2137), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer((-2137));
      assertEquals((-2137), (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction1 = new CoreFunction(1779, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(1779, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("()", "()");
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("():()", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("():()", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("():()", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = new InitialContext(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("():()", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("()");
      assertEquals("()", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(initialContext0, true, processingInstructionTest0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("():()", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("()", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(descendantContext0);
      
      Boolean boolean1 = (Boolean)coreFunction0.functionFalse(descendantContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("():()", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("()", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotSame(coreFunction0, coreFunction1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '():()'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("", "JXPath: found system property");
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":JXPath: found system property", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":JXPath: found system property", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":JXPath: found system property", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":JXPath: found system property", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNull(object0);
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":JXPath: found system property", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) attributeContext0);
      assertEquals("", qName0.getPrefix());
      assertEquals("JXPath: found system property", qName0.getName());
      assertEquals(":JXPath: found system property", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":JXPath: found system property", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.Constant", "oK`dL'L}68oH;/H-gq");
      assertEquals("org.apache.commons.jxpath.ri.compiler.Constant", qName0.getPrefix());
      assertEquals("oK`dL'L}68oH;/H-gq", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Constant:oK`dL'L}68oH;/H-gq", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Constant", qName0.getPrefix());
      assertEquals("oK`dL'L}68oH;/H-gq", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Constant:oK`dL'L}68oH;/H-gq", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      assertEquals(9, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, expressionArray0[2]);
      assertEquals(9, expressionArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Constant", qName0.getPrefix());
      assertEquals("oK`dL'L}68oH;/H-gq", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Constant:oK`dL'L}68oH;/H-gq", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      Float float0 = new Float((double) 9);
      assertEquals(9.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[6] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      Constant constant1 = new Constant("B%l!?H");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("boolean");
      assertEquals("boolean", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("boolean", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals("boolean", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2675), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals((-2675), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals((-2675), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(expression0, extensionFunction0);
      assertNotNull(expression0);
      
      expressionArray0[1] = expression0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals("boolean", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Double double0 = new Double(269);
      assertEquals(269.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[3] = (Expression) constant0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(extensionFunction1.equals((Object)expression0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("boolean", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertNotNull(extensionFunction1);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction1, expressionArray1[0]);
      assertFalse(extensionFunction1.equals((Object)expression0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("boolean", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      Expression expression1 = coreFunction0.getArg2();
      assertFalse(expression1.equals((Object)extensionFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertTrue(expression1.computeContextDependent());
      assertEquals((-2675), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotSame(expression1, extensionFunction1);
      assertSame(expression1, extensionFunction0);
      assertSame(expression1, expression0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotNull(expression1);
      
      expressionArray0[5] = expression1;
      CoreFunction coreFunction1 = new CoreFunction(269, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-3395), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals((-3395), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreOperationGreaterThan0.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(6, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals("boolean", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(extensionFunction0, expression0);
      assertSame(extensionFunction0, expression1);
      assertNotSame(extensionFunction0, extensionFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("TtF/6(QSL&EnQwFh B");
      assertEquals("TtF/6(QSL&EnQwFh B", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(19, processingInstructionTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("TtF/6(QSL&EnQwFh B", processingInstructionTest0.getTarget());
      assertEquals(19, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("TtF/6(QSL&EnQwFh B", processingInstructionTest0.getTarget());
      assertEquals(32, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("TtF/6(QSL&EnQwFh B", processingInstructionTest0.getTarget());
      assertEquals(0, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-955), processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("TtF/6(QSL&EnQwFh B", processingInstructionTest0.getTarget());
      assertEquals((-955), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      QName qName0 = new QName("TtF/6(QSL&EnQwFh B", "TtF/6(QSL&EnQwFh B");
      assertEquals("TtF/6(QSL&EnQwFh B", qName0.getName());
      assertEquals("TtF/6(QSL&EnQwFh B:TtF/6(QSL&EnQwFh B", qName0.toString());
      assertEquals("TtF/6(QSL&EnQwFh B", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("TtF/6(QSL&EnQwFh B", qName0.getName());
      assertEquals("TtF/6(QSL&EnQwFh B:TtF/6(QSL&EnQwFh B", qName0.toString());
      assertEquals("TtF/6(QSL&EnQwFh B", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-955), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-955), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals("TtF/6(QSL&EnQwFh B", processingInstructionTest0.getTarget());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.functionFloor(selfContext0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeTypeTest0);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction0.functionLast(predicateContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0.0, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 261;
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      assertEquals(0, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      String string0 = "";
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "", beanPointer0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      Boolean boolean0 = (Boolean)coreOperationGreaterThanOrEqual0.computeValue(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(83, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(83, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(expressionPath0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) expressionPath0;
      expressionArray1[3] = (Expression) expressionPath0;
      expressionArray1[4] = (Expression) nameAttributeTest0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationAnd0, expressionArray0, (Step[]) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(expressionPath1);
      
      expressionArray1[6] = (Expression) expressionPath1;
      boolean boolean0 = expressionPath0.areBasicPredicates(expressionArray1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertFalse(boolean0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionPath0, expressionPath1);
      assertNotSame(expressionArray1, expressionArray0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, nameAttributeTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      coreOperationLessThan0.args = expressionArray0;
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(91, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(30, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("()", "()");
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("():()", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(269, nodeNameTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("():()", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(269, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2596, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("():()", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2596, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], locationPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, expressionArray0[3]);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(421, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(421, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2596, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertEquals(2596, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(2596, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(6, expressionArray0.length);
      assertEquals(2596, coreFunction2.getFunctionCode());
      assertEquals(6, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(6, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(2596, coreFunction2.getFunctionCode());
      assertEquals(6, coreFunction2.getArgumentCount());
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      
      String string0 = coreFunction1.getFunctionName();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals(6, expressionArray0.length);
      assertEquals("unknownFunction2596()", string0);
      assertEquals(2596, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotNull(string0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i5&uEe,ac-#u36;j");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(269, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(269, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction269()", string0);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(string0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction269()");
      assertEquals("unknownFunction269()", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, processingInstructionTest0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("unknownFunction269()", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, processingInstructionTest0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("unknownFunction269()", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      Object object0 = coreFunction1.functionBoolean(ancestorContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(1, expressionArray1.length);
      assertEquals(false, object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("unknownFunction269()", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionCount((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(269, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("u");
      assertEquals("u", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertEquals("u", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.functionFalse(precedingOrFollowingContext0);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(0, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("u", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(object0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, processingInstructionTest0);
      assertEquals("u", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      boolean boolean1 = namespaceContext0.nextNode();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("u", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getPosition());
      
      Object object1 = coreFunction0.functionLast(namespaceContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0.0, object1);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("u", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getPosition());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(269, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction269()", string0);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = coreFunction1.functionLocalName((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object0);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionSum((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object1);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      
      Object object2 = coreFunction1.functionCount((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object2.equals((Object)object1));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object2);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NaN");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, (Expression) null);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("NaN");
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(16, nodeNameTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals(16, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-271), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals((-271), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(16, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals(16, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      expressionArray1[2] = (Expression) coreOperationMod0;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      expressionArray1[5] = (Expression) coreOperationSubtract0;
      Step step3 = new Step((-2740), nodeNameTest0, expressionArray1);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals((-2740), step3.getAxis());
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(16, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals(9, expressionArray0.length);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals(16, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Expression[] expressionArray2 = new Expression[7];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationMod0;
      expressionArray2[1] = (Expression) coreOperationGreaterThan0;
      expressionArray2[2] = (Expression) coreOperationGreaterThan0;
      expressionArray2[3] = null;
      expressionArray2[4] = (Expression) coreOperationGreaterThan0;
      expressionArray2[5] = null;
      expressionArray2[6] = (Expression) coreOperationGreaterThan0;
      Step step5 = new Step(445, nodeNameTest0, expressionArray2);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(7, expressionArray2.length);
      assertEquals(445, step5.getAxis());
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-859), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertEquals(9, expressionArray0.length);
      assertEquals((-859), step6.getAxis());
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-2740), nodeNameTest0, expressionArray1);
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals((-2740), step7.getAxis());
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(9, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[1], expressionArray2[5]);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray2.length);
      assertEquals(6, expressionArray1.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray2[6], expressionPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(9, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals(7, expressionArray2.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[4], expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationMod0, coreOperationDivide0);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      expressionArray0[4] = (Expression) coreOperationDivide1;
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[5] = (Expression) constant0;
      Constant constant1 = new Constant("NaN");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[6] = (Expression) constant1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[4], constant0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[8] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-271), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeNameTest0);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, true, nodeNameTest0);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeNameTest0);
      assertEquals("NaN", qName0.getName());
      assertEquals("NaN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("NaN", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      coreFunction0.functionLast(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-473), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-473), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-473), coreFunction0.getFunctionCode());
      assertNull(expression0);
      
      expressionArray0[1] = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-473), coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationAdd1);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationLessThanOrEqual0, coreOperationNotEqual0);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("{r_G:}k");
      assertEquals("{r_G:}k", qName0.toString());
      assertEquals("{r_G", qName0.getPrefix());
      assertEquals("}k", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "{r_G:}k");
      assertEquals("{r_G:}k", qName0.toString());
      assertEquals("{r_G", qName0.getPrefix());
      assertEquals("}k", qName0.getName());
      assertEquals("{r_G:}k", nodeNameTest0.toString());
      assertEquals("{r_G:}k", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-918), nodeNameTest0, (Expression[]) null);
      assertEquals("{r_G:}k", qName0.toString());
      assertEquals("{r_G", qName0.getPrefix());
      assertEquals("}k", qName0.getName());
      assertEquals("{r_G:}k", nodeNameTest0.toString());
      assertEquals("{r_G:}k", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-918), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-918), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("{r_G:}k", qName0.toString());
      assertEquals("{r_G", qName0.getPrefix());
      assertEquals("}k", qName0.getName());
      assertEquals("{r_G:}k", nodeNameTest0.toString());
      assertEquals("{r_G:}k", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-918), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2393, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals("{r_G:}k", qName0.toString());
      assertEquals("{r_G", qName0.getPrefix());
      assertEquals("}k", qName0.getName());
      assertEquals("{r_G:}k", nodeNameTest0.toString());
      assertEquals("{r_G:}k", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2393, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant1 = new Constant("{r_G:}k");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[1] = (Expression) constant1;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("{r_G:}k", qName0.toString());
      assertEquals("{r_G", qName0.getPrefix());
      assertEquals("}k", qName0.getName());
      assertNotNull(variableReference0);
      
      expressionArray0[2] = (Expression) variableReference0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, expressionArray0[1]);
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(6, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2393, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(2393, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("v^S1whSXr53k", "v^S1whSXr53k");
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", qName0.toString());
      assertEquals("v^S1whSXr53k", qName0.getPrefix());
      assertEquals("v^S1whSXr53k", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", qName0.toString());
      assertEquals("v^S1whSXr53k", qName0.getPrefix());
      assertEquals("v^S1whSXr53k", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", qName0.toString());
      assertEquals("v^S1whSXr53k", qName0.getPrefix());
      assertEquals("v^S1whSXr53k", qName0.getName());
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, true, true);
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", qName0.toString());
      assertEquals("v^S1whSXr53k", qName0.getPrefix());
      assertEquals("v^S1whSXr53k", qName0.getName());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      List list0 = basicNodeSet0.getNodes();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", qName0.toString());
      assertEquals("v^S1whSXr53k", qName0.getPrefix());
      assertEquals("v^S1whSXr53k", qName0.getName());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeNameTest0);
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", qName0.toString());
      assertEquals("v^S1whSXr53k", qName0.getPrefix());
      assertEquals("v^S1whSXr53k", qName0.getName());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("v^S1whSXr53k:v^S1whSXr53k", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.functionFloor(selfContext0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationOr0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("4Wl");
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(399, nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals(399, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(21, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals(21, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2802), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals((-2802), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(21, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(4, expressionArray0.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals(21, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("4Wl");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      Step step4 = new Step(256, nodeNameTest0, expressionArray1);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals(256, step4.getAxis());
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(18, nodeNameTest0, expressionArray1);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals(18, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(312, nodeNameTest0, expressionArray1);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals(312, step6.getAxis());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(399, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertEquals(399, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(4, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeNameTest0);
      assertEquals(4, evalContextArray0.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(selfContext0, basicNodeSet0);
      assertEquals(4, evalContextArray0.length);
      assertEquals("4Wl", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("4Wl", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4Wl", nodeNameTest0.toString());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      // Undeclared exception!
      coreFunction0.functionCount(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(508, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(508, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(30, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Double double0 = Double.valueOf((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationGreaterThan0);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(9, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[0], expressionArray0[1]);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(9, expressionArray0.length);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, expressionArray0[3]);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(9, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotNull(variableReference0);
      
      expressionArray0[5] = (Expression) variableReference0;
      Constant constant2 = new Constant("Root element not set");
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertNotNull(constant2);
      
      expressionArray0[6] = (Expression) constant2;
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(coreOperationEqual1, expressionArray0[4]);
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual1));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual0));
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(9, expressionArray0.length);
      assertEquals("=", coreOperationEqual2.getSymbol());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual2);
      
      expressionArray0[7] = (Expression) coreOperationEqual2;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationEqual1, expressionArray0[4]);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual2));
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(9, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[8] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction((-3176), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-3176), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2137), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer((-2137));
      assertEquals((-2137), (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName(";FU(^5Dx{U7/");
      assertNull(qName0.getPrefix());
      assertEquals(";FU(^5Dx{U7/", qName0.getName());
      assertEquals(";FU(^5Dx{U7/", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, integer0, locale0);
      assertNull(qName0.getPrefix());
      assertEquals(";FU(^5Dx{U7/", qName0.getName());
      assertEquals(";FU(^5Dx{U7/", qName0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals(";FU(^5Dx{U7/", qName0.getName());
      assertEquals(";FU(^5Dx{U7/", qName0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      Object object0 = coreFunction0.computeValue(rootContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals(";FU(^5Dx{U7/", qName0.getName());
      assertEquals(";FU(^5Dx{U7/", qName0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("KbO(ILLZ/Yzrez");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("KbO(ILLZ/Yzrez");
      assertEquals("KbO(ILLZ/Yzrez", qName0.getName());
      assertEquals("KbO(ILLZ/Yzrez", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("KbO(ILLZ/Yzrez", qName0.getName());
      assertEquals("KbO(ILLZ/Yzrez", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg2();
      assertEquals(7, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      assertNotNull(coreOperationMultiply1);
      
      expressionArray0[6] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(4, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("#'H:CzZL1-Z?K_");
      assertEquals("#'H", qName0.getPrefix());
      assertEquals("#'H:CzZL1-Z?K_", qName0.toString());
      assertEquals("CzZL1-Z?K_", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "#'H:CzZL1-Z?K_");
      assertEquals("#'H", qName0.getPrefix());
      assertEquals("#'H:CzZL1-Z?K_", qName0.toString());
      assertEquals("CzZL1-Z?K_", qName0.getName());
      assertEquals("#'H:CzZL1-Z?K_", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("#'H:CzZL1-Z?K_", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(8, nodeNameTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("#'H", qName0.getPrefix());
      assertEquals("#'H:CzZL1-Z?K_", qName0.toString());
      assertEquals("CzZL1-Z?K_", qName0.getName());
      assertEquals("#'H:CzZL1-Z?K_", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("#'H:CzZL1-Z?K_", nodeNameTest0.getNamespaceURI());
      assertEquals(8, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      boolean boolean0 = true;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[1]);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(9, expressionArray0.length);
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMultiply1);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], coreOperationMultiply1);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(9, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      
      expressionArray0[7] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertSame(expression0, expressionPath0);
      assertNotNull(expression0);
      
      expressionArray0[8] = expression0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd0));
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd2.getSymbol());
      assertNotNull(coreOperationAdd2);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("K[");
      assertEquals("K[", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("K[", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('K[')", string0);
      assertEquals("K[", processingInstructionTest0.getTarget());
      assertNotNull(string0);
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      assertEquals(2, evalContextArray0.length);
      assertEquals("K[", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, processingInstructionTest0);
      assertEquals(2, evalContextArray0.length);
      assertEquals("K[", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      coreFunction0.functionContains(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Float float0 = new Float((float) (-2152));
      assertEquals((-2152.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-2152), nodeTypeTest0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals((-2152), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1394, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(8, expressionArray0.length);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(1394, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2152), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(8, expressionArray0.length);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals((-2152), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, expressionArray0[2]);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, expressionArray0[3]);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(locationPath0, coreOperationGreaterThan0);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[6], expressionArray0[1]);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(8, expressionArray0.length);
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMultiply1);
      
      expressionArray0[7] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction0 = new CoreFunction((-2152), expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals((-2152), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply2 = (CoreOperationMultiply)coreFunction0.getArg1();
      assertFalse(coreOperationMultiply2.equals((Object)coreOperationMultiply1));
      assertEquals(8, expressionArray0.length);
      assertEquals((-2152), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply2.getSymbol());
      assertNotSame(coreOperationMultiply2, coreOperationMultiply1);
      assertSame(coreOperationMultiply2, coreOperationMultiply0);
      assertNotNull(coreOperationMultiply2);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("]");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      SelfContext selfContext0 = new SelfContext(attributeContext0, nodeTypeTest0);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      Object object0 = coreFunction0.functionNot(selfContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(object0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(string0);
      
      QName qName0 = new QName("]");
      assertEquals("]", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("]", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("]", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext1 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertFalse(attributeContext1.equals((Object)attributeContext0));
      assertEquals("]", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("]", nodeNameTest0.toString());
      assertFalse(attributeContext1.isChildOrderingRequired());
      assertEquals(0, attributeContext1.getPosition());
      assertEquals(0, attributeContext1.getDocumentOrder());
      assertNotNull(attributeContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(attributeContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = (-3270);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-3270), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-3270), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-98), (byte)3}, byteArray0);
      
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean1);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationAdd0;
      expressionArray2[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(2, expressionArray2.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(2, expressionArray2.length);
      assertEquals("", object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, expressionArray2.length);
      assertEquals("00", object1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertNotNull(object1);
      
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("]{)BSiXW*}v");
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "]{)BSiXW*}v");
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(12, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(2, expressionArray0.length);
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(12, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(12, nodeNameTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(0, expressionArray1.length);
      assertEquals(12, step1.getAxis());
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1064, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray1.length);
      assertEquals(1064, step2.getAxis());
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step2);
      
      stepArray0[2] = step1;
      Step step3 = new Step(2244, nodeNameTest0, expressionArray2);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(2, expressionArray2.length);
      assertEquals(2244, step3.getAxis());
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(12, nodeNameTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertEquals(2, expressionArray2.length);
      assertEquals(12, step4.getAxis());
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(2244, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertEquals(0, expressionArray1.length);
      assertEquals(2244, step5.getAxis());
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals(0, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 12, nodeNameTest0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals(0, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals("]{)BSiXW*}v", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]{)BSiXW*}v", qName0.getName());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.toString());
      assertEquals("]{)BSiXW*}v", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(coreOperationAdd0, coreOperationAdd1);
      assertNotNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(, )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("NaN");
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      assertEquals(2, evalContextArray0.length);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, processingInstructionTest0);
      assertEquals(2, evalContextArray0.length);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      Object object0 = coreFunction0.functionContains(attributeContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, evalContextArray0.length);
      assertEquals(false, object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationNotEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-802), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-802), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-802), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-88));
      assertEquals((byte) (-88), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "P~yYA/G$x[\n);G_");
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "v:e");
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertEquals("v:e", nodeNameTest0.getNamespaceURI());
      assertEquals(":P~yYA/G$x[\n);G_", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      assertEquals(25, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(25, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, false, nodeTypeTest0);
      assertEquals(25, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      QName qName1 = new QName("v:e", "Sp");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("v:e", qName1.getPrefix());
      assertEquals("Sp", qName1.getName());
      assertEquals("v:e:Sp", qName1.toString());
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "");
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("v:e", qName1.getPrefix());
      assertEquals("Sp", qName1.getName());
      assertEquals("v:e:Sp", qName1.toString());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("v:e:Sp", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(nodeNameTest1);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertEquals("v:e", nodeNameTest0.getNamespaceURI());
      assertEquals(":P~yYA/G$x[\n);G_", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, expressionArray0.length);
      assertEquals("floor(null)", string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(string0);
      
      String string1 = coreFunction0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, expressionArray0.length);
      assertEquals("floor(null)", string1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(string1);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(-88, floor(null))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object1);
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(string0.equals((Object)object1));
      assertFalse(string0.equals((Object)object0));
      assertEquals(2, expressionArray0.length);
      assertEquals("substring-before", string0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(, (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(269, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(269, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionFloor((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(269, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(2125, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2125, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2125, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2125, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreFunction0, expressionArray0[0]);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2125, coreFunction0.getFunctionCode());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertNotNull(coreOperationMod1);
      
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreFunction coreFunction1 = new CoreFunction(2125, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertEquals(2125, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      expressionArray0[5] = (Expression) coreFunction1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction2 = (CoreFunction)coreFunction0.getArg1();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2125, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction2.getArgumentCount());
      assertEquals(2125, coreFunction2.getFunctionCode());
      assertSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotNull(coreFunction2);
      
      expressionArray0[7] = (Expression) coreFunction2;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod1, coreOperationMod0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreOperationMod0.equals((Object)coreOperationMod1));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2125, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction3 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction3.getArgumentCount());
      assertEquals(13, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertEquals(2125, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction3.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(0, expressionArray0.length);
      assertEquals("number", string0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Yum%SJ#Xqa+p,*Z,");
      assertEquals("Yum%SJ#Xqa+p,*Z,", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertEquals("Yum%SJ#Xqa+p,*Z,", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3289), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-3289), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3289()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1260), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object1);
      
      Object object2 = coreFunction1.compute((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(true, object2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-3631), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3631), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory");
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3631), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals((-3631), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionRound((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object0);
      assertEquals((-3631), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3631), coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3631()(unknownFunction-3631()(null))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray1.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(88, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, (NodeTest) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = coreFunction0.functionStartsWith(descendantContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstringAfter(predicateContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("NaN");
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(82, processingInstructionTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals(82, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(122, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals(122, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(82, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals(82, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(66, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals(66, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(82, processingInstructionTest0, (Expression[]) null);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals(82, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(122, (NodeTest) null, (Expression[]) null);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertEquals(122, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(82, processingInstructionTest0, (Expression[]) null);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertEquals(82, step6.getAxis());
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(7, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      QName qName0 = new QName("NaN0", "0");
      assertEquals("NaN0:0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("NaN0:0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[2] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals("NaN0:0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray0[3]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step4);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step5));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step6));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals(82, step4.getAxis());
      assertNotSame(step4, step3);
      assertNotSame(step4, step5);
      assertNotSame(step4, step0);
      assertNotSame(step4, step1);
      assertNotSame(step4, step2);
      assertNotSame(step4, step6);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step5));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step6));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals(82, step4.getAxis());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step4, step3);
      assertNotSame(step4, step5);
      assertNotSame(step4, step0);
      assertNotSame(step4, step1);
      assertNotSame(step4, step2);
      assertNotSame(step4, step6);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step1, locale0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("NaN0:0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(122, step1.getAxis());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(step1, step2);
      assertNotSame(step1, step4);
      assertNotSame(step1, step6);
      assertNotSame(step1, step3);
      assertNotSame(step1, step5);
      assertNotSame(step1, step0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, expressionArray0[5], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step5));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step6));
      assertEquals(6, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("NaN0:0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(122, step1.getAxis());
      assertEquals(82, step4.getAxis());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step5));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step6));
      assertEquals(6, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("NaN0:0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(122, step1.getAxis());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(82, step4.getAxis());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, (NodeTest) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step5));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step6));
      assertEquals(6, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("NaN", processingInstructionTest0.getTarget());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("NaN0:0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(122, step1.getAxis());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(82, step4.getAxis());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(object1);
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2137), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer((-2137));
      assertEquals((-2137), (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName(";FJU(^5Dx{Uz7/", ";FJU(^5Dx{Uz7/");
      assertEquals(";FJU(^5Dx{Uz7/:;FJU(^5Dx{Uz7/", qName0.toString());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getPrefix());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, integer0, locale0);
      assertEquals(";FJU(^5Dx{Uz7/:;FJU(^5Dx{Uz7/", qName0.toString());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getPrefix());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(";FJU(^5Dx{Uz7/:;FJU(^5Dx{Uz7/", qName0.toString());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getPrefix());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(";FJU(^5Dx{Uz7/:;FJU(^5Dx{Uz7/", qName0.toString());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getPrefix());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(";FJU(^5Dx{Uz7/:;FJU(^5Dx{Uz7/", qName0.toString());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getPrefix());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals("", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2137), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(";FJU(^5Dx{Uz7/:;FJU(^5Dx{Uz7/", qName0.toString());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getPrefix());
      assertEquals(";FJU(^5Dx{Uz7/", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, expressionArray0.length);
      assertEquals("0NaN", object1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(, (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Object object0 = coreFunction0.functionFalse((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(269, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction1.functionNot((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, expressionArray1.length);
      assertEquals(true, object1);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      
      Object object2 = coreFunction1.functionName((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object2);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
      
      Object object3 = coreFunction1.functionNamespaceURI((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object3);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1260), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction1.functionStartsWith((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(true, object1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object2 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray1[0], expressionArray1[0]);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray1[2] = (Expression) coreOperationGreaterThan1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan(expressionArray0[3], expressionArray0[2]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan1));
      assertEquals(9, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan2.getSymbol());
      assertNotNull(coreOperationGreaterThan2);
      
      expressionArray0[7] = (Expression) coreOperationGreaterThan2;
      CoreOperationGreaterThan coreOperationGreaterThan3 = new CoreOperationGreaterThan(expressionArray0[6], coreOperationNegate0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationGreaterThan3.equals((Object)coreOperationGreaterThan2));
      assertFalse(coreOperationGreaterThan3.equals((Object)coreOperationGreaterThan1));
      assertFalse(coreOperationGreaterThan3.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan1));
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan2));
      assertEquals(9, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan3.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationGreaterThan3);
      
      expressionArray0[8] = (Expression) coreOperationGreaterThan3;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray1.length);
      assertEquals(88, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, (NodeTest) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      Object object0 = coreFunction1.compute(predicateContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(88, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object0);
      
      Object object1 = coreFunction0.compute(predicateContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("`2:h&vKgCd:aO");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationGreaterThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-2464), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-2464), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("`2:h&vKgCd:aO");
      assertEquals("`2", qName0.getPrefix());
      assertEquals("h&vKgCd:aO", qName0.getName());
      assertEquals("`2:h&vKgCd:aO", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "0");
      assertEquals("`2", qName0.getPrefix());
      assertEquals("h&vKgCd:aO", qName0.getName());
      assertEquals("`2:h&vKgCd:aO", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("0", nodeNameTest0.getNamespaceURI());
      assertEquals("`2:h&vKgCd:aO", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("`2", qName0.getPrefix());
      assertEquals("h&vKgCd:aO", qName0.getName());
      assertEquals("`2:h&vKgCd:aO", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("0", nodeNameTest0.getNamespaceURI());
      assertEquals("`2:h&vKgCd:aO", nodeNameTest0.toString());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.functionNot(selfContext0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(269, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction269()", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(269, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(string0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("sum");
      assertEquals("sum", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Object object0 = coreFunction1.functionLocalName((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object0);
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1260), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals((-1260), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object1);
      
      Object object2 = coreFunction1.compute((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals("", object2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = 15;
      CoreFunction coreFunction1 = new CoreFunction((-472), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-472), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(12, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(269, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(269, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(269, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction269()", string0);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(string0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("sum");
      assertEquals("sum", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertEquals("sum", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction1.functionNormalizeSpace(precedingOrFollowingContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(269, coreFunction1.getFunctionCode());
      assertEquals("sum", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2112), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2112), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1474), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1474), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3879, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray1.length);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(3879, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(20, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(20, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(20, coreFunction2.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("|>@,P`|", "3@5(z21-!");
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null, (Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((Variables) null).when(jXPathContextReferenceImpl0).getVariables();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName1 = new QName("unknownFunction", "wy'_5");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("wy'_5", qName1.getName());
      assertNotNull(qName1);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("unknownFunction");
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertNotNull(decimalFormat0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, decimalFormat0, (Locale) null);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeNameTest0, true);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(precedingOrFollowingContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, precedingOrFollowingContext0, beanPointer0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertEquals("unknownFunction", qName1.getPrefix());
      assertEquals("unknownFunction:wy'_5", qName1.toString());
      assertEquals("wy'_5", qName1.getName());
      assertEquals("unknownFunction#", decimalFormat0.toPattern());
      assertEquals("-unknownFunction", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("unknownFunction#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("unknownFunction", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2112), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2112), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      QName qName0 = new QName("7b{rLmH_=i;D#RWMb7");
      assertNull(qName0.getPrefix());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.getName());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.getName());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.toString());
      assertEquals("7b{rLmH_=i;D#RWMb7", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.getName());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.toString());
      assertEquals("7b{rLmH_=i;D#RWMb7", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1860));
      assertEquals((-1860), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, nodeTypeTest0);
      assertNull(qName0.getPrefix());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.getName());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.toString());
      assertEquals("7b{rLmH_=i;D#RWMb7", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals((-1860), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      Object object0 = coreFunction0.functionLast(descendantContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0.0, object0);
      assertEquals((-2112), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.getName());
      assertEquals("7b{rLmH_=i;D#RWMb7", qName0.toString());
      assertEquals("7b{rLmH_=i;D#RWMb7", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals((-1860), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-23), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-23), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-23), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-23), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object0);
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-23), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object1);
      
      Object object2 = coreFunction1.compute((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-23), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object2);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray1.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(88, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, (NodeTest) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("NaN", (String) null);
      assertNull(qName0.getName());
      assertEquals("NaN:null", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getName());
      assertEquals("NaN:null", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.getName());
      assertEquals("NaN:null", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("NaN:null", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      assertNull(qName0.getName());
      assertEquals("NaN:null", qName0.toString());
      assertEquals("NaN", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("NaN:null", nodeNameTest0.toString());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      coreFunction0.functionLang(childContext0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("|>@,P`|", "35(z21-!");
      assertEquals("35(z21-!", qName0.getName());
      assertEquals("|>@,P`|:35(z21-!", qName0.toString());
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("35(z21-!", qName0.getName());
      assertEquals("|>@,P`|:35(z21-!", qName0.toString());
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2005);
      assertEquals(2005, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(8, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(2005, nodeTypeTest0.getNodeType());
      assertEquals(8, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2005, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2005, nodeTypeTest0.getNodeType());
      assertEquals(2005, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, variableReference0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("35(z21-!", qName0.getName());
      assertEquals("|>@,P`|:35(z21-!", qName0.toString());
      assertEquals("|>@,P`|", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray2[0] = (Expression) coreOperationSubtract0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) coreFunction0;
      Step step2 = new Step(110, nodeTypeTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3, expressionArray2.length);
      assertEquals(110, step2.getAxis());
      assertEquals(2005, nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-438), nodeTypeTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray2.length);
      assertEquals((-438), step3.getAxis());
      assertEquals(2005, nodeTypeTest0.getNodeType());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray0, expressionArray2);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string($|>@,P`|:35(z21-!, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("C@K.Z9p?x(fMk{");
      assertEquals("C@K.Z9p?x(fMk{", qName0.getName());
      assertEquals("C@K.Z9p?x(fMk{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("C@K.Z9p?x(fMk{", qName0.getName());
      assertEquals("C@K.Z9p?x(fMk{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      assertEquals("C@K.Z9p?x(fMk{", qName0.getName());
      assertEquals("C@K.Z9p?x(fMk{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("C@K.Z9p?x(fMk{", qName0.getName());
      assertEquals("C@K.Z9p?x(fMk{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals("C@K.Z9p?x(fMk{", qName0.getName());
      assertEquals("C@K.Z9p?x(fMk{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[2]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray1[3] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("%}E})?101e51J&");
      assertEquals("%}E})?101e51J&", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(563, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals("%}E})?101e51J&", processingInstructionTest0.getTarget());
      assertEquals(563, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(563, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(563, step1.getAxis());
      assertEquals("%}E})?101e51J&", processingInstructionTest0.getTarget());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      assertEquals("C@K.Z9p?x(fMk{", qName0.getName());
      assertEquals("C@K.Z9p?x(fMk{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray1[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(563, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(563, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual1 = (CoreOperationEqual)coreFunction0.getArg2();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(563, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(coreOperationEqual1, coreOperationEqual0);
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[2] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean2 = coreFunction1.computeContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, expressionArray1.length);
      assertTrue(boolean2);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreFunction coreFunction2 = new CoreFunction((-3213), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-3213), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean3 = coreFunction1.isContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(1, expressionArray1.length);
      assertTrue(boolean3);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction2.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("local-name");
      assertNull(qName0.getPrefix());
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNull(qName0.getPrefix());
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.toString());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertNotNull(variableReference1);
      
      expressionArray0[1] = (Expression) variableReference1;
      Long long0 = new Long(28);
      assertEquals(28L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[1]);
      assertEquals(4, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("c'%9EJNB,Ft0})");
      assertEquals("c'%9EJNB,Ft0})", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertEquals("c'%9EJNB,Ft0})", processingInstructionTest0.getTarget());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, processingInstructionTest0);
      assertEquals("c'%9EJNB,Ft0})", processingInstructionTest0.getTarget());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(261, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3092, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionNot((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(true, object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      
      String string0 = coreFunction1.toString();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals("unknownFunction3092()(unknownFunction261()())", string0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(string0);
      
      Object object1 = coreFunction1.functionName((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)string0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      
      coreFunction1.args = expressionArray1;
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      
      Object object2 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(261, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object2);
      
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(1752, (NodeTest) null, coreFunction1.args);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.args.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.args.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertEquals(1752, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, coreFunction1.args, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.args.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.args.length);
      assertEquals(1, stepArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 261, (NodeTest) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.args.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.args.length);
      assertEquals(1, stepArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1.args, expressionArray0);
      assertSame(coreFunction1.args, expressionArray1);
      assertNull(evalContext0);
      
      Object object3 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(261, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object3);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(261, expressionArray1);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(261, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      Object object4 = coreFunction2.functionCeiling((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object4);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(261, coreFunction2.getFunctionCode());
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotNull(object4);
      
      Object object5 = coreFunction2.compute((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(261, coreFunction2.getFunctionCode());
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNull(object5);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(261, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray1.length);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(2, expressionArray0.length);
      assertEquals("floor(null, null)", string0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(string0);
      
      String string1 = coreFunction0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, expressionArray0.length);
      assertEquals("floor(null, null)", string1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(string1);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(25, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-646), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-646), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = coreFunction0.toString();
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction-646()()", string0);
      assertEquals((-646), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      CoreFunction coreFunction1 = new CoreFunction((-646), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-646), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(24, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(24, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.isContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(24, coreFunction2.getFunctionCode());
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = true;
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray1.length);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      String string0 = coreFunction0.toString();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals("not()", string0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals("round()", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("rFEvHAN$%1a", "");
      assertEquals("rFEvHAN$%1a", qName0.getPrefix());
      assertEquals("rFEvHAN$%1a:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      QName qName1 = new QName("NaN");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("NaN", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("NaN", qName1.toString());
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertFalse(qName0.equals((Object)qName1));
      assertEquals("rFEvHAN$%1a", qName0.getPrefix());
      assertEquals("rFEvHAN$%1a:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("rFEvHAN$%1a:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Incorrect number of arguments: ");
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, true);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals("rFEvHAN$%1a", qName0.getPrefix());
      assertEquals("rFEvHAN$%1a:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("rFEvHAN$%1a:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Expression expression0 = coreFunction1.getArg2();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(expression0);
      
      expressionArray0[1] = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction1, coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, (Expression) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      expressionArray0[4] = (Expression) coreFunction2;
      CoreFunction coreFunction3 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction3.getArgumentCount());
      assertEquals(8, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      // Undeclared exception!
      try { 
        coreFunction3.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      QName qName0 = new QName("%eD*u\"O6zY:j", "y5,Zf{VMNqrI0v|v");
      assertEquals("%eD*u\"O6zY:j", qName0.getPrefix());
      assertEquals("y5,Zf{VMNqrI0v|v", qName0.getName());
      assertEquals("%eD*u\"O6zY:j:y5,Zf{VMNqrI0v|v", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("%eD*u\"O6zY:j", qName0.getPrefix());
      assertEquals("y5,Zf{VMNqrI0v|v", qName0.getName());
      assertEquals("%eD*u\"O6zY:j:y5,Zf{VMNqrI0v|v", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("%eD*u\"O6zY:j:y5,Zf{VMNqrI0v|v", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("%eD*u\"O6zY:j", qName0.getPrefix());
      assertEquals("y5,Zf{VMNqrI0v|v", qName0.getName());
      assertEquals("%eD*u\"O6zY:j:y5,Zf{VMNqrI0v|v", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("%eD*u\"O6zY:j:y5,Zf{VMNqrI0v|v", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("%eD*u\"O6zY:j", qName0.getPrefix());
      assertEquals("y5,Zf{VMNqrI0v|v", qName0.getName());
      assertEquals("%eD*u\"O6zY:j:y5,Zf{VMNqrI0v|v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      QName qName1 = new QName("kX?~53:osP2", "0\"aYW^Nua.V/B.%lTz%");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("kX?~53:osP2:0\"aYW^Nua.V/B.%lTz%", qName1.toString());
      assertEquals("kX?~53:osP2", qName1.getPrefix());
      assertEquals("0\"aYW^Nua.V/B.%lTz%", qName1.getName());
      assertNotNull(qName1);
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("kX?~53:osP2:0\"aYW^Nua.V/B.%lTz%", qName1.toString());
      assertEquals("kX?~53:osP2", qName1.getPrefix());
      assertEquals("0\"aYW^Nua.V/B.%lTz%", qName1.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(6, expressionArray0.length);
      assertEquals("%eD*u\"O6zY:j", qName0.getPrefix());
      assertEquals("y5,Zf{VMNqrI0v|v", qName0.getName());
      assertEquals("%eD*u\"O6zY:j:y5,Zf{VMNqrI0v|v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(6, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1295));
      assertEquals((-1295), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(241, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(4, expressionArray1.length);
      assertEquals((-1295), nodeTypeTest0.getNodeType());
      assertEquals(241, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertEquals(1, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray1[0] = (Expression) expressionPath0;
      Expression[] expressionArray2 = new Expression[5];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) expressionPath0;
      expressionArray2[1] = (Expression) nameAttributeTest0;
      expressionArray2[2] = (Expression) coreOperationUnion0;
      expressionArray2[3] = (Expression) expressionPath0;
      expressionArray2[4] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(5, expressionArray2.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray2[0], expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(4, expressionArray1.length);
      assertEquals(5, expressionArray2.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray1[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-832), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(4, expressionArray1.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-832), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray1.length);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.isContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray1.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(88, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, (NodeTest) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      Object object0 = coreFunction0.functionStartsWith(descendantContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(object0);
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      String string0 = coreFunction0.toString();
      assertEquals(0, expressionArray0.length);
      assertEquals("false()", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("q@Am*/gZs");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("BI&ip'");
      assertEquals("BI&ip'", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-2549), processingInstructionTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("BI&ip'", processingInstructionTest0.getTarget());
      assertEquals((-2549), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1076, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("BI&ip'", processingInstructionTest0.getTarget());
      assertEquals(1076, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-7289), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals("BI&ip'", processingInstructionTest0.getTarget());
      assertEquals((-7289), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThan1);
      
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      Constant constant1 = new Constant("BI&ip'");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2549), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-2549), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-88));
      assertEquals((byte) (-88), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "P~yYA/G$x[\n);G_");
      assertEquals("", qName0.getPrefix());
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "v:e");
      assertEquals("", qName0.getPrefix());
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertEquals("v:e", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":P~yYA/G$x[\n);G_", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, false, nodeTypeTest0);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      QName qName1 = new QName("v:e", "Sp");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("Sp", qName1.getName());
      assertEquals("v:e", qName1.getPrefix());
      assertEquals("v:e:Sp", qName1.toString());
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "");
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("Sp", qName1.getName());
      assertEquals("v:e", qName1.getPrefix());
      assertEquals("v:e:Sp", qName1.toString());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("v:e:Sp", nodeNameTest1.toString());
      assertNotNull(nodeNameTest1);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("", qName0.getPrefix());
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertEquals("v:e", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":P~yYA/G$x[\n);G_", nodeNameTest0.toString());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(2121, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2121()(null)", string0);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      String string1 = coreFunction0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2121()(null)", string1);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(string1);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Constant constant0 = new Constant("NaN0");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, constant0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      QName qName0 = new QName("Sp", "NaN");
      assertEquals("Sp", qName0.getPrefix());
      assertEquals("Sp:NaN", qName0.toString());
      assertEquals("NaN", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Sp");
      assertEquals("Sp", qName0.getPrefix());
      assertEquals("Sp:NaN", qName0.toString());
      assertEquals("NaN", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Sp:NaN", nodeNameTest0.toString());
      assertEquals("Sp", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeNameTest0);
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals("Sp", qName0.getPrefix());
      assertEquals("Sp:NaN", qName0.toString());
      assertEquals("NaN", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Sp:NaN", nodeNameTest0.toString());
      assertEquals("Sp", nodeNameTest0.getNamespaceURI());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(2121, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      String string0 = coreFunction1.toString();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals("starts-with(null, null)", string0);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(string0);
      
      String string1 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, expressionArray0.length);
      assertEquals("unknownFunction2121()(null, null)", string1);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(string1);
      
      CoreFunction coreFunction2 = new CoreFunction(2121, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2121, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-832), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-832), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction2 = new CoreFunction((-832), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray1.length);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-832), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(29, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(0, expressionArray1.length);
      assertEquals(29, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2112), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2112), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      String string0 = coreFunction1.getFunctionName();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals("name", string0);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(string0);
      
      QName qName0 = new QName("H7ER^\"8kl", "=");
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "name");
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest0, false, true);
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) selfContext0;
      evalContextArray0[1] = (EvalContext) childContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(childContext0, evalContextArray0);
      assertEquals(5, evalContextArray0.length);
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) unionContext0);
      assertEquals(5, evalContextArray0.length);
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, unionContext0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, evalContextArray0.length);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      QName qName1 = new QName("NaN");
      assertFalse(qName1.equals((Object)qName0));
      assertNull(qName1.getPrefix());
      assertEquals("NaN", qName1.toString());
      assertEquals("NaN", qName1.getName());
      assertNotNull(qName1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName1, qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(qName1.getPrefix());
      assertEquals("NaN", qName1.toString());
      assertEquals("NaN", qName1.getName());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertNotSame(qName1, qName0);
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(5, evalContextArray0.length);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(qName1.getPrefix());
      assertEquals("NaN", qName1.toString());
      assertEquals("NaN", qName1.getName());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(unionContext0, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(0, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      assertEquals((-2112), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction0.computeValue(unionContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(0, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      assertEquals((-2112), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("H7ER^\"8kl", qName0.getPrefix());
      assertEquals("H7ER^\"8kl:=", qName0.toString());
      assertEquals("=", qName0.getName());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertEquals("H7ER^\"8kl:=", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(qName0, qName1);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute(evalContextArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-88));
      assertEquals((byte) (-88), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("", "P~yYA/G$x[\n);G_");
      assertEquals("", qName0.getPrefix());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "v:e");
      assertEquals("", qName0.getPrefix());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("v:e", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":P~yYA/G$x[\n);G_", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, false, nodeTypeTest0);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      QName qName1 = new QName("v:e", "Sp");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("v:e", qName1.getPrefix());
      assertEquals("Sp", qName1.getName());
      assertEquals("v:e:Sp", qName1.toString());
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "");
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("v:e", qName1.getPrefix());
      assertEquals("Sp", qName1.getName());
      assertEquals("v:e:Sp", qName1.toString());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("v:e:Sp", nodeNameTest1.toString());
      assertNotNull(nodeNameTest1);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("", qName0.getPrefix());
      assertEquals("P~yYA/G$x[\n);G_", qName0.getName());
      assertEquals(":P~yYA/G$x[\n);G_", qName0.toString());
      assertEquals("v:e", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":P~yYA/G$x[\n);G_", nodeNameTest0.toString());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(2121, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2121()(null)", string0);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      String string1 = coreFunction0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2121()(null)", string1);
      assertEquals(2121, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals(0, expressionArray0.length);
      assertEquals("format-number()", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("92Ln_rjv0z2~zPioB");
      assertEquals("92Ln_rjv0z2~zPioB", qName0.toString());
      assertEquals("92Ln_rjv0z2~zPioB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "92Ln_rjv0z2~zPioB");
      assertEquals("92Ln_rjv0z2~zPioB", qName0.toString());
      assertEquals("92Ln_rjv0z2~zPioB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("92Ln_rjv0z2~zPioB", qName0.toString());
      assertEquals("92Ln_rjv0z2~zPioB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.toString());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      boolean boolean1 = ancestorContext0.setPosition((-2005));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("92Ln_rjv0z2~zPioB", qName0.toString());
      assertEquals("92Ln_rjv0z2~zPioB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.toString());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionString(ancestorContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("92Ln_rjv0z2~zPioB", qName0.toString());
      assertEquals("92Ln_rjv0z2~zPioB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("92Ln_rjv0z2~zPioB", nodeNameTest0.toString());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(object0);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean2);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("NaN0", "NaN0");
      assertEquals("NaN0:NaN0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("NaN0:NaN0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, expressionArray0[3]);
      assertEquals(7, expressionArray0.length);
      assertEquals("NaN0:NaN0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("NaN0:NaN0", qName0.toString());
      assertEquals("NaN0", qName0.getPrefix());
      assertEquals("NaN0", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[4]);
      assertEquals(7, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2017);
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(5, nodeTypeTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(5, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationEqual0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      Step step1 = new Step(2017, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray1.length);
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(2017, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2017, nodeTypeTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(2017, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1873, nodeTypeTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(1873, step3.getAxis());
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(21, nodeTypeTest0, (Expression[]) null);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertEquals(21, step4.getAxis());
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(21, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(21, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(2017, nodeTypeTest0, (Expression[]) null);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(2017, step6.getAxis());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(1760);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(1760, nodeTypeTest1.getNodeType());
      assertNotNull(nodeTypeTest1);
      
      Step step7 = new Step(1873, nodeTypeTest1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertEquals(5, expressionArray1.length);
      assertEquals(1760, nodeTypeTest1.getNodeType());
      assertEquals(1873, step7.getAxis());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(expressionPath0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, nodeTypeTest0, false);
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, nodeTypeTest1);
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(1760, nodeTypeTest1.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(namespaceContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(7, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(1760, nodeTypeTest1.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(nodeTypeTest0, nodeTypeTest1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertNotNull(evalContext0);
      
      ChildContext childContext0 = new ChildContext(evalContext0, nodeTypeTest1, false, false);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(7, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2017, nodeTypeTest0.getNodeType());
      assertEquals(1760, nodeTypeTest1.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      coreFunction0.functionNumber(childContext0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(374, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(374, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction374()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(1, expressionArray0.length);
      assertEquals("round", string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(string0);
      
      QName qName0 = new QName("round", "round");
      assertEquals("round:round", qName0.toString());
      assertEquals("round", qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertNotNull(qName0);
      
      QName qName1 = new QName("or", "NaN0");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "NaN0");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertEquals("NaN0", nodeNameTest0.getNamespaceURI());
      assertEquals("or:NaN0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertEquals("NaN0", nodeNameTest0.getNamespaceURI());
      assertEquals("or:NaN0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) childContext0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertEquals("NaN0", nodeNameTest0.getNamespaceURI());
      assertEquals("or:NaN0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(qName1, qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreFunction0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertEquals("NaN0", nodeNameTest0.getNamespaceURI());
      assertEquals("or:NaN0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, predicateContext0, (Pointer) null);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertEquals("NaN0", nodeNameTest0.getNamespaceURI());
      assertEquals("or:NaN0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName1, variablePointer0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals("or:NaN0", qName1.toString());
      assertEquals("NaN0", qName1.getName());
      assertEquals("or", qName1.getPrefix());
      assertEquals("NaN0", nodeNameTest0.getNamespaceURI());
      assertEquals("or:NaN0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      PredicateContext predicateContext1 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(predicateContext1.equals((Object)predicateContext0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext1.getDocumentOrder());
      assertEquals(0, predicateContext1.getPosition());
      assertFalse(predicateContext1.isChildOrderingRequired());
      assertNotNull(predicateContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-832), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-832), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction-832()()", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-832), coreFunction0.getFunctionCode());
      assertNotNull(string0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(24, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(10, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      boolean boolean0 = coreFunction3.isContextDependent();
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(10, coreFunction3.getFunctionCode());
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals(0, expressionArray0.length);
      assertEquals("normalize-space()", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((-200.43));
      assertEquals((-200.43F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-74), (byte)6, (byte)23, (byte) (-111), (byte)26, (byte)81, (byte)10, (byte)16}, byteArray0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i[sf+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertTrue(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(261, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3092, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      String string0 = coreFunction1.toString();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals("unknownFunction3092()(unknownFunction261()())", string0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(string0);
      
      coreFunction1.args = expressionArray1;
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(7, coreFunction1.args);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(7, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      boolean boolean0 = coreFunction3.isContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(1, expressionArray1.length);
      assertFalse(boolean0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3092, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(7, coreFunction3.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(0, expressionArray0.length);
      assertEquals("ceiling", string0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      QName qName0 = new QName("ceiling", "ceiling");
      assertEquals("ceiling", qName0.getName());
      assertEquals("ceiling", qName0.getPrefix());
      assertEquals("ceiling:ceiling", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "64ApXgQSELDk9I2cY");
      assertEquals("ceiling", qName0.getName());
      assertEquals("ceiling", qName0.getPrefix());
      assertEquals("ceiling:ceiling", qName0.toString());
      assertEquals("ceiling:ceiling", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("64ApXgQSELDk9I2cY", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertEquals("ceiling", qName0.getName());
      assertEquals("ceiling", qName0.getPrefix());
      assertEquals("ceiling:ceiling", qName0.toString());
      assertEquals("ceiling:ceiling", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("64ApXgQSELDk9I2cY", nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("0", "0");
      assertEquals("0:0", qName0.toString());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("0:0", qName0.toString());
      assertEquals("0", qName0.getPrefix());
      assertEquals("0", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) namespaceContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      assertEquals(5, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      coreFunction0.functionTrue(unionContext0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Dk;23*T=32e");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "o.aYQX\"]!");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest1, false, false);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, coreOperationSubtract0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction1, expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLang(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction((-684), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray1[6] = (Expression) coreOperationNegate0;
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.getArg2();
      Double double0 = Expression.ONE;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant((Number) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      QName qName0 = new QName("H", "P~yYA/G$x[\n);G_");
      String string0 = "";
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      int int0 = 39;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(39);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 18;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      QName qName0 = new QName("", "yM$-S3) #m06");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray1[6] = (Expression) coreOperationNegate0;
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2112), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      coreFunction1.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      coreFunction1.getFunctionName();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string-length", "string-length");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string-length");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, childContext0, (Pointer) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, (Object) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction1);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("P^,Yn;Q");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      ExtensionFunction extensionFunction2 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction2;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, expressionArray0[2]);
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "POINTER: ");
      Step step0 = new Step((-879), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1796), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2039, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[7];
      Constant constant0 = new Constant("/processing-instruction('");
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) extensionFunction1;
      expressionArray1[2] = (Expression) extensionFunction2;
      expressionArray1[3] = (Expression) extensionFunction1;
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[5] = (Expression) extensionFunction2;
      expressionArray1[6] = (Expression) extensionFunction0;
      Step step3 = new Step(1872, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(2162, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2039, nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(64, nodeNameTest0, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step(1872, nodeNameTest0, expressionArray1);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray1[3], constant0);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.getFunctionName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "number");
      QName qName0 = new QName("number", "number");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: number:number
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Dk;23*T=32e");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "o.aYQX\"]!");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest1, false, false);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, coreOperationSubtract0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction1, expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(2748, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      String string0 = coreFunction0.toString();
      assertEquals("count()", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(385, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("=");
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction385()", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("gx");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "gx");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(childContext0, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      coreFunction1.getFunctionName();
      QName qName0 = new QName("string-length", "string-length");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string-length");
      QName qName1 = new QName("[__)f4/GFa", "string-length");
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Byte byte0 = new Byte((byte) (-32));
      Constant constant0 = new Constant(byte0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7g>x=Hgy");
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(-32, -32, -32, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-19), (Expression[]) null);
      coreFunction0.functionTrue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      QName qName0 = new QName("NaN", "NaN");
      CoreFunction coreFunction1 = new CoreFunction((-1706), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = 1;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("ibFV+}%=D%x-C'9");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ibFV+}%=D%x-C'9");
      Step step0 = new Step((-1902), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3458), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1902), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("0");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[6] = (Expression) extensionFunction1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-3458), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      coreFunction1.getFunctionName();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string-length", "string-length");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string-length");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("XBeanInfo");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("XBeanInfo", "XBeanInfo");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      QName qName1 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName1);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], variableReference0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("round", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreOperationNegate0;
      expressionArray1[7] = (Expression) constant0;
      Step step0 = new Step(261, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(240, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction((-1094), expressionArray0);
      int int0 = 5;
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      String string0 = "No read method";
      String string1 = "3z|\\pT8F";
      QName qName0 = new QName("jxpath.properties", "]fSnCGL47");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      CoreFunction coreFunction1 = new CoreFunction((-588), expressionArray0);
      coreFunction1.functionPosition(predicateContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-588()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-32));
      Constant constant0 = new Constant(byte0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(-32, -32, -32, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction((-3027), expressionArray0);
      coreFunction0.getArg3();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, (Expression) null);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[7] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction1, constant0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">?EPCtI2B&");
      coreFunction0.getFunctionName();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("translate", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3092, expressionArray1);
      coreFunction1.functionNot((EvalContext) null);
      coreFunction1.toString();
      coreFunction1.functionName((EvalContext) null);
      coreFunction1.args = expressionArray1;
      coreFunction0.computeValue((EvalContext) null);
      coreFunction1.functionSum((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction261()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction261()(, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), null, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-588), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("string-length", "BO4d,n==#{S~;0y");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(88, expressionArray1);
      coreFunction0.toString();
      coreFunction0.toString();
      CoreFunction coreFunction3 = new CoreFunction(149, expressionArray0);
      CoreFunction coreFunction4 = new CoreFunction(14, expressionArray1);
      coreFunction4.functionSubstring(predicateContext0);
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreFunction0;
      coreFunction1.iterate((EvalContext) null);
      CoreFunction coreFunction5 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction5.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(15, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(string-length(null, null), unknownFunction88()(null, null))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[23];
      String string0 = "8aV+=KUD@";
      Constant constant0 = new Constant("8aV+=KUD@");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Long long0 = new Long(0);
      Long long1 = Long.getLong("8aV+=KUD@", long0);
      Constant constant1 = new Constant(long1);
      expressionArray0[1] = (Expression) constant1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, constant1);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, constant0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[2], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNot(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-588), expressionArray0);
      coreFunction0.getFunctionName();
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[0], coreFunction0);
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[0], expressionArray1[1]);
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(192, expressionArray1);
      EvalContext evalContext0 = null;
      coreFunction1.iteratePointers((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction((-1012), expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction(4445, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3092, expressionArray1);
      coreFunction1.functionNot((EvalContext) null);
      coreFunction1.functionName((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("x>Y)");
      assertEquals("x>Y)", processingInstructionTest0.getTarget());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-32));
      Constant constant0 = new Constant(byte0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7g>x=Hgy");
      coreFunction0.getFunctionName();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("substring", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, nameAttributeTest0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, coreOperationLessThan0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationOr0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationLessThan0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationNotEqual0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte)0, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, nameAttributeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      String string0 = "7g>x=Hgy";
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("7g>x=Hgy");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("()");
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-588), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      unionContext0.reset();
      ChildContext childContext0 = new ChildContext(unionContext0, nodeTypeTest0, false, false);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeTypeTest0);
      coreFunction0.functionNull(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("NaN0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(88, expressionArray1);
      coreFunction0.toString();
      coreFunction0.toString();
      CoreFunction coreFunction3 = new CoreFunction(149, expressionArray0);
      CoreFunction coreFunction4 = new CoreFunction(14, expressionArray1);
      coreFunction4.functionSubstring(predicateContext0);
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction4, expressionArray0[0]);
      expressionArray2[1] = (Expression) coreOperationSubtract0;
      expressionArray2[2] = (Expression) coreFunction1;
      CoreFunction coreFunction5 = new CoreFunction(0, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction1.isContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7g>x=Hgy");
      String string0 = coreFunction1.getFunctionName();
      assertEquals("ceiling", string0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      String string1 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction261()", string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(149, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction149()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(266, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 18;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Long long0 = new Long(261);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      CoreFunction coreFunction1 = new CoreFunction((-7), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ilHf)?@y");
      coreFunction0.isContextDependent();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      PredicateContext predicateContext1 = new PredicateContext(descendantContext0, coreOperationGreaterThan0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, (Expression) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = null;
      expressionArray0[2] = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      QName qName0 = new QName("", "yM$-S3) #m06");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(4, expressionArray0);
      coreFunction1.toString();
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction88()()", string0);
      
      CoreFunction coreFunction3 = new CoreFunction(3, expressionArray0);
      Object object0 = coreFunction0.functionSubstring(predicateContext0);
      assertEquals("", object0);
      
      CoreFunction coreFunction4 = new CoreFunction(1123, expressionArray1);
      boolean boolean0 = coreFunction4.isContextDependent();
      Object object1 = coreFunction2.functionStartsWith((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, true);
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      coreFunction1.toString();
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction2 = new CoreFunction(12, expressionArray1);
      coreFunction2.toString();
      CoreFunction coreFunction3 = new CoreFunction((-1164), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = 18;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      QName qName0 = new QName("", "yM$-S3) #m06");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7g>x=Hgy");
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeTypeTest0);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("substring-after", string0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.compute(selfContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      byte byte0 = (byte) (-88);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(149, (Expression[]) null);
      Byte byte0 = new Byte((byte) (-8));
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction1 = new CoreFunction(149, (Expression[]) null);
      coreFunction1.getArgumentCount();
      assertEquals(149, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(266, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(266, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      coreFunction1.getArg1();
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction266()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, true);
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationUnion1;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray1);
      coreFunction1.toString();
      coreFunction0.toString();
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(88, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7g>x=Hgy");
      coreFunction1.isContextDependent();
      PredicateContext predicateContext1 = new PredicateContext(predicateContext0, expressionArray0[1]);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(, (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "string-length";
      QName qName0 = new QName("string-length", "BO4d,n==#{S~;0y");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      coreOperationEqual0.isContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-88));
      Constant constant0 = new Constant(byte0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte) (-88));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction((byte) (-88), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("sum");
      SelfContext selfContext0 = new SelfContext(namespaceContext0, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      NamespaceContext namespaceContext1 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(3622, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionCeiling(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName("No read method", "3z|pT8F");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "B9LNSr$=vC}7");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, nodeNameTest0);
      QName qName1 = new QName("3z|pT8F", "3z|pT8F");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Srv{sZj }wgbN`6*");
      AttributeContext attributeContext1 = new AttributeContext(namespaceContext0, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction1.toString();
      coreFunction1.toString();
      CoreFunction coreFunction2 = new CoreFunction((-1027), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-638), expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray1[5] = expression0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], expressionArray1[0]);
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      Step step0 = new Step(47, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-3060), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(47, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-638), expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-638()(|(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002), |(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002), |(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002), |(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002), |(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002), |(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 * org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-32));
      Constant constant0 = new Constant(byte0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, constant0);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[6] = (Expression) coreOperationEqual0;
      expressionArray0[7] = (Expression) coreOperationDivide0;
      expressionArray0[8] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, (NodeTest) null);
      coreOperationDivide0.computeValue((EvalContext) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, (NodeTest) null, true);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expressionArray0[0]);
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -32, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant((Number) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeTypeTest0, true);
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-88));
      Constant constant0 = new Constant(byte0);
      QName qName0 = new QName("", "P~yYA/G$x[\n);G_");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "v:e");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, false, nodeTypeTest0);
      QName qName1 = new QName("v:e", "Sp");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(2121, expressionArray0);
      coreFunction0.toString();
      coreFunction0.toString();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      coreFunction1.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.isContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-88));
      Constant constant0 = new Constant(byte0);
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("local-name");
      Step step0 = new Step((byte) (-88), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((byte) (-88), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte) (-88), expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-88()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("4}K)4.");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5385, expressionArray0);
      coreFunction0.getArg2();
      // Undeclared exception!
      try { 
        variableReference0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      QName qName0 = new QName("", "P~yYA/G$x[\n);G_");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest1);
      coreFunction0.toString();
      coreFunction0.functionString(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = 10;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreOperationSubtract coreOperationSubtract1 = (CoreOperationSubtract)coreFunction0.getArg1();
      expressionArray0[1] = (Expression) coreOperationSubtract1;
      coreFunction0.getArg2();
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction((-409), expressionArray0);
      CoreOperationSubtract coreOperationSubtract2 = new CoreOperationSubtract((Expression) null, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationSubtract2;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      coreOperationSubtract1.args = expressionArray0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(22);
      CoreFunction coreFunction3 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      Byte byte0 = new Byte((byte) (-105));
      Constant constant0 = new Constant(byte0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, "vh!_=?`f", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "vh!_=?`f", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      QName qName0 = new QName("gx/K`>`;[e", "gx/K`>`;[e");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "vh!_=?`f");
      DescendantContext descendantContext0 = new DescendantContext(rootContext1, true, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "<<unknown namespace>>");
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeNameTest0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction((-4296), (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant((Number) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(1119, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7g>x=Hgy");
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeTypeTest0);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionCeiling(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      int int0 = (-588);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2740), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      coreFunction0.getArg2();
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction((-409), expressionArray0);
      Expression expression1 = coreFunction1.getArg3();
      expressionArray0[3] = expression1;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(22);
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      nodeTypeTest0.toString();
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2707);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      int int0 = 7;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("v}>qFL+j%r9c");
      QName qName0 = new QName((String) null, "The Content already has an existing parent \"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = 10;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      coreFunction0.getArg2();
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction((-409), expressionArray0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract((Expression) null, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(22);
      CoreFunction coreFunction3 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      QName qName0 = new QName("fWyO'<tOz", "(k,'O}Sg");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-638), expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray1[5] = expression0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], expressionArray1[0]);
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      Step step0 = new Step(47, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-3060), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(47, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-638), expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(1997, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("4~LgBr%,,5m");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "4~LgBr%,,5m");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      coreFunction0.functionNull(parentContext0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(266, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(266);
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "string-length";
      QName qName0 = new QName("string-length", "BO4d,n==#{S~;0y");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      coreOperationEqual0.isContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum($string-length:BO4d,n==#{S~;0y, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 = org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000006, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(149, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction149()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", "JXPath: found system property");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      JXPathContext.newContext((Object) coreOperationUnion0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("string-length", "BO4d,n==#{S~;0y");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      coreOperationEqual0.isContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2425);
      nodeTypeTest0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.compute(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant((Number) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionStringLength(ancestorContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      QName qName0 = new QName("4~LgBr%,,5m");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "4~LgBr%,,5m");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      coreFunction0.functionNull(parentContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, nodeNameTest0, false);
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7g>x=Hgy");
      coreFunction1.functionString(parentContext0);
      coreFunction0.compute(parentContext0);
      coreFunction0.functionFalse((EvalContext) null);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      QName qName0 = new QName("fWyO'<tOz", "(k,'O}Sg");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction2 = new CoreFunction(266, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", "4NKQB^781y");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext0 = new UnionContext(namespaceContext0, (EvalContext[]) null);
      coreFunction0.functionNull(namespaceContext0);
      coreFunction0.toString();
      Integer integer0 = new Integer(26);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      Object object0 = null;
      Integer integer1 = new Integer((-1));
      Locale locale0 = new Locale("unknownFunction0()()");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer1, locale0);
      // Undeclared exception!
      try { 
        nodePointer0.getPointerByKey(jXPathContext0, (String) null, "4NKQB^781y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2740), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      coreFunction0.getArg2();
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction((-409), expressionArray0);
      Expression expression1 = coreFunction1.getArg3();
      expressionArray0[3] = expression1;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(22);
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("string-length", "BO4d,n==#{S~;0y");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      coreOperationEqual0.isContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2425);
      nodeTypeTest0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.compute(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum($string-length:BO4d,n==#{S~;0y, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 = org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000006, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      QName qName0 = new QName("fWyO'<tOz", "(k,'O}Sg");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("4}K)4.");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, variableReference0);
      Constant constant0 = new Constant((Number) null);
      Constant constant1 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationGreaterThanOrEqual0);
      coreOperationLessThanOrEqual0.toString();
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last($4}K)4., org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(149, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction149()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", "JXPath: found system property");
      QName qName1 = new QName("JXPath: found system property", "namespace-uri");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationNotEqual0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(nameAttributeTest0, coreOperationUnion0);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual1, expressionArray0, stepArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, (Expression) null);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "JXPath: found system property");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest1);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction((-2390), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.isContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-369), expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "m9<5.z{3nZ.");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest1, true);
      namespaceContext0.getCurrentPosition();
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("4}K)4.");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, variableReference0);
      Constant constant0 = new Constant((Number) null);
      Constant constant1 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationGreaterThanOrEqual0);
      coreOperationLessThanOrEqual0.toString();
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(998);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, coreOperationLessThanOrEqual1);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("not");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeNameTest0);
      AttributeContext attributeContext1 = new AttributeContext(parentContext0, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2103), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2103()(concat(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 div (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000010), concat(), concat(), concat(), concat(), concat(), concat())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("string-length", "BO4d,n==#{S~;0y");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      coreOperationEqual0.isContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2425);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum($string-length:BO4d,n==#{S~;0y, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 = org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000006, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      Byte byte0 = new Byte((byte) (-105));
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.toString();
      String string0 = coreFunction0.getFunctionName();
      assertEquals("concat", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", "JXPath: found system property");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("4}K)4.");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, variableReference0);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      QName qName1 = new QName("4NKQB^781y", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNull(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()($4}K)4., org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeTypeTest0);
      coreFunction0.functionFalse(parentContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int int0 = (-2551);
      CoreFunction coreFunction0 = new CoreFunction((-2551), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2551()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(249, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(249, expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4NKQB^781y");
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      coreFunction1.functionNull((EvalContext) null);
      coreFunction1.toString();
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction249()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      QName qName0 = new QName("4~LgBr%,,5m");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "'G");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) parentContext0;
      evalContextArray0[1] = (EvalContext) parentContext0;
      evalContextArray0[2] = (EvalContext) parentContext0;
      evalContextArray0[3] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      coreFunction0.functionNull(unionContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(249, expressionArray0);
      coreFunction0.getFunctionCode();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction249()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(249, expressionArray0);
      coreFunction0.getFunctionCode();
      Constant constant0 = new Constant((Number) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      QName qName0 = new QName("cHvO#zP#{).<}G\"'8SZ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(249, nodeNameTest0, expressionArray0);
      Step step1 = new Step(12, nodeNameTest0, expressionArray0);
      Step step2 = new Step(249, nodeNameTest0, expressionArray0);
      Step step3 = new Step(249, nodeNameTest0, expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      Step step4 = new Step(12, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction249()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_3,zcq*a[ca^j0");
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(756, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(4515, expressionArray0);
      String string0 = "";
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(249, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(249, int0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-2368), expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(249, expressionArray0);
      coreFunction3.getArgumentCount();
      assertEquals(249, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", "JXPath: found system property");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      coreFunction0.computeValue(precedingOrFollowingContext0);
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeNameTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) attributeContext0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :JXPath: found system property
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte)63);
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      coreOperationLessThanOrEqual0.toString();
      coreOperationLessThanOrEqual0.computeContextDependent();
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4515, expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(2, int0);
      assertEquals(4515, coreFunction0.getFunctionCode());
      
      coreFunction0.getArg1();
      assertEquals(4515, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(149, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction149()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = (-2551);
      CoreFunction coreFunction0 = new CoreFunction((-2551), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2551()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-588));
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeTypeTest0);
      coreFunction0.functionNumber(attributeContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_3,zcq*a[ca^j0");
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("_3,zcq*a[ca^j0");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(16000, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(16000, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(16000, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(16000, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Ab3Z1b&jP");
      Step step4 = new Step(16000, nodeNameTest1, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16000, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionID(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      QName qName0 = new QName("", "JXPath: found system property");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-212), expressionArray0);
      coreFunction0.getFunctionName();
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = new QName("unknownFunction-212()", "unknownFunction-212()");
      Locale locale0 = Locale.ROOT;
      Byte byte0 = new Byte((byte)39);
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant("unknownFunction-212()");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant1);
      coreOperationLessThanOrEqual0.args = expressionArray0;
      coreOperationLessThanOrEqual0.toString();
      coreOperationLessThanOrEqual0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("sum", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("4}K)4.");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, variableReference0);
      Constant constant0 = new Constant((Number) null);
      Constant constant1 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationGreaterThanOrEqual0);
      coreOperationLessThanOrEqual0.toString();
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("sum", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2238), (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "ceiling";
      QName qName0 = new QName("ceiling", "ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ceiling");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionString(attributeContext0);
      int int0 = 0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2238));
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getJXPathContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(249, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(249, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      namespaceContext0.getCurrentPosition();
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("true", "true");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationNotEqual0);
      CoreFunction coreFunction0 = new CoreFunction(2179, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName1 = new QName("JXPath: found system property", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      namespaceContext0.getCurrentPosition();
      namespaceContext0.getCurrentPosition();
      CoreFunction coreFunction1 = new CoreFunction((-344), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-344()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 != org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationUnion0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, coreOperationNotEqual0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationNotEqual0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction(374, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = 266;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction266()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1357), (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")HDivq@OEw8:~'");
      boolean boolean0 = false;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = 1839;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1839, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      coreFunction0.toString();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        selfContext0.getNodeSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(597, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(597, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(597, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", "JXPath: found system property");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      namespaceContext0.getCurrentPosition();
      // Undeclared exception!
      try { 
        coreFunction0.functionName(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2238), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2238()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(249, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[3] = (Expression) constant0;
      constant0.toString();
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(234, expressionArray0);
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Integer integer0 = new Integer(2);
      QName qName0 = new QName("NaN", "NaN");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: NaN:NaN
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 15;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-212), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(":p')nE", "unknownFunction-212()");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "unknownFunction-212()()", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        rootContext0.nextNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int int0 = (-2551);
      CoreFunction coreFunction0 = new CoreFunction((-2551), (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2551()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(149, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction149()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("true", "true");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationNotEqual0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 != org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003), (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004), (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("$wFYv>]k#g");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("", "$wFYv>]k#g");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-524), expressionArray0);
      coreFunction0.getArg3();
      assertEquals((-524), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("namespace");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "namespace");
      Step step4 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(538, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(538, nodeTypeTest0, expressionArray1);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, expressionArray1[3]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], locationPath0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[3], expressionArray1[1]);
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], expressionArray0[4]);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(538, expressionArray0);
      assertEquals(538, coreFunction0.getFunctionCode());
  }
}
