/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 05:58:13 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("floor");
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1285), expressionArray1);
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hz5{tZ!&K2 5?k");
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("Hz5{tZ!&K2 5?k");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationMultiply0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      expressionArray0[5] = (Expression) constant1;
      QName qName0 = new QName("after: '");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationGreaterThan0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`x[R>5bpS%Jb");
      Step step0 = new Step(2991, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      expressionPath0.createContextForStep(nodeSetContext0, 2991, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, false);
      // Undeclared exception!
      coreFunction0.functionCeiling(childContext0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(65, expressionArray0);
      QName qName0 = new QName("last");
      Integer integer0 = new Integer((-768));
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLast(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction65()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("-G?W#(/");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, constant0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      ExtensionFunction extensionFunction2 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction2;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[1], extensionFunction1);
      expressionArray0[6] = (Expression) coreOperationNotEqual1;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction(1400, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[4];
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      QName qName0 = new QName("true");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext1 = rootContext0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(122, expressionArray0);
      coreFunction0.getArg2();
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      coreOperationEqual0.args = expressionArray0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      QName qName0 = new QName("8jRFriJ:W|~JiH");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "namespace-uri");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("1?qHaQtou[T", "1?qHaQtou[T");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1741, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1043), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationNotEqual0);
      expressionArray1[0] = (Expression) coreOperationEqual0;
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = (Expression) coreOperationNegate0;
      expressionArray2[1] = (Expression) coreOperationNotEqual0;
      expressionArray2[2] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray2[2], coreOperationNotEqual0);
      expressionArray2[3] = (Expression) coreOperationLessThan0;
      expressionArray2[4] = (Expression) coreOperationNegate0;
      Step[] stepArray1 = new Step[6];
      stepArray1[0] = step3;
      stepArray1[1] = step2;
      stepArray1[2] = step2;
      stepArray1[3] = step1;
      stepArray1[4] = step1;
      stepArray1[5] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray2, stepArray1);
      expressionArray1[1] = (Expression) expressionPath0;
      Step step5 = new Step((-3521), (NodeTest) null, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(13, nodeNameTest0, expressionArray2);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, expressionArray2[2]);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray2[4], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1043), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeNameTest0);
      selfContext0.nextNode();
      selfContext0.toString();
      coreFunction0.functionLast(selfContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("floor");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("a_$@Vh-6b,", "floor");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[4] = expression0;
      Expression expression1 = coreFunction0.getArg2();
      expressionArray0[5] = expression1;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[3], expression0);
      expressionArray0[6] = (Expression) coreOperationDivide1;
      Float float0 = new Float((-1027.8304F));
      Constant constant0 = new Constant(float0);
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction((-996), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-996), expressionArray0);
      // Undeclared exception!
      coreFunction2.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(65, expressionArray0);
      QName qName0 = new QName("last", "last");
      Integer integer0 = new Integer((-768));
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant(";D24CPvWfahh !s?A");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(951, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("'e%+dxav<\"%-Rdmxjv");
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("'e%+dxav<\"%-Rdmxjv", "org.apache.commons.jxpath.JXPathNotFoundException");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[3] = expression0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion1;
      Expression expression1 = coreFunction0.getArg1();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expression1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, constant0);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expression1, expression1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[4], coreOperationGreaterThan0);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(1226, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(200, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[4], expressionArray0[1]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction1 = new CoreFunction((-36), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002) + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005 + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000006 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000007), (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002) | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005 | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000006 > (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-996), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-996), expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(19, expressionArray0);
      coreFunction3.functionLocalName((EvalContext) null);
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(369, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(206, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-216), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(369, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(20, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(206, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      expressionPath0.createContextForStep(nodeSetContext0, 40, nodeNameTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(65, expressionArray0);
      QName qName0 = new QName("last", "last");
      Integer integer0 = new Integer((-768));
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: last:last
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(65, expressionArray0);
      QName qName0 = new QName("last", "last");
      Integer integer0 = new Integer((-768));
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = evalContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      coreFunction0.functionCount((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      coreFunction2.isContextDependent();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("|mI*/", "6>OsAU:}IWE#30v");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray1);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[2] = expression0;
      Expression expression1 = coreFunction0.getArg3();
      expressionArray0[3] = expression1;
      CoreFunction coreFunction1 = new CoreFunction((-1089), expressionArray1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction1, expression1);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[2], expressionArray1[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expression1, expressionArray0[5]);
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      Expression expression2 = coreFunction1.getArg2();
      expressionArray0[8] = expression2;
      CoreFunction coreFunction2 = new CoreFunction((-1089), expressionArray0);
      // Undeclared exception!
      coreFunction2.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[0] = null;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(2417, expressionArray0);
      CoreFunction coreFunction4 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction4.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, $, $)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-996), expressionArray0);
      coreFunction2.functionLocalName((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
      coreFunction2.functionName((EvalContext) null);
      coreFunction1.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-996), expressionArray0);
      coreFunction2.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((-7), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-7()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction1.functionSum(predicateContext0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("name");
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      coreFunction1.functionNormalizeSpace(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-996), expressionArray0);
      coreFunction2.functionLocalName((EvalContext) null);
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction1.functionSum(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("o");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("yhP4='eXG`O");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("!T`cYet}?9");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray1);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[2], expression0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationUnion0);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      Expression expression1 = coreFunction0.getArg3();
      expressionArray0[6] = expression1;
      expressionArray0[7] = (Expression) coreFunction0;
      Constant constant0 = new Constant("!T`cYet}?9");
      constant0.toString();
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      ParentContext parentContext0 = new ParentContext(childContext0, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreOperationMultiply0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNull(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-996), expressionArray0);
      coreFunction2.functionLocalName((EvalContext) null);
      coreFunction2.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W}D~HWEf#");
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("(");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction1;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      QName qName1 = new QName("W}D~HWEf#");
      VariableReference variableReference1 = new VariableReference(qName1);
      expressionArray0[5] = (Expression) variableReference1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[0], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[3], expressionArray0[2]);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(56, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-996), expressionArray0);
      coreFunction2.functionLocalName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-10), expressionArray0);
      Locale locale0 = Locale.KOREA;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",");
      Expression[] expressionArray1 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      Step step0 = new Step((-10), processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(selfContext0, (-298), processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionNumber(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("The Content already has an existing parent document", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference1;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("floor");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1285), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(76, (Expression[]) null);
      QName qName0 = new QName("last");
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      boolean boolean0 = coreFunction1.isContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[7];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationDivide0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreOperationDivide0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, coreOperationNegate0);
      expressionArray1[2] = (Expression) coreOperationDivide1;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray1[3] = (Expression) coreOperationNegate1;
      QName qName0 = new QName("y$oj^III?Cu");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[4] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide2 = new CoreOperationDivide(coreOperationLessThan0, coreOperationDivide1);
      expressionArray1[5] = (Expression) coreOperationDivide2;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[2], coreOperationDivide1);
      expressionArray1[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004 < org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000001, -(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006, -(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006), y$oj^III?Cu(null), (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005) div (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000007 <= org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000007)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("fr%BSp");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1305, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("fr%BSp");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName((String) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(31, expressionArray0);
      coreFunction0.computeContextDependent();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, false, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, expressionArray0[1]);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("translate");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: translate
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction28()()", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7I2OZPJfUj0}");
      Step step0 = new Step(247, processingInstructionTest0, expressionArray0);
      expressionPath0.isSimpleStep(step0);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, coreOperationOr0);
      expressionArray1[1] = (Expression) coreOperationNotEqual1;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = null;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAnd1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[5], expressionArray1[1]);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationGreaterThan0);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("\"$\"", "{Eoj17Ib#");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(743);
      Step step0 = new Step(21, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(241, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreOperationEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) coreOperationEqual0;
      expressionArray1[6] = (Expression) extensionFunction0;
      expressionArray1[7] = (Expression) extensionFunction0;
      expressionArray1[8] = (Expression) extensionFunction0;
      Step step2 = new Step(241, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(743, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(743, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreOperationEqual0;
      expressionArray2[1] = (Expression) coreOperationEqual0;
      expressionArray2[2] = (Expression) coreOperationEqual0;
      expressionArray2[3] = (Expression) variableReference0;
      Step step5 = new Step(241, nodeTypeTest0, expressionArray2);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, (Expression[]) null, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, coreOperationNegate0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, expressionArray1[0]);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(241, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(76, (Expression[]) null);
      QName qName0 = new QName("last", "floor");
      Integer integer0 = new Integer((-404));
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      coreFunction0.functionNamespaceURI(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(21, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      Step step1 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(890, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(890, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(890, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(16, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      int int0 = 539;
      Expression[] expressionArray1 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(539, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      QName qName0 = new QName("string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeNameTest0);
      Object object0 = coreFunction0.functionLast(selfContext0);
      assertEquals(0.0, object0);
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1172, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationMod0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationEqual0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(5317, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationNegate1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      expressionArray0[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(9, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "node()");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ChildContext childContext0 = new ChildContext(attributeContext0, (NodeTest) null, true, true);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) childContext0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, (NodeTest) null);
      ancestorContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      coreFunction0.computeContextDependent();
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(76, (Expression[]) null);
      QName qName0 = new QName("last", "floor");
      Integer integer0 = new Integer((-404));
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
      assertEquals(76, coreFunction0.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4664), (Expression[]) null);
      coreFunction0.isContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, unionContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionName(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4664()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[5];
      Float float0 = new Float((-1168.9597F));
      Constant constant0 = new Constant(float0);
      expressionArray1[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray1[1]);
      expressionArray1[2] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[3] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray1[3], expressionArray1[3]);
      expressionArray1[4] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction((-932), expressionArray1);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`.IVHim/vu;");
      Step step0 = new Step(29, processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-215), expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[1] = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[4] = null;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("OViqerYNm1f$rC");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], constant0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("Y2RU1X`CZ1cg", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, constant0);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], expressionArray0[6]);
      expressionArray0[8] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-16), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(313, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(313, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-295);
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreFunction0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(627);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z)jUm9QWnrbVY^PpEm");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-170), (Expression[]) null);
      coreFunction1.compute((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(selfContext0, nodeTypeTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, parentContext0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) evalContextArray0[0]);
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(evalContextArray0[0], nodeTypeTest0, true, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, nodeTypeTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, namespaceContext0, (Pointer) null);
      rootContext0.getJXPathContext();
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(4);
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QName qName0 = new QName("HLtJ;vXD$oG");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1222), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 28;
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr1;
      QName qName0 = new QName("5n+&83", "5n+&83");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationEqual0);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getJXPathContext();
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, (NodeTest) null);
      ChildContext childContext0 = new ChildContext(rootContext0, (NodeTest) null, true, true);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, childContext0, (Pointer) null);
      rootContext0.getJXPathContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      Object object0 = coreFunction0.computeValue(rootContext0);
      assertNotNull(object0);
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-744), (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(52, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(2, (Expression[]) null);
      boolean boolean1 = coreFunction2.isContextDependent();
      assertEquals(2, coreFunction2.getFunctionCode());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("\"local-name\"", "");
      Expression[] expressionArray1 = new Expression[5];
      Expression[] expressionArray2 = new Expression[4];
      Constant constant0 = new Constant((String) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray2[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1527), expressionArray1);
      coreFunction0.getArg2();
      expressionArray2[1] = null;
      int int0 = 22;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      expressionArray2[2] = (Expression) coreFunction1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      expressionArray2[3] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray2);
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreFunction2);
      expressionArray1[1] = (Expression) coreOperationDivide0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray1[2] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[3] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction3 = new CoreFunction(19, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(88);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(1766, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName((String) null, (String) null);
      variablePointerFactory0.createNodePointer((NodePointer) null, qName0, (Object) qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      rootContext1.getJXPathContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.KOREA;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getJXPathContext();
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      assertEquals(25, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3624, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("an:");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionString(ancestorContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("CE");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CE");
      EvalContext evalContext1 = null;
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      int int0 = 4;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 27;
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 29;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 16;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      JXPathContext.newContext((Object) coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1146);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-1397), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[3] = expression0;
      Expression expression1 = coreFunction0.getArg2();
      expressionArray0[4] = expression1;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      Step step0 = new Step(40, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd2 = new CoreOperationAnd(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationAnd2;
      CoreFunction coreFunction1 = new CoreFunction((-1397), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      coreFunction0.isContextDependent();
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-10), expressionArray0);
      coreFunction1.compute((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(2772, expressionArray0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction2;
      expressionArray1[2] = (Expression) coreFunction2;
      expressionArray1[3] = (Expression) coreFunction2;
      CoreFunction coreFunction3 = new CoreFunction(983, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction3.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(313, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(313, expressionArray1);
      coreFunction1.functionSubstring((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.KOREA;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionName(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      int int0 = 313;
      CoreFunction coreFunction0 = new CoreFunction(313, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.isContextDependent();
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2618), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-4203), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2713, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      QName qName0 = new QName("/c~/i4P");
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, predicateContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      coreFunction0.functionLocalName(rootContext0);
      assertEquals(2713, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      BasicVariables basicVariables0 = new BasicVariables();
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      JXPathContext.newContext((Object) coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreFunction0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-295), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "CX6Pg4{r3";
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationSubtract0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, coreOperationOr0);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      Step step0 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath1.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.KOREAN;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(" ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1030));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(313, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(313, expressionArray1);
      coreFunction1.functionSubstring((EvalContext) null);
      coreFunction1.functionConcat((EvalContext) null);
      assertEquals(313, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(21790731, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3047);
      Step step0 = new Step(10, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(74, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(21790731, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "\"round\"";
      QName qName0 = new QName("\"round\"", "\"round\"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-701), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.KOREA;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",");
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      Step step0 = new Step(3, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(selfContext0, (-298), processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 14;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      coreFunction0.isContextDependent();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      Iterator iterator0 = null;
      try {
        iterator0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 5;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-298), (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-298));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(3268, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeTypeTest0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      ChildContext childContext0 = new ChildContext(rootContext0, nodeTypeTest0, true, true);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeTypeTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-264), expressionArray0);
      int int0 = 2202;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2202);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      coreFunction0.functionStringLength(ancestorContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.KOREA;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, (NodeTest) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, attributeContext0, (Pointer) null);
      rootContext0.getJXPathContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WtO7#W+DjjGY");
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("\"local-name\"", "\"local-name\"");
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-264), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2202);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction((-264), expressionArray0);
      coreFunction1.functionString(ancestorContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-264()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("\"local-name\"", "\"local-name\"");
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "OqxNX X(");
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      String string0 = "[rgMAL5oz";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[rgMAL5oz");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      QName qName0 = new QName("\"local-name\"", "");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-298), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "3.id");
      CoreFunction coreFunction1 = new CoreFunction((-298), expressionArray0);
      coreFunction0.getFunctionCode();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      evalContextArray0[1] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-264), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2202);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("normalize-space");
      expressionArray1[1] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction((-1555), expressionArray1);
      coreFunction1.functionSubstring(ancestorContext0);
      assertEquals((-1555), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j^C\fq`7`");
      Constant constant0 = new Constant("><jdX&]1");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      Expression[] expressionArray0 = new Expression[25];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("j^C\fq`7`");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      QName qName0 = new QName("\"local-name\"", "");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-298), expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "3.id");
      CoreFunction coreFunction1 = new CoreFunction((-298), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-295), (Expression[]) null);
      QName qName0 = new QName("OqxNX X(", "OqxNX X(");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-295), expressionArray0);
      coreFunction1.functionCeiling((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-295()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = (-298);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-307), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = 20;
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("OqxNX X(", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\n    ");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.KOREA;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 19;
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray1);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("PH'oya;|1Xgbq0K|w");
      QName qName1 = new QName("PH'oya;|1Xgbq0K|w", "PH'oya;|1Xgbq0K|w");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "PH'oya;|1Xgbq0K|w");
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-951), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 = org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 = org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("");
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(740, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      expressionArray0[2] = (Expression) coreFunction1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      Expression expression1 = coreFunction0.getArg3();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], expression1);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction((-1864), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.KOREA;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, (NodeTest) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, attributeContext0, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      rootContext1.getJXPathContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(139);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, (NodeTest) null);
      JXPathContext.newContext((Object) ancestorContext0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(139);
      Object object0 = new Object();
      String string0 = coreFunction0.getFunctionName();
      assertEquals("count", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1610612736, expressionArray0);
      QName qName0 = new QName("3)0@'</M\no", "#EG#H)*3r==Lf.");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "jt'n/IJ");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1610612736()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 7;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      QName qName0 = new QName("floor");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "floor");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-295), (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2202);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2202);
      CoreFunction coreFunction1 = new CoreFunction(190, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      coreOperationUnion0.args = expressionArray0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction((-4372), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreFunction0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-295), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("*H", "*H");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      CoreFunction coreFunction2 = new CoreFunction((-295), expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction((-3572), (Expression[]) null);
      coreFunction3.functionNumber(ancestorContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1146);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CoreFunction coreFunction0 = new CoreFunction((-3038), (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3038()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(19, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreFunction0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-295), expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = 627;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(627);
      // Undeclared exception!
      try { 
        coreOperationAdd0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(306, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[2] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, coreOperationEqual0);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      expressionArray0[8] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(41, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2J", "2J");
      int int0 = 9;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      int int0 = 8;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreFunction0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-295), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(627);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot convert ");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[4], extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean('', '', $, '', $, '', org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-982), (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      CoreFunction coreFunction1 = new CoreFunction((-1657), (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-982));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1240), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(189, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1893, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1893()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[4], extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[7] = (Expression) constant0;
      Step step0 = new Step(18, (NodeTest) null, expressionArray0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[6], expressionArray0, stepArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      VariableReference variableReference1 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[7], constant0);
      CoreFunction coreFunction0 = new CoreFunction((-2831), expressionArray0);
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, variableReference0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.isContextDependent();
      expressionPath0.createContextForStep(rootContext0, Integer.MIN_VALUE, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2831()('', '', $, '', $, '', org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(336, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(336, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(2549, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2549);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = 19;
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      QName qName0 = new QName("\",\"", "\",\"");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, variableReference0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationGreaterThan0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      Locale locale0 = Locale.KOREA;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getJXPathContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1037);
      JXPathContext.newContext((Object) locale0);
      nodeTypeTest0.toString();
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, false, nodeTypeTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      descendantContext0.getCurrentPosition();
      coreFunction0.functionTrue(rootContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Step step0 = new Step(1284, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-545), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-545), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1984, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1284, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(1284);
      Step step6 = new Step(1519, nodeTypeTest1, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1284, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], locationPath0);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, coreOperationMultiply0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Constant constant0 = new Constant("floor");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[2] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("floor");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "floor");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, 'floor', null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot convert ");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()($, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[19];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      DecimalFormat decimalFormat0 = new DecimalFormat("f/?GE");
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) decimalFormat0);
      QName qName0 = new QName("WeuOHC#uaKH8(<:");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      attributeContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      EvalContext evalContext1 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionNumber(evalContext1);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Float float0 = new Float((-3607.4));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(306, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[2] = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreFunction0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction2 = new CoreFunction(306, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1775, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1775, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = (-1009);
      CoreFunction coreFunction0 = new CoreFunction((-1009), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Step step0 = new Step(16809983, (NodeTest) null, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd((Expression[]) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd1, coreOperationAdd1);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationAdd1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd1, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(16809983, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(313);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, true);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      QName qName0 = new QName("Invalid argument type for 'sum': ");
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("Invalid argument type for 'sum': ");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1009), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-1009), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, coreOperationEqual0);
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-306));
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeTypeTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext0, (Pointer) null);
      descendantContext0.getCurrentPosition();
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Constant constant0 = new Constant("following::");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationEqual0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, coreOperationEqual0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("following::", "Cannot access property: ");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(242);
      Step step0 = new Step(242, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(37, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(37, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(242, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(242, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 19;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      QName qName0 = new QName(",", "local-name");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant(",");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, (Expression[]) null, stepArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      VariableReference variableReference1 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationAdd0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, constant0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-161));
      expressionPath0.createContextForStep(rootContext0, Integer.MIN_VALUE, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      QName qName0 = new QName("Invalid argument type for 'sum': ");
      Expression[] expressionArray0 = new Expression[3];
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Float float0 = new Float((float) (-295));
      Constant constant0 = new Constant(float0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(989, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, variableReference0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, nameAttributeTest0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      VariableReference variableReference1 = new VariableReference(qName0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling($Invalid argument type for 'sum': , org.apache.commons.jxpath.ri.compiler.Constant@0000000003 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000003, org.apache.commons.jxpath.ri.compiler.Constant@0000000003 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, coreOperationEqual0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, extensionFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      int int0 = 25;
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = (-1009);
      CoreFunction coreFunction0 = new CoreFunction((-1009), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1009()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(306, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expression0, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction((-94), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-94), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 17;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[4], extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[7] = (Expression) constant0;
      Step step0 = new Step(18, (NodeTest) null, expressionArray0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[6], expressionArray0, stepArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      VariableReference variableReference1 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[7], constant0);
      CoreFunction coreFunction0 = new CoreFunction((-2831), expressionArray0);
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, variableReference0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      expressionPath0.createContextForStep(rootContext0, Integer.MIN_VALUE, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2831()('', '', $, '', $, '', org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-275), (Expression[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(3, processingInstructionTest0, (Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, (Expression[]) null, stepArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, coreFunction0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, coreOperationDivide0);
      CoreFunction coreFunction1 = new CoreFunction((-629), (Expression[]) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "aBl[^{g*eg'HIH]}~E");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-295), (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2202);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(420);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.compute(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(306, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(306, expressionArray1);
      coreFunction1.functionConcat((EvalContext) null);
      assertEquals(306, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(41, (Expression[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("Invalid argument type for 'sum': ", "Invalid argument type for 'sum': ");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MAX_VALUE);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      variablePointerFactory0.createNodePointer((NodePointer) variablePointer0, qName0, (Object) parentContext0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
      basicNodeSet0.remove(nodePointer0);
      basicNodeSet0.getNodes();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionTrue(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(306, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction306()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(1775, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[2]);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-420), expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2451);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) childContext0;
      evalContextArray0[2] = (EvalContext) childContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) childContext0;
      evalContextArray0[5] = (EvalContext) childContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = (EvalContext) childContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-420()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = 140;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(140, (Expression[]) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Ep74+");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2171));
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3360, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("namespace-uri");
      Consumer<NamespaceContext> consumer0 = (Consumer<NamespaceContext>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3360()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("", "|azVP_lI,z");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("floor");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, constant0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(2108, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2108()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 != org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.Constant@0000000005 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006) and org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000008, 'floor', org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 or org.apache.commons.jxpath.ri.compiler.Constant@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006 or org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000008, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004) = org.apache.commons.jxpath.ri.compiler.Constant@0000000005, -(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-295), (Expression[]) null);
      coreFunction0.compute((EvalContext) null);
      assertEquals((-295), coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2202);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(140, (Expression[]) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Ep74+");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2171));
      expressionPath0.createContextForStep(namespaceContext0, (-2171), nodeTypeTest0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(140);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction140()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1009), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(420);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      evalContextArray0[0] = (EvalContext) childContext0;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("", "|azVP_lI,z");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("floor");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, constant0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(2108, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2108);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2108()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 != org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.Constant@0000000005 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006) and org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000008, 'floor', org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 or org.apache.commons.jxpath.ri.compiler.Constant@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006 or org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000008, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004) = org.apache.commons.jxpath.ri.compiler.Constant@0000000005, -(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Byte byte0 = Byte.valueOf((byte)23);
      Constant constant1 = new Constant(byte0);
      constant1.toString();
      expressionArray0[1] = (Expression) constant1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 23, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) * org.apache.commons.jxpath.ri.compiler.Constant@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-295), (Expression[]) null);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction49()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(1775, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      VariableReference variableReference1 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(1775, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction91()()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.getFunctionName();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      Constant constant0 = new Constant("XM~34&W rD");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreOperationLessThan0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, (Expression) null);
      Constant constant1 = new Constant("unknownFunction91()()");
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationMultiply0, constant1);
      CoreFunction coreFunction1 = new CoreFunction(1395, (Expression[]) null);
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot convert ");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()($, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3360, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("namespace-uri");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Fyd-6QQ>k");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-283), (Expression[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionName();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(573, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, (Expression[]) null, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) nodeSetContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) nodeSetContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      expressionPath0.createContextForStep(unionContext0, 91, (NodeTest) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-709), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-71), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step((-1328), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd1, coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = evalContext0;
      evalContextArray0[2] = evalContext0;
      evalContextArray0[3] = evalContext0;
      evalContextArray0[4] = evalContext0;
      SelfContext selfContext0 = new SelfContext(evalContextArray0[2], (NodeTest) null);
      evalContextArray0[5] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("JXPath: loaded from services: ");
      expressionArray0[1] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg3();
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | org.apache.commons.jxpath.ri.compiler.Constant@0000000002 | (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004), 'JXPath: loaded from services: ', org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 div (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      String string0 = "thg&KUI/78N_I`?-Ta";
      QName qName0 = new QName("thg&KUI/78N_I`?-Ta", "false");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationNegate1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, expressionArray0[1]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.toString();
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Constant constant1 = new Constant("8$x_'v%,");
      expressionArray0[3] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[4]);
      QName qName0 = new QName("0");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 0
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      locationPath0.toString();
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("2J");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[6];
      QName qName1 = new QName("", "2J");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "2J");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[5]);
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      Step step1 = new Step(389, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(22, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(389, nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationEqual0);
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[6], expressionArray0[0]);
      expressionArray0[8] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest1);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(descendantContext0, basicNodeSet0);
      // Undeclared exception!
      coreFunction0.functionName(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      Step[] stepArray0 = new Step[3];
      NodeTest nodeTest0 = null;
      Step step0 = new Step(40, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(40, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.args = expressionArray0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionPath0, coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3018, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3018()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Byte byte0 = Byte.valueOf((byte)23);
      Constant constant1 = new Constant(byte0);
      constant1.toString();
      expressionArray0[1] = (Expression) constant1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 23, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) * org.apache.commons.jxpath.ri.compiler.Constant@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(140, (Expression[]) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Ep74+");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2171));
      expressionPath0.createContextForStep(namespaceContext0, (-2171), nodeTypeTest0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(140);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest1);
      EvalContext evalContext0 = expressionPath0.evalSteps(attributeContext0);
      coreFunction0.functionPosition(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction140()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("2J", "2J");
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3360, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("namespace-uri");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Fyd-6QQ>k");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3360()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("XM~34&W rD");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, constant0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant("XM~34&W rD");
      expressionArray0[5] = (Expression) constant1;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[5], coreOperationEqual0);
      expressionArray0[6] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName("#3", "#3");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      coreFunction0.args = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      predicateContext0.getCurrentPosition();
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("y3~\"+B");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Z|czl/uF)4Q)Yku");
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getArg3();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("2/#}Cr:U-m", "2/#}Cr:U-m");
      VariableReference variableReference0 = new VariableReference(qName0);
      variableReference0.toString();
      Byte byte0 = new Byte((byte)8);
      Constant constant0 = new Constant(byte0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, constant0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      EvalContext evalContext0 = null;
      coreOperationNegate0.computeValue((EvalContext) null);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000003, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 div org.apache.commons.jxpath.ri.compiler.Constant@0000000003, 8, -org.apache.commons.jxpath.ri.compiler.Constant@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = (-372);
      CoreFunction coreFunction0 = new CoreFunction((-372), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-372()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
