/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 05:26:37 GMT 2020
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-171), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-171), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-171), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object1);
      assertEquals((-171), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[0] = null;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(5, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(64, (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(64, step1.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(700, (NodeTest) null, expressionArray0);
      assertNotNull(step2);
      assertEquals(700, step2.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(26, (NodeTest) null, expressionArray0);
      assertNotNull(step3);
      assertEquals(26, step3.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(653, (NodeTest) null, expressionArray0);
      assertNotNull(step4);
      assertEquals(653, step4.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(5, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction1 = new CoreFunction(653, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(653, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      expressionArray0[2] = (Expression) coreFunction1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant("11");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction1, coreFunction1);
      assertNotNull(coreOperationMultiply0);
      assertEquals(653, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, coreFunction1);
      assertNotNull(nameAttributeTest0);
      assertEquals(653, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(256, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(256, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("m!*bi[qEw6{}");
      assertNotNull(processingInstructionTest0);
      assertEquals("m!*bi[qEw6{}", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-2805), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("m!*bi[qEw6{}", processingInstructionTest0.getTarget());
      assertEquals((-2805), step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2805), processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("m!*bi[qEw6{}", processingInstructionTest0.getTarget());
      assertEquals((-2805), step1.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(591, processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals("m!*bi[qEw6{}", processingInstructionTest0.getTarget());
      assertEquals(591, step2.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(591, processingInstructionTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals("m!*bi[qEw6{}", processingInstructionTest0.getTarget());
      assertEquals(591, step3.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(3094, processingInstructionTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals("m!*bi[qEw6{}", processingInstructionTest0.getTarget());
      assertEquals(3094, step4.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      Step step5 = new Step(10, processingInstructionTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals("m!*bi[qEw6{}", processingInstructionTest0.getTarget());
      assertEquals(10, step5.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(6, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2805), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2805), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[2]);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      
      expressionArray0[4] = (Expression) coreOperationAdd1;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("falseNaN", (String) null);
      assertNotNull(qName0);
      assertEquals("falseNaN", qName0.getPrefix());
      assertEquals("falseNaN:null", qName0.toString());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("falseNaN", qName0.getPrefix());
      assertEquals("falseNaN:null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("falseNaN:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-1315), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("falseNaN", qName0.getPrefix());
      assertEquals("falseNaN:null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("falseNaN:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1315), step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1315), nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals((-1315), step1.getAxis());
      assertEquals("falseNaN", qName0.getPrefix());
      assertEquals("falseNaN:null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("falseNaN:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(38, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(38, step2.getAxis());
      assertEquals("falseNaN", qName0.getPrefix());
      assertEquals("falseNaN:null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("falseNaN:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(104, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(104, step3.getAxis());
      assertEquals("falseNaN", qName0.getPrefix());
      assertEquals("falseNaN:null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("falseNaN:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      
      stepArray0[3] = step3;
      Step step4 = new Step(38, nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(38, step4.getAxis());
      assertEquals("falseNaN", qName0.getPrefix());
      assertEquals("falseNaN:null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("falseNaN:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, expressionArray0.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(5, stepArray0.length);
      
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationAdd0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1315), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-1315), coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction((-913), expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationOr0);
      assertNotNull(coreOperationEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationGreaterThanOrEqual0.args = expressionArray1;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("_5UNEEgvG3E*ZebV", "m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("_5UNEEgvG3E*ZebV:m9OwgQ\"8P", qName0.toString());
      assertEquals("_5UNEEgvG3E*ZebV", qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("_5UNEEgvG3E*ZebV:m9OwgQ\"8P", qName0.toString());
      assertEquals("_5UNEEgvG3E*ZebV", qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1315), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-1315), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("NaN", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertTrue(object0.equals((Object)string0));
      assertEquals("NaN", object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Constant constant1 = new Constant((String) null);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      String string0 = constant1.toString();
      assertNotNull(string0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotSame(constant1, constant0);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("'null'", string0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant1);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationNotEqual0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2738, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2738, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2738, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertEquals("0false0", object0);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2738, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Double double1 = Expression.NOT_A_NUMBER;
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      expressionArray0[2] = (Expression) constant0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(93, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(93, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals(93, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("-1", object0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(93, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction93()(-(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("false", "org.jdom.ProcessingInstruction");
      assertNotNull(qName0);
      assertEquals("org.jdom.ProcessingInstruction", qName0.getName());
      assertEquals("false:org.jdom.ProcessingInstruction", qName0.toString());
      assertEquals("false", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("org.jdom.ProcessingInstruction", qName0.getName());
      assertEquals("false:org.jdom.ProcessingInstruction", qName0.toString());
      assertEquals("false", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("NaN", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual1;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertEquals("fals", object0);
      
      CoreFunction coreFunction1 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("0", string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("NaN", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[0];
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-913), expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("'m9OwgQ\"8P'", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("No indexed read method for property ", (String) null);
      assertNotNull(qName0);
      assertEquals("No indexed read method for property :null", qName0.toString());
      assertEquals("No indexed read method for property ", qName0.getPrefix());
      assertNull(qName0.getName());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray1[2] = (Expression) constant1;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationDivide0;
      expressionArray1[6] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("No indexed read method for property :null", qName0.toString());
      assertEquals("No indexed read method for property ", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray1[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("No indexed read method for property :null", qName0.toString());
      assertEquals("No indexed read method for property ", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray2[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray2[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(76, expressionArray2);
      assertNotNull(coreFunction0);
      assertEquals(76, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      CoreFunction coreFunction1 = new CoreFunction(76, expressionArray2);
      assertNotNull(coreFunction1);
      assertEquals(76, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(3, expressionArray2.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(76, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray2, expressionArray1);
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(3, expressionArray2.length);
      assertFalse(object0.equals((Object)string0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("f", object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction76()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000009) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000009) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000009) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[2]);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(102);
      assertNotNull(nodeTypeTest0);
      assertEquals(102, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-3036), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(102, nodeTypeTest0.getNodeType());
      assertEquals((-3036), step0.getAxis());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1954), nodeTypeTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals((-1954), step1.getAxis());
      assertEquals(102, nodeTypeTest0.getNodeType());
      assertEquals(0, expressionArray1.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-266), nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals((-266), step2.getAxis());
      assertEquals(102, nodeTypeTest0.getNodeType());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationUnion0;
      Step step3 = new Step((-1184), nodeTypeTest0, expressionArray2);
      assertNotNull(step3);
      assertEquals((-1184), step3.getAxis());
      assertEquals(102, nodeTypeTest0.getNodeType());
      assertEquals(1, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-201), nodeTypeTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals((-201), step4.getAxis());
      assertEquals(102, nodeTypeTest0.getNodeType());
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      Step step5 = new Step((-3036), nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals((-3036), step5.getAxis());
      assertEquals(102, nodeTypeTest0.getNodeType());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[5], expressionPath0);
      assertNotNull(coreOperationSubtract1);
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionArray0[2]);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-3036), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-3036), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionID(unionContext0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant("2l^RTIYy`S$;2{");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      QName qName0 = new QName("2l^RTIYy`S$;2{");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("2l^RTIYy`S$;2{", qName0.toString());
      assertEquals("2l^RTIYy`S$;2{", qName0.getName());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction1 = new CoreFunction(1591, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1591, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNotNull(nullPointer0);
      assertNull(qName0.getPrefix());
      assertEquals("2l^RTIYy`S$;2{", qName0.toString());
      assertEquals("2l^RTIYy`S$;2{", qName0.getName());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, nullPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNull(qName0.getPrefix());
      assertEquals("2l^RTIYy`S$;2{", qName0.toString());
      assertEquals("2l^RTIYy`S$;2{", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertNotNull(rootContext0);
      assertNull(qName0.getPrefix());
      assertEquals("2l^RTIYy`S$;2{", qName0.toString());
      assertEquals("2l^RTIYy`S$;2{", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertNull(qName0.getPrefix());
      assertEquals("2l^RTIYy`S$;2{", qName0.toString());
      assertEquals("2l^RTIYy`S$;2{", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertNull(qName0.getPrefix());
      assertEquals("2l^RTIYy`S$;2{", qName0.toString());
      assertEquals("2l^RTIYy`S$;2{", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 2l^RTIYy`S$;2{
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      int int0 = (-913);
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("NaN", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("NaN", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual1;
      EvalContext evalContext0 = null;
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(3972, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3972, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("starts-with");
      assertNotNull(qName0);
      assertEquals("starts-with", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("starts-with", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("starts-with", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("starts-with", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals("starts-with", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("starts-with", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("0", string0);
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("0", "&I3xJ3Gnl`");
      assertNotNull(qName0);
      assertEquals("&I3xJ3Gnl`", qName0.getName());
      assertEquals("0:&I3xJ3Gnl`", qName0.toString());
      assertEquals("0", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("&I3xJ3Gnl`", qName0.getName());
      assertEquals("0:&I3xJ3Gnl`", qName0.toString());
      assertEquals("0", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionPath0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) expressionPath0;
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(0, stepArray0.length);
      
      expressionArray1[5] = (Expression) locationPath0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      expressionArray1[8] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Constant constant0 = new Constant("NaNNaN");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'NaNNaN'", string0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-932), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-932), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21856255);
      assertNotNull(nodeTypeTest0);
      assertEquals(21856255, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(21856255, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(selfContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("j+S$ommHv_e;%nS0", "i9s20_V-2;B");
      assertNotNull(qName0);
      assertEquals("j+S$ommHv_e;%nS0:i9s20_V-2;B", qName0.toString());
      assertEquals("i9s20_V-2;B", qName0.getName());
      assertEquals("j+S$ommHv_e;%nS0", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("j+S$ommHv_e;%nS0:i9s20_V-2;B", qName0.toString());
      assertEquals("i9s20_V-2;B", qName0.getName());
      assertEquals("j+S$ommHv_e;%nS0", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("j+S$ommHv_e;%nS0:i9s20_V-2;B", qName0.toString());
      assertEquals("i9s20_V-2;B", qName0.getName());
      assertEquals("j+S$ommHv_e;%nS0", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, extensionFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("j+S$ommHv_e;%nS0:i9s20_V-2;B", qName0.toString());
      assertEquals("i9s20_V-2;B", qName0.getName());
      assertEquals("j+S$ommHv_e;%nS0", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("|{rS1d");
      assertNotNull(processingInstructionTest0);
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(19, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      assertEquals(19, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1313, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      assertEquals(1313, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      boolean boolean0 = step1.isContextDependent();
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      assertEquals(1313, step1.getAxis());
      assertNotSame(step1, step0);
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertTrue(boolean0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      boolean boolean1 = extensionFunction0.isContextDependent();
      assertEquals("j+S$ommHv_e;%nS0:i9s20_V-2;B", qName0.toString());
      assertEquals("i9s20_V-2;B", qName0.getName());
      assertEquals("j+S$ommHv_e;%nS0", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      
      ParentContext parentContext0 = new ParentContext(selfContext0, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals("|{rS1d", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      coreFunction0.functionCount(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = Expression.NOT_A_NUMBER;
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Constant constant0 = new Constant(double1);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(97, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(97, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(97, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(97, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      // Undeclared exception!
      coreFunction1.functionSubstringAfter(unionContext0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("0", string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertTrue(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)object0));
      assertEquals("0", object1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = coreFunction0.getFunctionName();
      assertNotNull(string1);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)object1));
      assertEquals("unknownFunction-913()", string1);
      
      Object object2 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object2);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(object2.equals((Object)string0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)string1));
      assertFalse(object2.equals((Object)object0));
      assertEquals("0true", object2);
      
      Object object3 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object3);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertTrue(object3.equals((Object)boolean0));
      assertEquals(false, object3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Step[] stepArray0 = new Step[3];
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[0], expressionArray1[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray1[2] = (Expression) variableReference0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction1);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray1[3] = (Expression) extensionFunction1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, expressionArray1[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(extensionFunction1, coreOperationMultiply0);
      assertNotNull(coreOperationMultiply1);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      
      expressionArray1[5] = (Expression) coreOperationMultiply1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      assertNotNull(coreOperationNegate0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(3, stepArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction((-3017), expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals((-3017), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      QName qName0 = new QName("*b^<6c/.ZAPj7~p=N`x");
      assertNotNull(qName0);
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.toString());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl1, locale0);
      assertNotNull(beanPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.toString());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.toString());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.toString());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.toString());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext1 = new InitialContext(initialContext0);
      assertNotNull(initialContext1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("*b^<6c/.ZAPj7~p=N`x", qName0.toString());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext1.getDocumentOrder());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertEquals(0, initialContext1.getPosition());
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(initialContext1.equals((Object)initialContext0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(initialContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: *b^<6c/.ZAPj7~p=N`x
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest1 = (NameAttributeTest)coreFunction0.getArg2();
      assertNotNull(nameAttributeTest1);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertSame(nameAttributeTest1, nameAttributeTest0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      
      expressionArray0[5] = (Expression) coreOperationAdd1;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertNotNull(nodeTypeTest0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(27, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertEquals(27, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object0);
      
      Object object1 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object1.equals((Object)object0));
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("15", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertEquals("true15", object0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertNotNull(object1);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      
      Object object2 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(object2);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)string0));
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("0", string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      
      boolean boolean0 = coreOperationGreaterThanOrEqual0.isContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object1);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(object1.equals((Object)string0));
      assertEquals("0true", object1);
      
      Object object2 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object2);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(object2.equals((Object)string0));
      assertFalse(object2.equals((Object)object1));
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("0", string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = coreOperationGreaterThanOrEqual0.isContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("NaNNaN", object0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((-5287), expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-5287), coreFunction2.getFunctionCode());
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      
      Object object2 = coreFunction2.functionSubstring((EvalContext) null);
      assertNotNull(object2);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-5287), coreFunction2.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertTrue(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-1365);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d^g4YM{&eM");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "The CDATA \"";
      Constant constant0 = new Constant("The CDATA \"");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string1 = constant0.toString();
      assertNotNull(string1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("'The CDATA \"'", string1);
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("count", "NaNNaN");
      assertNotNull(qName0);
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("count:NaNNaN", qName0.toString());
      assertEquals("count", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("count:NaNNaN", qName0.toString());
      assertEquals("count", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction1);
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("count:NaNNaN", qName0.toString());
      assertEquals("count", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction((-1365), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-1365), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("y");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2416, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(2416, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("NaN", string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-913), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertEquals("falsefalse", object0);
      
      CoreFunction coreFunction1 = new CoreFunction((-5287), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-5287), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-5287), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      
      Object object2 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-5287), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)string0));
      assertEquals("false", object2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction((-222), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-222), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals((-222), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expression0, expressionArray0[2]);
      assertNotNull(coreOperationSubtract1);
      assertEquals((-222), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) expressionPath0;
      Expression expression1 = coreFunction0.getArg1();
      assertNull(expression1);
      assertEquals((-222), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[2] = null;
      CoreFunction coreFunction1 = new CoreFunction((-222), expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals((-222), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(3, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[4] = (Expression) coreFunction1;
      Expression expression2 = coreFunction1.getArg1();
      assertNotNull(expression2);
      assertEquals((-222), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertSame(expression2, expressionPath0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(3, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[5] = expression2;
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(1632, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1632, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      assertNotNull(coreOperationMod0);
      assertEquals(1632, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(16, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(16, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(16, (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(16, step1.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(16, (NodeTest) null, expressionArray0);
      assertNotNull(step2);
      assertEquals(16, step2.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMod0;
      Step step3 = new Step(0, (NodeTest) null, expressionArray1);
      assertNotNull(step3);
      assertEquals(0, step3.getAxis());
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1632, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[0] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, expressionPath0);
      assertNotNull(coreOperationMod1);
      assertEquals(1632, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      
      expressionArray0[2] = (Expression) coreOperationMod1;
      CoreFunction coreFunction1 = new CoreFunction((-312), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-312), coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean1 = expressionPath0.isSimpleStep(step0);
      assertEquals(1632, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(16, step0.getAxis());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreOperationMod0, coreOperationMod1);
      assertNotSame(step0, step3);
      assertNotSame(step0, step1);
      assertNotSame(step0, step2);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreOperationMod0.equals((Object)coreOperationMod1));
      assertFalse(step0.equals((Object)step3));
      assertFalse(step0.equals((Object)step1));
      assertFalse(step0.equals((Object)step2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-312), coreFunction1.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(1156, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1156, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[2];
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("0", string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-913), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string0));
      assertEquals("0true", object0);
      
      Object object1 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertNotNull(object1);
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1156, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      
      Object object2 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(object2);
      assertEquals((-913), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)string0));
      assertFalse(object2.equals((Object)object1));
      assertEquals("0", object2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("m9OwgQ\"8P", "tox5JZ9P3liqLo0");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P:tox5JZ9P3liqLo0", qName0.toString());
      assertEquals("tox5JZ9P3liqLo0", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P:tox5JZ9P3liqLo0", qName0.toString());
      assertEquals("tox5JZ9P3liqLo0", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2580), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-2580), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(1872, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(1872, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue(predicateContext0);
      assertNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNot(predicateContext0);
      assertNotNull(object1);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(object1.equals((Object)boolean0));
      assertEquals(false, object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count('m9OwgQ\"8P')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-41);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)48, (byte) (-41)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      
      coreOperationNegate0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(string0.equals((Object)object0));
      assertEquals("unknownFunction0()", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "m9OwgQ\"8P";
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      expressionArray0[4] = (Expression) coreOperationNegate0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(43, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(43, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      CoreFunction coreFunction1 = new CoreFunction(1479, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(1479, coreFunction1.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(1479, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(1479, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(30, coreFunction3.getFunctionCode());
      assertEquals(6, coreFunction3.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction3.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('m9OwgQ\"8P', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, |org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'm9OwgQ\"8P')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1055), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1055), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      String string0 = "NaNNaN";
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QJMo'4{K#/F,v");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant0 = new Constant("QJMo'4{K#/F,v");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      coreOperationUnion0.args = expressionArray1;
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      assertNotNull(selfContext0);
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      selfContext0.reset();
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(selfContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("E");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction1);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction1);
      assertNotNull(coreOperationMod0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, extensionFunction1);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant0 = new Constant("E");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction1, constant0);
      assertNotNull(coreOperationLessThan0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "E");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertEquals("E", nodeNameTest0.getNamespaceURI());
      assertEquals("E", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(2, nodeNameTest0, expressionArray1);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertEquals("E", nodeNameTest0.getNamespaceURI());
      assertEquals("E", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2, step0.getAxis());
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[0] = step0;
      Step step1 = new Step(52, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(52, step1.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertEquals("E", nodeNameTest0.getNamespaceURI());
      assertEquals("E", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(5, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[1] = step1;
      Step step2 = new Step(52, nodeNameTest0, expressionArray1);
      assertNotNull(step2);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertEquals(52, step2.getAxis());
      assertEquals("E", nodeNameTest0.getNamespaceURI());
      assertEquals("E", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, expressionArray1.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertEquals(2, step3.getAxis());
      assertEquals("E", nodeNameTest0.getNamespaceURI());
      assertEquals("E", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationGreaterThan0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(52, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      String string0 = step2.toString();
      assertNotNull(string0);
      assertNull(qName0.getPrefix());
      assertEquals("E", qName0.getName());
      assertEquals("E", qName0.toString());
      assertEquals(52, step2.getAxis());
      assertEquals("E", nodeNameTest0.getNamespaceURI());
      assertEquals("E", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotSame(step2, step1);
      assertNotSame(step2, step3);
      assertNotSame(step2, step0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(0, expressionArray1.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("UNKNOWN::E", string0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("cV+Jm!G..");
      assertNotNull(processingInstructionTest0);
      assertEquals("cV+Jm!G..", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step(61, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("cV+Jm!G..", processingInstructionTest0.getTarget());
      assertEquals(61, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest(",A_H'");
      assertNotNull(processingInstructionTest1);
      assertEquals(",A_H'", processingInstructionTest1.getTarget());
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      
      Step step1 = new Step(26, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("cV+Jm!G..", processingInstructionTest0.getTarget());
      assertEquals(26, step1.getAxis());
      assertEquals(1, expressionArray0.length);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertFalse(step1.equals((Object)step0));
      
      String string0 = processingInstructionTest0.toString();
      assertNotNull(string0);
      assertEquals("cV+Jm!G..", processingInstructionTest0.getTarget());
      assertNotSame(processingInstructionTest0, processingInstructionTest1);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertEquals("processing-instruction('cV+Jm!G..')", string0);
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(string0.equals((Object)object0));
      assertEquals("unknownFunction0()", string0);
      
      Object object1 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object1);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("Exception trying to create xpath ", "Exception trying to create xpath ");
      assertNotNull(qName0);
      assertEquals("Exception trying to create xpath :Exception trying to create xpath ", qName0.toString());
      assertEquals("Exception trying to create xpath ", qName0.getPrefix());
      assertEquals("Exception trying to create xpath ", qName0.getName());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-1), processingInstructionTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), step0.getAxis());
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("NaNNaN");
      assertNotNull(processingInstructionTest1);
      assertEquals("NaNNaN", processingInstructionTest1.getTarget());
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      
      Step step1 = new Step(30, processingInstructionTest1, expressionArray1);
      assertNotNull(step1);
      assertEquals("NaNNaN", processingInstructionTest1.getTarget());
      assertEquals(30, step1.getAxis());
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(4, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      String string0 = processingInstructionTest1.toString();
      assertNotNull(string0);
      assertEquals("NaNNaN", processingInstructionTest1.getTarget());
      assertNotSame(processingInstructionTest1, processingInstructionTest0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertEquals("processing-instruction('NaNNaN')", string0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Double double1 = Expression.NOT_A_NUMBER;
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Constant constant0 = new Constant(double1);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      QName qName0 = new QName("NaNNaN", "NaNNaN");
      assertNotNull(qName0);
      assertEquals("NaNNaN", qName0.getPrefix());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("NaNNaN", qName0.getPrefix());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      assertNotNull(coreOperationNegate0);
      assertEquals("NaNNaN", qName0.getPrefix());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("NaNNaN", qName0.getPrefix());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      expressionArray0[5] = (Expression) coreOperationNegate0;
      expressionArray0[6] = (Expression) variableReference0;
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-196), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-196), coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(6, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object1);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertTrue(object1.equals((Object)boolean0));
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("m9OwgQ\"8P", "*k~BfSRb");
      assertNotNull(qName0);
      assertEquals("*k~BfSRb", qName0.getName());
      assertEquals("m9OwgQ\"8P:*k~BfSRb", qName0.toString());
      assertEquals("m9OwgQ\"8P", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("*k~BfSRb", qName0.getName());
      assertEquals("m9OwgQ\"8P:*k~BfSRb", qName0.toString());
      assertEquals("m9OwgQ\"8P", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-173), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-173), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Expression[] expressionArray1 = new Expression[3];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(22);
      assertNotNull(nodeTypeTest0);
      assertEquals(22, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(22, nodeTypeTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(22, nodeTypeTest0.getNodeType());
      assertEquals(22, step0.getAxis());
      assertEquals(3, expressionArray1.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[0];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step step1 = new Step((-1), nodeTypeTest0, expressionArray2);
      assertNotNull(step1);
      assertEquals(22, nodeTypeTest0.getNodeType());
      assertEquals((-1), step1.getAxis());
      assertEquals(0, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1), nodeTypeTest0, expressionArray2);
      assertNotNull(step2);
      assertEquals(22, nodeTypeTest0.getNodeType());
      assertEquals((-1), step2.getAxis());
      assertEquals(0, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      int int0 = (-1229);
      Step step3 = new Step((-1229), nodeTypeTest0, (Expression[]) null);
      assertNotNull(step3);
      assertEquals(22, nodeTypeTest0.getNodeType());
      assertEquals((-1229), step3.getAxis());
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[0], locationPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals(3, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[0], coreOperationGreaterThan0);
      assertNotNull(coreOperationEqual0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals(3, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      
      expressionArray1[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertEquals("substring-before()", string0);
      
      EvalContext evalContext0 = null;
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("*X");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-65529), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-65529), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(evalContextArray0[2], true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(8, evalContextArray0.length);
      
      evalContextArray0[5] = (EvalContext) descendantContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(8, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionBoolean(unionContext0);
      assertNotNull(object0);
      assertEquals((-65529), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals(8, evalContextArray0.length);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Expression expression1 = coreFunction1.getArg1();
      assertNull(expression1);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      expressionArray0[2] = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, expressionArray0[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, coreOperationOr0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd1);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      
      expressionArray0[5] = (Expression) coreOperationAnd1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd2 = (CoreOperationAnd)coreFunction1.getArg2();
      assertNotNull(coreOperationAnd2);
      assertEquals("and", coreOperationAnd2.getSymbol());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotSame(coreOperationAnd2, coreOperationAnd1);
      assertSame(coreOperationAnd2, coreOperationAnd0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationAnd2.equals((Object)coreOperationAnd1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      expressionArray0[7] = (Expression) coreOperationAnd2;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(8, coreFunction2.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Double double1 = Expression.NOT_A_NUMBER;
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Constant constant0 = new Constant(double1);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      QName qName0 = new QName("NaNNaN", "NaNNaN");
      assertNotNull(qName0);
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      assertNotNull(coreOperationNegate0);
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("NaNNaN:NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("NaNNaN", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      expressionArray0[5] = (Expression) coreOperationNegate0;
      expressionArray0[6] = (Expression) variableReference0;
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-196), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-196), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(30, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      assertNotNull(nodeTypeTest0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(19, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals(19, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(904, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals(904, step1.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, locationPath0);
      assertNotNull(coreOperationMod0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationNotEqual0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      QName qName0 = new QName("] ");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(1400, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1400, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1400, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      coreOperationNegate0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      coreOperationLessThan0.args = expressionArray0;
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan1 = (CoreOperationLessThan)coreFunction0.getArg1();
      assertNotNull(coreOperationLessThan1);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertSame(coreOperationLessThan1, coreOperationLessThan0);
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("\"local-name\"", "NaNNaN");
      assertNotNull(qName0);
      assertEquals("\"local-name\":NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("\"local-name\"", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("\"local-name\":NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("\"local-name\"", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("\"local-name\":NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("\"local-name\"", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertNotNull(coreOperationNegate0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("\"local-name\":NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertEquals("\"local-name\"", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertEquals("local-name()", string0);
      
      EvalContext evalContext0 = null;
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 13;
      QName qName0 = new QName("] ");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("name");
      assertNotNull(processingInstructionTest0);
      assertEquals("name", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(6, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("name", processingInstructionTest0.getTarget());
      assertEquals(6, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(4, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("name", processingInstructionTest0.getTarget());
      assertEquals(4, step1.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Constant constant0 = new Constant("boolean");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = Expression.NOT_A_NUMBER;
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Constant constant1 = new Constant(double1);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      assertNotNull(coreOperationNegate1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      Long long0 = new Long((-827));
      assertNotNull(long0);
      assertEquals((-827L), (long)long0);
      
      Constant constant2 = new Constant(long0);
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction((-182), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-182), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreOperationNegate0.compute((EvalContext) null);
      assertNotNull(object0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotSame(constant0, constant2);
      assertNotSame(constant0, constant1);
      assertNotSame(coreOperationNegate0, coreOperationNegate1);
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertTrue(object0.equals((Object)double1));
      assertFalse(object0.equals((Object)double0));
      assertEquals(Double.NaN, object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("00", object0);
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals("0", object2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.BasicNodeSet");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean2 = coreFunction1.computeContextDependent();
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("m9OwgQ\"8P", "m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P:m9OwgQ\"8P", qName0.toString());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P:m9OwgQ\"8P", qName0.toString());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(27, coreFunction2.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Object object0 = coreFunction2.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(27, coreFunction2.getFunctionCode());
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0.0, object0);
      
      Object object1 = coreFunction1.functionName((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object2);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionPosition(attributeContext0);
      assertNotNull(object0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      assertFalse(object0.equals((Object)int0));
      assertEquals(0, object0);
      
      // Undeclared exception!
      try { 
        precedingOrFollowingContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionPosition(attributeContext0);
      assertNotNull(object0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      assertFalse(object0.equals((Object)int0));
      assertEquals(0, object0);
      
      // Undeclared exception!
      try { 
        precedingOrFollowingContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("] ");
      assertNotNull(qName0);
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertNotNull(predicateContext0);
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      
      expressionArray0[1] = (Expression) coreOperationAdd1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationAdd1);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("8|8?Efv[");
      assertNotNull(qName0);
      assertEquals("8|8?Efv[", qName0.getName());
      assertEquals("8|8?Efv[", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("8|8?Efv[", qName0.getName());
      assertEquals("8|8?Efv[", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("8|8?Efv[", nodeNameTest0.toString());
      
      Step step0 = new Step(29, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("8|8?Efv[", qName0.getName());
      assertEquals("8|8?Efv[", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("8|8?Efv[", nodeNameTest0.toString());
      assertEquals(29, step0.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, locationPath0);
      assertNotNull(coreOperationMod0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-31), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-31), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(14);
      assertNotNull(nodeTypeTest0);
      assertEquals(14, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(14, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("substring-after");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(8388608, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(8388608, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreFunction1);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(8388608, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(8388608, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(8388608, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction8388608()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-2279), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      coreOperationNegate0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Double double1 = Expression.NOT_A_NUMBER;
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Constant constant1 = new Constant(double1);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      assertNotNull(coreOperationNegate1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      Long long0 = new Long((-827));
      assertNotNull(long0);
      assertEquals((-827L), (long)long0);
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant1;
      QName qName0 = new QName("contains", "m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("contains", qName0.getPrefix());
      assertEquals("contains:m9OwgQ\"8P", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("contains", qName0.getPrefix());
      assertEquals("contains:m9OwgQ\"8P", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction((-4489), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-4489), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Double double1 = Expression.NOT_A_NUMBER;
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Constant constant1 = new Constant(double1);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      assertNotNull(coreOperationNegate1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      Long long0 = new Long((-827));
      assertNotNull(long0);
      assertEquals((-827L), (long)long0);
      
      Constant constant2 = new Constant(long0);
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction((-182), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-182), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-182), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("NaN", object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-182()(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'm9OwgQ\"8P', -(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("NaN", object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertTrue(object1.equals((Object)object0));
      assertEquals("NaN", object1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("gGd6{D_an&rnv'{]yYt");
      assertNotNull(qName0);
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationMod0);
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("11");
      assertNotNull(processingInstructionTest0);
      assertEquals("11", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(30, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("11", processingInstructionTest0.getTarget());
      assertEquals(30, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1689, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("11", processingInstructionTest0.getTarget());
      assertEquals(1689, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-165), processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals("11", processingInstructionTest0.getTarget());
      assertEquals((-165), step2.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("gGd6{D_an&rnv'{]yYt", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(3, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1689, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1689, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = step0.isContextDependent();
      assertEquals("11", processingInstructionTest0.getTarget());
      assertEquals(30, step0.getAxis());
      assertNotSame(step0, step2);
      assertNotSame(step0, step1);
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step1));
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Constant constant0 = new Constant(")0");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      QName qName0 = new QName(")0");
      assertNotNull(qName0);
      assertEquals(")0", qName0.getName());
      assertEquals(")0", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals(")0", qName0.getName());
      assertEquals(")0", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(")0", qName0.getName());
      assertEquals(")0", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(")0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals(")0", qName0.getName());
      assertEquals(")0", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(")0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("00", object0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction1;
      expressionArray1[5] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(21, coreFunction2.getFunctionCode());
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(6, expressionArray1.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(0, unknownFunction32()(0, 0), unknownFunction32()(0, 0), unknownFunction32()(0, 0), unknownFunction32()(0, 0), unknownFunction32()(0, 0))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-423));
      assertNotNull(nodeTypeTest0);
      assertEquals((-423), nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals((-423), nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(parentContext0);
      assertEquals((-423), nodeTypeTest0.getNodeType());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      String string1 = nodeTypeTest0.toString();
      assertNotNull(string1);
      assertEquals((-423), nodeTypeTest0.getNodeType());
      assertTrue(string1.equals((Object)string0));
      assertEquals("UNKNOWN()", string1);
      
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-827), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-827), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-827), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertEquals("NaN", object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((Pointer) null).when(jXPathContextReferenceImpl0).getPointerByKey(anyString() , anyString());
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("ancestor");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      
      Locale locale0 = new Locale("4ENG1.", "ancestor");
      assertNotNull(locale0);
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNotNull(nullPointer0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertNotNull(rootContext0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4ENG1.");
      assertNotNull(processingInstructionTest0);
      assertEquals("4ENG1.", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext(rootContext0, processingInstructionTest0, false, false);
      assertNotNull(childContext0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("4ENG1.", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Pointer pointer0 = nullPointer0.getPointerByKey(jXPathContext0, "", "4ENG1.");
      assertNull(pointer0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, childContext0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals("4ENG1.", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ANCESTOR", locale0.getCountry());
      assertEquals("4eng1.", locale0.getLanguage());
      assertEquals("4eng1._ANCESTOR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals("4ENG1.", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object2);
      
      Object object3 = coreFunction0.functionString((EvalContext) null);
      assertNotNull(object3);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertEquals("NaN", object3);
      
      Object object4 = coreFunction0.functionCeiling((EvalContext) null);
      assertNotNull(object4);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(Double.NaN, object4);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Integer integer0 = new Integer(122880);
      assertNotNull(integer0);
      assertEquals(122880, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("normalize-space");
      assertNotNull(qName0);
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction1);
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd1);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      
      expressionArray0[5] = (Expression) coreOperationAnd1;
      Constant constant1 = new Constant(integer0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[6] = (Expression) constant1;
      Constant constant2 = new Constant(integer0);
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      
      expressionArray0[7] = (Expression) constant2;
      CoreOperationAnd coreOperationAnd2 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd2);
      assertEquals("and", coreOperationAnd2.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationAnd2.equals((Object)coreOperationAnd1));
      assertFalse(coreOperationAnd2.equals((Object)coreOperationAnd0));
      
      expressionArray0[8] = (Expression) coreOperationAnd2;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1591, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1591, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(1591, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1591, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreOperationLessThanOrEqual0.computeContextDependent();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(boolean0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertNotNull(predicateContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction1.functionBoolean((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1591, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]~{`KnRr_Y/#");
      assertFalse(boolean0);
      
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertNotNull(object1);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object2);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-571), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-571), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("00", object0);
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object1);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(46, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, (Expression) null);
      assertNotNull(coreOperationEqual0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-709), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-709), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThanOrEqual0);
      assertNotNull(predicateContext0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(locationPath0);
      assertNotNull(coreOperationNegate1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate1, coreOperationNegate0);
      assertNotNull(coreOperationDivide0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate2 = (CoreOperationNegate)coreFunction0.getArg2();
      assertNotNull(coreOperationNegate2);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate2.getSymbol());
      assertNotSame(coreOperationNegate2, coreOperationNegate1);
      assertSame(coreOperationNegate2, coreOperationNegate0);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationNegate2.equals((Object)coreOperationNegate1));
      
      expressionArray0[4] = (Expression) coreOperationNegate2;
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(1056, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(1056, coreFunction1.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals((-2279), coreFunction2.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals(6, int0);
      
      CoreFunction coreFunction3 = new CoreFunction((-577), expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals((-577), coreFunction3.getFunctionCode());
      assertEquals(6, coreFunction3.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      int int0 = 2;
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      assertNotNull(predicateContext0);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      
      QName qName0 = new QName("N", "N");
      assertNotNull(qName0);
      assertEquals("N", qName0.getName());
      assertEquals("N:N", qName0.toString());
      assertEquals("N", qName0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-709), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-709), coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      ParentContext parentContext0 = new ParentContext(childContext0, (NodeTest) null);
      assertNotNull(parentContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, (NodeTest) null, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(precedingOrFollowingContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, evalContextArray0.length);
      
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionLast(attributeContext0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0.0, object0);
      
      QName qName0 = new QName("3hx]G]6'nG<Vu;");
      assertNotNull(qName0);
      assertEquals("3hx]G]6'nG<Vu;", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3hx]G]6'nG<Vu;", qName0.toString());
      
      CoreFunction coreFunction2 = new CoreFunction(957, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(957, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction3 = new CoreFunction((-156), expressionArray1);
      assertNotNull(coreFunction3);
      assertEquals((-156), coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      boolean boolean0 = coreFunction3.computeContextDependent();
      assertEquals((-156), coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(2, expressionArray1.length);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction3);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction3.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-2279), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-1), coreFunction2.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertNotNull(predicateContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      Object object0 = coreFunction1.computeValue(predicateContext0);
      assertNull(object0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals((-2279), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction2.functionNormalizeSpace(predicateContext0);
      assertNotNull(object1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-1), coreFunction2.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals("NaN", object1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNotNull(nullPointer0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, nullPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_ _>T_nS[4C");
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-2279), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object2);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertTrue(object2.equals((Object)boolean0));
      assertEquals(true, object2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = "ceiling";
      QName qName0 = new QName("ceiling");
      assertNotNull(qName0);
      assertEquals("ceiling", qName0.toString());
      assertEquals("ceiling", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("ceiling", qName0.toString());
      assertEquals("ceiling", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertNotNull(predicateContext0);
      assertEquals("ceiling", qName0.toString());
      assertEquals("ceiling", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(19, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      QName qName0 = new QName("i9?7D4^JNy q");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("i9?7D4^JNy q", qName0.toString());
      assertEquals("i9?7D4^JNy q", qName0.getName());
      
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "5/iyOnkT@wZ<`\"$");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("i9?7D4^JNy q", qName0.toString());
      assertEquals("i9?7D4^JNy q", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("i9?7D4^JNy q", nodeNameTest0.toString());
      assertEquals("5/iyOnkT@wZ<`\"$", nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction1 = new CoreFunction(444, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(444, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Integer integer0 = new Integer(444);
      assertNotNull(integer0);
      assertEquals(444, (int)integer0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jT/v*o");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2958);
      assertNotNull(nodeTypeTest0);
      assertEquals(2958, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-2546), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2958, nodeTypeTest0.getNodeType());
      assertEquals((-2546), step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      QName qName0 = new QName((String) null, "cC");
      assertNotNull(qName0);
      assertEquals("cC", qName0.getName());
      assertEquals("cC", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "cC");
      assertNotNull(nodeNameTest0);
      assertEquals("cC", qName0.getName());
      assertEquals("cC", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("cC", nodeNameTest0.getNamespaceURI());
      assertEquals("cC", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step1 = new Step((-351), nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("cC", qName0.getName());
      assertEquals("cC", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("cC", nodeNameTest0.getNamespaceURI());
      assertEquals("cC", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-351), step1.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(626, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(2958, nodeTypeTest0.getNodeType());
      assertEquals(626, step2.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-554), nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(2958, nodeTypeTest0.getNodeType());
      assertEquals((-554), step3.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      assertNotNull(coreOperationNegate0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-2546), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2546), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant constant0 = new Constant(" Size: ");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      QName qName0 = new QName("pzzC");
      assertNotNull(qName0);
      assertEquals("pzzC", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("pzzC", qName0.getName());
      
      boolean boolean0 = coreOperationNegate0.isContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("name()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(coreFunction0, coreFunction1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      
      String string1 = (String)coreFunction0.compute(initialContext0);
      assertNotNull(string1);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("root", string1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-709), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-709), coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      QName qName0 = new QName("3hx]G]6'nG<Vu;");
      assertNotNull(qName0);
      assertEquals("3hx]G]6'nG<Vu;", qName0.toString());
      assertEquals("3hx]G]6'nG<Vu;", qName0.getName());
      assertNull(qName0.getPrefix());
      
      CoreFunction coreFunction2 = new CoreFunction(957, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(957, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction3 = new CoreFunction((-156), expressionArray1);
      assertNotNull(coreFunction3);
      assertEquals((-156), coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      
      boolean boolean0 = coreFunction3.computeContextDependent();
      assertEquals((-156), coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction3);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction3));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction3.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationMod0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      QName qName0 = new QName("string-length", "kZ0$4aS%`/Qq{)");
      assertNotNull(qName0);
      assertEquals("string-length", qName0.getPrefix());
      assertEquals("kZ0$4aS%`/Qq{)", qName0.getName());
      assertEquals("string-length:kZ0$4aS%`/Qq{)", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("string-length", qName0.getPrefix());
      assertEquals("kZ0$4aS%`/Qq{)", qName0.getName());
      assertEquals("string-length:kZ0$4aS%`/Qq{)", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2985, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2985, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(2985, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      QName qName0 = new QName("^k`8Ww,");
      assertNotNull(qName0);
      assertEquals("^k`8Ww,", qName0.toString());
      assertEquals("^k`8Ww,", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("^k`8Ww,", qName0.toString());
      assertEquals("^k`8Ww,", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreFunction coreFunction2 = new CoreFunction(1374, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(1374, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^k`8Ww,");
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("P*hH_Qe6<,aDK");
      assertNotNull(qName0);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], variableReference0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "NaNNaN");
      assertNotNull(nodeNameTest0);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("P*hH_Qe6<,aDK", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-721), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("P*hH_Qe6<,aDK", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals((-721), step0.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-721), nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("P*hH_Qe6<,aDK", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals((-721), step1.getAxis());
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) expressionPath0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) coreOperationLessThan0;
      expressionArray1[6] = (Expression) variableReference0;
      expressionArray1[7] = (Expression) coreOperationLessThan0;
      expressionArray1[8] = (Expression) coreOperationLessThan0;
      Step step2 = new Step((-1914), nodeNameTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("P*hH_Qe6<,aDK", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals((-1914), step2.getAxis());
      assertEquals(9, expressionArray1.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(1950, nodeNameTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("P*hH_Qe6<,aDK", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals(1950, step3.getAxis());
      assertEquals(9, expressionArray1.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[6];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationLessThan0;
      expressionArray2[1] = (Expression) coreOperationOr0;
      expressionArray2[2] = (Expression) variableReference0;
      expressionArray2[3] = (Expression) expressionPath0;
      expressionArray2[4] = (Expression) expressionPath0;
      expressionArray2[5] = (Expression) expressionPath0;
      Step step4 = new Step(239, nodeNameTest0, expressionArray2);
      assertNotNull(step4);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(239, step4.getAxis());
      assertEquals("P*hH_Qe6<,aDK", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals(6, expressionArray2.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(5, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray1[5], expressionArray0[1]);
      assertNotNull(coreOperationLessThan1);
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      
      expressionArray0[3] = (Expression) coreOperationLessThan1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      assertNotNull(coreOperationNegate0);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationNegate0, expressionArray0[1]);
      assertNotNull(coreOperationLessThan2);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan2.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(coreOperationLessThan2.equals((Object)coreOperationLessThan0));
      assertFalse(coreOperationLessThan2.equals((Object)coreOperationLessThan1));
      
      expressionArray0[4] = (Expression) coreOperationLessThan2;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertNotNull(variableReference1);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.equals((Object)variableReference0));
      
      expressionArray0[5] = (Expression) variableReference1;
      ExpressionPath expressionPath1 = new ExpressionPath(variableReference0, expressionArray1, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals("P*hH_Qe6<,aDK", qName0.toString());
      assertEquals("P*hH_Qe6<,aDK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(5, stepArray0.length);
      assertEquals(9, expressionArray1.length);
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray0[6] = (Expression) expressionPath1;
      Long long0 = new Long((-414L));
      assertNotNull(long0);
      assertEquals((-414L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[7] = (Expression) constant0;
      Constant constant1 = new Constant("NaNNaN");
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      CoreFunction coreFunction0 = new CoreFunction(3029, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3029, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, constant1);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3696), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-3696), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-3696), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertEquals("e(bjjo/;u8:w1F~iqe(bjjo/;u8:w1F~iqtruee(bjjo/;u8:w1F~iqe(bjjo/;u8:w1F~iq", object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3696()('e(bjjo/;u8:w1F~iq', 'e(bjjo/;u8:w1F~iq', org.apache.commons.jxpath.ri.compiler.Constant@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000002, 'e(bjjo/;u8:w1F~iq', 'e(bjjo/;u8:w1F~iq')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(NaN, NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((double) 467);
      assertNotNull(float0);
      assertEquals(467.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(467, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(467, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant1 = new Constant("");
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[1] = (Expression) constant1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, constant1);
      assertNotNull(coreOperationMod0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(467, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(467, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("] ");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertNotNull(predicateContext0);
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.getName());
      assertEquals("] ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(55, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(55, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean0);
      
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(55, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction55()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Byte byte0 = new Byte((byte)108);
      assertNotNull(byte0);
      assertEquals((byte)108, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      QName qName0 = new QName("NaNNaN");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertNull(qName0.getPrefix());
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      coreOperationGreaterThan0.args = expressionArray0;
      assertNull(qName0.getPrefix());
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[4], coreOperationAdd0);
      assertNotNull(nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = (CoreOperationGreaterThanOrEqual)coreFunction0.getArg3();
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertSame(coreOperationGreaterThanOrEqual1, coreOperationGreaterThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-709), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-709), coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      QName qName0 = new QName("3hx]G]6'nG<Vu;");
      assertNotNull(qName0);
      assertEquals("3hx]G]6'nG<Vu;", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3hx]G]6'nG<Vu;", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("3hx]G]6'nG<Vu;", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3hx]G]6'nG<Vu;", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreFunction coreFunction2 = new CoreFunction((-709), (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals((-709), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("3hx]G]6'nG<Vu;", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3hx]G]6'nG<Vu;", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("3hx]G]6'nG<Vu;", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("3hx]G]6'nG<Vu;", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3hx]G]6'nG<Vu;", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("3hx]G]6'nG<Vu;", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Constant constant0 = new Constant("name");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, coreOperationNegate0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreOperationNegate0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      QName qName0 = new QName("string-length");
      assertNotNull(qName0);
      assertEquals("string-length", qName0.getName());
      assertEquals("string-length", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("string-length", qName0.getName());
      assertEquals("string-length", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1134));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1134), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-1134), step0.getAxis());
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      assertEquals(7, expressionArray0.length);
      
      String string0 = step0.toString();
      assertNotNull(string0);
      assertEquals((-1134), step0.getAxis());
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      assertEquals(7, expressionArray0.length);
      
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(7, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThanOrEqual0);
      assertNotNull(predicateContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003) * org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'name', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'name')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-4053), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-4053), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(1, evalContextArray0.length);
      
      QName qName0 = new QName("*o0", "stA8nR8C'=eWH");
      assertNotNull(qName0);
      assertEquals("*o0", qName0.getPrefix());
      assertEquals("*o0:stA8nR8C'=eWH", qName0.toString());
      assertEquals("stA8nR8C'=eWH", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$");
      assertNotNull(nodeNameTest0);
      assertEquals("*o0", qName0.getPrefix());
      assertEquals("*o0:stA8nR8C'=eWH", qName0.toString());
      assertEquals("stA8nR8C'=eWH", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$", nodeNameTest0.getNamespaceURI());
      assertEquals("*o0:stA8nR8C'=eWH", nodeNameTest0.toString());
      
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals("*o0", qName0.getPrefix());
      assertEquals("*o0:stA8nR8C'=eWH", qName0.toString());
      assertEquals("stA8nR8C'=eWH", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$", nodeNameTest0.getNamespaceURI());
      assertEquals("*o0:stA8nR8C'=eWH", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, evalContextArray0.length);
      
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals("*o0", qName0.getPrefix());
      assertEquals("*o0:stA8nR8C'=eWH", qName0.toString());
      assertEquals("stA8nR8C'=eWH", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$", nodeNameTest0.getNamespaceURI());
      assertEquals("*o0:stA8nR8C'=eWH", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, evalContextArray0.length);
      
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals("*o0", qName0.getPrefix());
      assertEquals("*o0:stA8nR8C'=eWH", qName0.toString());
      assertEquals("stA8nR8C'=eWH", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$", nodeNameTest0.getNamespaceURI());
      assertEquals("*o0:stA8nR8C'=eWH", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      QName qName0 = new QName("&PSOU^dM,");
      assertNotNull(qName0);
      assertEquals("&PSOU^dM,", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("&PSOU^dM,", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("&PSOU^dM,", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("&PSOU^dM,", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("a~77T");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("a~77T", qName0.getName());
      assertEquals("a~77T", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("a~77T", qName0.getName());
      assertEquals("a~77T", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      assertNotNull(nodeTypeTest0);
      assertEquals(16, nodeTypeTest0.getNodeType());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "e(bjjo/;u8:w1F~iq");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("a~77T", qName0.getName());
      assertEquals("a~77T", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a~77T", nodeNameTest0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(16, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("a~77T", qName0.getName());
      assertEquals("a~77T", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a~77T", nodeNameTest0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.getNamespaceURI());
      assertEquals(16, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      String string0 = step0.toString();
      assertNotNull(string0);
      assertNull(qName0.getPrefix());
      assertEquals("a~77T", qName0.getName());
      assertEquals("a~77T", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a~77T", nodeNameTest0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.getNamespaceURI());
      assertEquals(16, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertEquals("UNKNOWN::a~77T[null]", string0);
      
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step((-1116), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals((-1116), step1.getAxis());
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[2] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      assertNotNull(predicateContext0);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("a~77T", qName0.getName());
      assertEquals("a~77T", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a~77T", nodeNameTest0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-2279), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals((-2279), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction1.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-2279), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionNumber((EvalContext) null);
      assertNotNull(object1);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(Double.NaN, object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2279()(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("] ");
      assertNotNull(qName0);
      assertEquals("] ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("] ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertNotNull(predicateContext0);
      assertEquals("] ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("] ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1134));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1134), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      assertEquals((-1134), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      String string0 = step0.toString();
      assertNotNull(string0);
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      assertEquals((-1134), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      Object object0 = coreFunction0.functionString((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      assertEquals("NaN", object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2279()(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(string-length(null, null, null, null, null, null), string-length(null, null, null, null, null, null), string-length(null, null, null, null, null, null), 'null', string-length(null, null, null, null, null, null))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(17, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("5/iyOnkT@wZ<`\"$");
      assertNotNull(qName0);
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.toString());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("5/iyOnkT@wZ<`\"$");
      assertNotNull(qName0);
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.toString());
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.toString());
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("5/iyOnkT@wZ<`\"$", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-2279), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("m9OwgQ\"8P");
      assertNotNull(qName0);
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("m9OwgQ\"8P", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("m9OwgQ\"8P", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1134));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1134), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      assertEquals((-1134), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      String string0 = step0.toString();
      assertNotNull(string0);
      assertEquals((-1134), nodeTypeTest0.getNodeType());
      assertEquals((-1134), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationNegate0);
      assertNotNull(predicateContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNormalizeSpace(predicateContext0);
      assertNotNull(object1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals((-2279), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertFalse(object1.equals((Object)string0));
      assertEquals("NaN", object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(nameAttributeTest0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2487, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2487, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2487, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("sQ.j_.J#-k$bFx&k");
      assertNotNull(processingInstructionTest0);
      assertEquals("sQ.j_.J#-k$bFx&k", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-340), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("sQ.j_.J#-k$bFx&k", processingInstructionTest0.getTarget());
      assertEquals((-340), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      String string1 = processingInstructionTest0.toString();
      assertNotNull(string1);
      assertEquals("sQ.j_.J#-k$bFx&k", processingInstructionTest0.getTarget());
      assertFalse(string1.equals((Object)string0));
      assertEquals("processing-instruction('sQ.j_.J#-k$bFx&k')", string1);
      
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      boolean boolean0 = coreOperationAnd0.computeContextDependent();
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertTrue(boolean0);
      
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, (-340), processingInstructionTest0);
      assertNull(evalContext1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("sQ.j_.J#-k$bFx&k", processingInstructionTest0.getTarget());
      assertEquals(1, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("5/iyOnkT@wZ<`\"$");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.toString());
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.getName());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(2985, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2985, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(2985, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationAdd0);
      assertNotNull(coreOperationDivide0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreOperationDivide0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step((-333), processingInstructionTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-333), step0.getAxis());
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2871), processingInstructionTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2871), step1.getAxis());
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-333), processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals((-333), step2.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2732), processingInstructionTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals((-2732), step3.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-333), processingInstructionTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals((-333), step4.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, expressionArray1.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2732), processingInstructionTest0, expressionArray1);
      assertNotNull(step5);
      assertEquals((-2732), step5.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, expressionArray1.length);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[5] = step5;
      Step step6 = new Step((-2871), processingInstructionTest0, expressionArray1);
      assertNotNull(step6);
      assertEquals((-2871), step6.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, expressionArray1.length);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[2] = (Expression) expressionPath0;
      QName qName0 = new QName("", "NaNNaN");
      assertNotNull(qName0);
      assertEquals("NaNNaN", qName0.getName());
      assertEquals(":NaNNaN", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("NaNNaN", qName0.getName());
      assertEquals(":NaNNaN", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationLessThan0);
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationGreaterThan1);
      assertNotNull(coreOperationLessThan1);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      
      expressionArray0[5] = (Expression) coreOperationLessThan1;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(0, expressionArray1.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[6] = (Expression) coreOperationAdd1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationAdd1);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-333), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-333), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNull(evalContext0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreOperationGreaterThan0, coreOperationGreaterThan1);
      assertEquals(8, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan1));
      
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 6;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(800, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(800, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(4, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      QName qName0 = new QName("^k`8Ww,");
      assertNotNull(qName0);
      assertEquals("^k`8Ww,", qName0.toString());
      assertEquals("^k`8Ww,", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("^k`8Ww,", qName0.toString());
      assertEquals("^k`8Ww,", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      int int0 = 1374;
      CoreFunction coreFunction2 = new CoreFunction(1374, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(1374, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      
      EvalContext evalContext1 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertNotNull(predicateContext0);
      assertEquals("^k`8Ww,", qName0.toString());
      assertEquals("^k`8Ww,", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        predicateContext0.setPosition((-1026));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 32;
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(NaN, NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object2);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertTrue(object2.equals((Object)boolean0));
      assertEquals(true, object2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(800, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(800, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("position", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(24, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals("number()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(234, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(234, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(5, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      QName qName0 = new QName("r4K");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertEquals("r4K", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(1576, nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertEquals("r4K", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1576, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeNameTest0, (Expression[]) null);
      assertNotNull(step1);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertEquals("r4K", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      assertNotNull(step2);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertEquals("r4K", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest1);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("r4K", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      
      Step step3 = new Step(28, nodeNameTest1, (Expression[]) null);
      assertNotNull(step3);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("r4K", nodeNameTest1.toString());
      assertEquals(28, step3.getAxis());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      
      stepArray0[3] = step3;
      Step step4 = new Step(1514, nodeNameTest0, (Expression[]) null);
      assertNotNull(step4);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertEquals("r4K", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1514, step4.getAxis());
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      Step step5 = new Step(28, nodeNameTest0, (Expression[]) null);
      assertNotNull(step5);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertEquals(28, step5.getAxis());
      assertEquals("r4K", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, stepArray0.length);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 23, nodeNameTest0);
      assertNull(evalContext0);
      assertNull(qName0.getPrefix());
      assertEquals("r4K", qName0.toString());
      assertEquals("r4K", qName0.getName());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("r4K", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(6, stepArray0.length);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("] ");
      assertNotNull(qName0);
      assertEquals("] ", qName0.toString());
      assertEquals("] ", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("] ", qName0.toString());
      assertEquals("] ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      int int0 = 20;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("] ", qName0.toString());
      assertEquals("] ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("] ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SD");
      assertNotNull(processingInstructionTest0);
      assertEquals("SD", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("SD", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      QName qName0 = new QName("@Wj;pvwV4PHr8[7x}MN");
      assertNotNull(qName0);
      assertEquals("@Wj;pvwV4PHr8[7x}MN", qName0.toString());
      assertEquals("@Wj;pvwV4PHr8[7x}MN", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("@Wj;pvwV4PHr8[7x}MN", qName0.toString());
      assertEquals("@Wj;pvwV4PHr8[7x}MN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationOr0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      assertNotNull(coreOperationEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationLessThan0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(Integer.MIN_VALUE, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("SD", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("SD", processingInstructionTest0.getTarget());
      assertEquals(32, step1.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1639), processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals("SD", processingInstructionTest0.getTarget());
      assertEquals((-1639), step2.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(32, processingInstructionTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals("SD", processingInstructionTest0.getTarget());
      assertEquals(32, step3.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNegate0;
      Step step4 = new Step(Integer.MIN_VALUE, processingInstructionTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals("SD", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, step4.getAxis());
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(5, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationNegate1);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Constant constant0 = new Constant("name");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      QName qName0 = new QName("pzzC");
      assertNotNull(qName0);
      assertEquals("pzzC", qName0.toString());
      assertEquals("pzzC", qName0.getName());
      assertNull(qName0.getPrefix());
      
      boolean boolean0 = coreOperationNegate0.isContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) coreOperationNegate0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"by&7HKpI");
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"by&7HKpI", nodeNameTest0.getNamespaceURI());
      assertEquals("pzzC", nodeNameTest0.toString());
      assertEquals("pzzC", qName0.toString());
      assertEquals("pzzC", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"by&7HKpI", nodeNameTest0.getNamespaceURI());
      assertEquals("pzzC", nodeNameTest0.toString());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals("pzzC", qName0.toString());
      assertEquals("pzzC", qName0.getName());
      assertNull(qName0.getPrefix());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'name', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Constant constant0 = new Constant("m9OwgQ\"8P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName(":I>UKI");
      assertNotNull(qName0);
      assertEquals("I>UKI", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":I>UKI", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("I>UKI", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":I>UKI", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":I>UKI", nodeNameTest0.toString());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("I>UKI", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":I>UKI", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":I>UKI", nodeNameTest0.toString());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      EvalContext[] evalContextArray0 = new EvalContext[16];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) parentContext0;
      evalContextArray0[2] = (EvalContext) parentContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = (EvalContext) parentContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(16, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionCount(evalContextArray0[6]);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(16, evalContextArray0.length);
      assertEquals(1.0, object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace(evalContextArray0[3]);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(16, evalContextArray0.length);
      assertEquals("NaN", object1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals("name()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 6;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      assertNotNull(coreOperationNegate1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate1, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      int int0 = 28;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("5/iyOnkT@wZ<`\"$");
      assertNotNull(qName0);
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.getName());
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.getName());
      assertEquals("5/iyOnkT@wZ<`\"$", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("5/iyOnkT@wZ<`\"$", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 6;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      QName qName0 = new QName("Cannot add a second root element, only one is allowed", "pxQFC<1x`aD");
      assertNotNull(qName0);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variablePointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNotNull(nodeNameTest0);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      NodePointer nodePointer0 = attributeContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals("Cannot add a second root element, only one is allowed:pxQFC<1x`aD", qName0.toString());
      assertEquals("pxQFC<1x`aD", qName0.getName());
      assertEquals("Cannot add a second root element, only one is allowed", qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(5, evalContextArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-425));
      assertNotNull(nodeTypeTest0);
      assertEquals((-425), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-425), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-425), nodeTypeTest0.getNodeType());
      assertEquals((-425), step0.getAxis());
      assertEquals(0, expressionArray0.length);
      
      String string0 = step0.toString();
      assertNotNull(string0);
      assertEquals((-425), nodeTypeTest0.getNodeType());
      assertEquals((-425), step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertEquals("UNKNOWN::UNKNOWN()", string0);
      
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext(evalContextArray0[1], coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(evalContextArray0[2], 356, nodeTypeTest0);
      assertNull(evalContext0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-425), nodeTypeTest0.getNodeType());
      assertEquals(0, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      assertEquals(3, stepArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertEquals("string-length", string0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("()");
      assertNotNull(processingInstructionTest0);
      assertEquals("()", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(15, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("()", processingInstructionTest0.getTarget());
      assertEquals(15, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      Step step1 = new Step(15, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals("()", processingInstructionTest0.getTarget());
      assertEquals(15, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      String string1 = step1.toString();
      assertNotNull(string1);
      assertEquals("()", processingInstructionTest0.getTarget());
      assertEquals(15, step1.getAxis());
      assertNotSame(step1, step0);
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("UNKNOWN::processing-instruction('()')[null][null][null][null][null][null]", string1);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      assertNotNull(predicateContext0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 15, processingInstructionTest0);
      assertNull(evalContext1);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals("()", processingInstructionTest0.getTarget());
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(41, coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("\"by&7HKpI");
      assertNotNull(qName0);
      assertEquals("\"by&7HKpI", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"by&7HKpI", qName0.getName());
      
      boolean boolean0 = coreOperationNegate0.isContextDependent();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(1116, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1116, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionFloor((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1116, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, int0);
      
      CoreFunction coreFunction2 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-lD|t'");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hp+W'0STYUTau");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int0);
      
      EvalContext evalContext0 = null;
      boolean boolean2 = coreFunction0.isContextDependent();
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Hp+W'0STYUTau");
      assertNotNull(processingInstructionTest0);
      assertEquals("Hp+W'0STYUTau", processingInstructionTest0.getTarget());
      
      String string0 = processingInstructionTest0.toString();
      assertNotNull(string0);
      assertEquals("Hp+W'0STYUTau", processingInstructionTest0.getTarget());
      assertEquals("processing-instruction('Hp+W'0STYUTau')", string0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("Hp+W'0STYUTau", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("Hp+W'0STYUTau", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      namespaceContext0.reset();
      assertEquals("Hp+W'0STYUTau", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      String string1 = processingInstructionTest0.toString();
      assertNotNull(string1);
      assertEquals("Hp+W'0STYUTau", processingInstructionTest0.getTarget());
      assertTrue(string1.equals((Object)string0));
      assertEquals("processing-instruction('Hp+W'0STYUTau')", string1);
      
      // Undeclared exception!
      try { 
        namespaceContext0.getSingleNodePointer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1335, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1335, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormat0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("e\"ZosBtIV:lG");
      assertNotNull(processingInstructionTest0);
      assertEquals("e\"ZosBtIV:lG", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext(initialContext0, processingInstructionTest0, false, true);
      assertNotNull(childContext0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("e\"ZosBtIV:lG", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      String string0 = (String)coreFunction0.functionString(childContext0);
      assertNotNull(string0);
      assertEquals(1335, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("e\"ZosBtIV:lG", processingInstructionTest0.getTarget());
      assertEquals(1, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(1335, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("&Koa(yZG4+vE<;9v", "ceiling");
      assertNotNull(qName0);
      assertEquals("ceiling", qName0.getName());
      assertEquals("&Koa(yZG4+vE<;9v", qName0.getPrefix());
      assertEquals("&Koa(yZG4+vE<;9v:ceiling", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("ceiling", qName0.getName());
      assertEquals("&Koa(yZG4+vE<;9v", qName0.getPrefix());
      assertEquals("&Koa(yZG4+vE<;9v:ceiling", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-3005), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-3005), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNotNull(expression0);
      assertEquals((-3005), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertSame(expression0, extensionFunction0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(2613, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(2613, coreFunction1.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction((-3005), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals((-3005), coreFunction2.getFunctionCode());
      assertEquals(4, coreFunction2.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(274, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(274, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(5, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionPosition(unionContext0);
      assertNotNull(object0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      assertEquals(0, object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(5, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionPosition(unionContext0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      assertEquals(0, object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationEqual0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("e(bjjo/;u8:w1F~iq");
      assertNotNull(qName0);
      assertEquals("e(bjjo/;u8:w1F~iq", qName0.toString());
      assertEquals("e(bjjo/;u8", qName0.getPrefix());
      assertEquals("w1F~iq", qName0.getName());
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[5] = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContextArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("VyU", "");
      assertNotNull(qName0);
      assertEquals("VyU:", qName0.toString());
      assertEquals("VyU", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("VyU:", qName0.toString());
      assertEquals("VyU", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationEqual0);
      assertEquals("VyU:", qName0.toString());
      assertEquals("VyU", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("substring-before", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("\"by&7HKpI");
      assertNotNull(qName0);
      assertEquals("\"by&7HKpI", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"by&7HKpI", qName0.getName());
      
      boolean boolean0 = coreOperationNegate0.isContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertNotNull(object0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1335, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1335, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("! bK ,.S#\"Vb{c@ss&");
      assertNotNull(processingInstructionTest0);
      assertEquals("! bK ,.S#\"Vb{c@ss&", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("! bK ,.S#\"Vb{c@ss&", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("! bK ,.S#\"Vb{c@ss&", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("e(bjjo/;u8:w1F~iq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("e(bjjo/;u8:w1F~iq");
      assertNotNull(qName0);
      assertEquals("w1F~iq", qName0.getName());
      assertEquals("e(bjjo/;u8", qName0.getPrefix());
      assertEquals("e(bjjo/;u8:w1F~iq", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("w1F~iq", qName0.getName());
      assertEquals("e(bjjo/;u8", qName0.getPrefix());
      assertEquals("e(bjjo/;u8:w1F~iq", qName0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("w1F~iq", qName0.getName());
      assertEquals("e(bjjo/;u8", qName0.getPrefix());
      assertEquals("e(bjjo/;u8:w1F~iq", qName0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) parentContext0;
      evalContextArray0[1] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals("w1F~iq", qName0.getName());
      assertEquals("e(bjjo/;u8", qName0.getPrefix());
      assertEquals("e(bjjo/;u8:w1F~iq", qName0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(2, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionCount(unionContext0);
      assertNotNull(object0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("w1F~iq", qName0.getName());
      assertEquals("e(bjjo/;u8", qName0.getPrefix());
      assertEquals("e(bjjo/;u8:w1F~iq", qName0.toString());
      assertEquals("e(bjjo/;u8:w1F~iq", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals(2, evalContextArray0.length);
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = 3;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotNull(expression0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertSame(expression0, constant0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = expression0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], coreFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      Expression expression1 = coreFunction0.getArg1();
      assertNotNull(expression1);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(expression1.computeContextDependent());
      assertFalse(expression1.isContextDependent());
      assertSame(expression1, constant0);
      assertSame(expression1, expression0);
      assertEquals(9, expressionArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expression1, expressionArray0[2]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(expression1.computeContextDependent());
      assertFalse(expression1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[2]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[3], expressionArray0[1]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(4302, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(4302, coreFunction1.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction2.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationUnion0);
      assertNotNull(predicateContext0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      
      QName qName1 = new QName(">");
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals(">", qName1.toString());
      assertEquals(">", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(qName0.equals((Object)qName1));
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertNotNull(childContext0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(qName0.equals((Object)qName1));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      assertNotNull(qName0);
      assertEquals("[%!E65.qlD$6lD>", qName0.getName());
      assertEquals("R]", qName0.getPrefix());
      assertEquals("R]:[%!E65.qlD$6lD>", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("[%!E65.qlD$6lD>", qName0.getName());
      assertEquals("R]", qName0.getPrefix());
      assertEquals("R]:[%!E65.qlD$6lD>", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertNotNull(predicateContext0);
      assertEquals("[%!E65.qlD$6lD>", qName0.getName());
      assertEquals("R]", qName0.getPrefix());
      assertEquals("R]:[%!E65.qlD$6lD>", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      QName qName1 = new QName("");
      assertNotNull(qName1);
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      
      QName qName2 = new QName("");
      assertNotNull(qName2);
      assertEquals("", qName2.toString());
      assertNull(qName2.getPrefix());
      assertEquals("", qName2.getName());
      assertTrue(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, int0);
      
      CoreFunction coreFunction2 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(800, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(800, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction800()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals("not", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      assertNotNull(nodeTypeTest0);
      assertEquals(28, nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction0()()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short short0 = Short.valueOf((short)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction((short)14, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, "X`bL)2*3:");
      assertNotNull(qName0);
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "X`bL)2*3:");
      assertNotNull(nodeNameTest0);
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("X`bL)2*3:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("X`bL)2*3:", nodeNameTest0.toString());
      
      Step step0 = new Step((-1263), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("X`bL)2*3:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("X`bL)2*3:", nodeNameTest0.toString());
      assertEquals((-1263), step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest1);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("X`bL)2*3:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      Step step1 = new Step((-1263), nodeNameTest1, expressionArray1);
      assertNotNull(step1);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("X`bL)2*3:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals((-1263), step1.getAxis());
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(9, expressionArray1.length);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeNameTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(10, step2.getAxis());
      assertEquals("X`bL)2*3:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("X`bL)2*3:", nodeNameTest0.toString());
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-5607), nodeNameTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals((-5607), step3.getAxis());
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("X`bL)2*3:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("X`bL)2*3:", nodeNameTest0.toString());
      assertEquals(9, expressionArray1.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[5];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      expressionArray2[1] = (Expression) nameAttributeTest0;
      expressionArray2[2] = (Expression) coreOperationLessThan0;
      expressionArray2[3] = (Expression) coreOperationSubtract0;
      expressionArray2[4] = (Expression) coreFunction0;
      Step step4 = new Step((-2678), nodeNameTest0, expressionArray2);
      assertNotNull(step4);
      assertEquals((-2678), step4.getAxis());
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("X`bL)2*3:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("X`bL)2*3:", nodeNameTest0.toString());
      assertEquals(5, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest1);
      assertNotNull(namespaceContext0);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("X`bL)2*3:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(namespaceContext0, (-5607), nodeNameTest1);
      assertNull(evalContext0);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("X`bL)2*3:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray0, expressionArray2);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(4, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("X`bL)2*3:", qName0.getName());
      assertEquals("X`bL)2*3:", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("X`bL)2*3:", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("X`bL)2*3:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(NaN, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002) - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002) < org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("starts-with", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      QName qName0 = new QName("LB-");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("LB-", qName0.toString());
      assertEquals("LB-", qName0.getName());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("LB-", qName0.toString());
      assertEquals("LB-", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("name()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1550), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals((-1550), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, int0);
      
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(5, evalContextArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction((byte) (-31), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-31), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-31), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-31), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("id", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals("number", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      QName qName0 = new QName("){Ts<", "$");
      assertNotNull(qName0);
      assertEquals("$", qName0.getName());
      assertEquals("){Ts<", qName0.getPrefix());
      assertEquals("){Ts<:$", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("$", qName0.getName());
      assertEquals("){Ts<", qName0.getPrefix());
      assertEquals("){Ts<:$", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertEquals("contains", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      CoreFunction coreFunction0 = new CoreFunction(800, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(800, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      ParentContext parentContext0 = new ParentContext(ancestorContext0, nodeNameTest0);
      assertNotNull(parentContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Integer integer0 = new Integer(701);
      assertNotNull(integer0);
      assertEquals(701, (int)integer0);
      
      Integer integer1 = Integer.getInteger("org.apache.commons.jxpath.util.BasicTypeConverter", integer0);
      assertNotNull(integer1);
      assertEquals(701, (int)integer1);
      
      Constant constant0 = new Constant(integer1);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(701, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(701, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(701, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction0()()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 93;
      CoreFunction coreFunction1 = new CoreFunction(93, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(93, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction1;
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("unknownFunction0()()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((-766), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-766), coreFunction2.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Object object0 = coreFunction2.functionStringLength((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-766), coreFunction2.getFunctionCode());
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[0] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[1], coreOperationMultiply0);
      assertNotNull(coreOperationMod0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("G$i");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(239, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(239, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(239, coreFunction0.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("unknownFunction239()", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[20];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(20, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationAdd0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(20, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(20, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Double double0 = Double.valueOf((double) 13);
      assertNotNull(double0);
      assertEquals(13.0, (double)double0, 0.01);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(20, expressionArray0.length);
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3394));
      assertNotNull(nodeTypeTest0);
      assertEquals((-3394), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-2736), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-3394), nodeTypeTest0.getNodeType());
      assertEquals((-2736), step0.getAxis());
      assertEquals(20, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-3394), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals((-3394), nodeTypeTest0.getNodeType());
      assertEquals((-3394), step1.getAxis());
      assertEquals(20, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(20, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(20, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(20, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(20, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(20, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      
      EvalContext evalContext1 = expressionPath0.evalSteps(unionContext0);
      assertNotNull(evalContext1);
      assertFalse(locationPath0.isAbsolute());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertEquals(20, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotSame(predicateContext0, evalContext1);
      assertNotSame(evalContext1, predicateContext0);
      assertEquals(20, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(evalContext1.equals((Object)predicateContext0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      int int0 = 26;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(10, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(10, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(10, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
      assertNotNull(nameAttributeTest0);
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(10, expressionArray0.length);
      
      Double double0 = Double.valueOf(2787.088);
      assertNotNull(double0);
      assertEquals(2787.088, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(10, coreFunction1.getArgumentCount());
      assertEquals(10, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertEquals("string-length", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      QName qName0 = new QName("[%!E65.qlD$6lD>");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("[%!E65.qlD$6lD>", qName0.toString());
      assertEquals("[%!E65.qlD$6lD>", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("[%!E65.qlD$6lD>", qName0.toString());
      assertEquals("[%!E65.qlD$6lD>", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-734), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-734), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExtensionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction((-5564), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-5564), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("translate()", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(10, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(800, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(800, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction800()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertEquals("string-length", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("xL(4#4M)1e8g~");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      
      expressionArray0[3] = (Expression) coreOperationAdd1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], coreOperationAdd1);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002) + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000006), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 > org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      
      CoreFunction coreFunction2 = new CoreFunction(2835, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(2835, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1474, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1474, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(1474, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction1474()()", string0);
      
      QName qName0 = new QName("unknownFunction1474()()");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction1474()()", qName0.getName());
      assertEquals("unknownFunction1474()()", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "The Text \"");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction1474()()", qName0.getName());
      assertEquals("unknownFunction1474()()", qName0.toString());
      assertEquals("The Text \"", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction1474()()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction1474()()", qName0.getName());
      assertEquals("unknownFunction1474()()", qName0.toString());
      assertEquals("The Text \"", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction1474()()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.functionPosition(descendantContext0);
      assertNotNull(object0);
      assertEquals(1474, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction1474()()", qName0.getName());
      assertEquals("unknownFunction1474()()", qName0.toString());
      assertEquals("The Text \"", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction1474()()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, object0);
      
      String string1 = coreFunction0.toString();
      assertNotNull(string1);
      assertEquals(1474, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("unknownFunction1474()()", string1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[23];
      CoreFunction coreFunction0 = new CoreFunction((-1824), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-1824), coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction0.getArgumentCount());
      assertEquals(23, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg2();
      assertNull(expression0);
      assertEquals((-1824), coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction0.getArgumentCount());
      assertEquals(23, expressionArray0.length);
      
      expressionArray0[0] = null;
      Expression expression1 = coreFunction0.getArg3();
      assertNull(expression1);
      assertEquals((-1824), coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction0.getArgumentCount());
      assertEquals(23, expressionArray0.length);
      
      expressionArray0[1] = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals((-1824), coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(23, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("4K5NBrK=");
      assertNotNull(qName0);
      assertEquals("4K5NBrK=", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4K5NBrK=", qName0.toString());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expression0);
      assertNotNull(predicateContext0);
      assertEquals((-1824), coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(23, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2835, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2835()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      coreFunction1.getArgumentCount();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, (Expression) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      coreFunction0.functionNumber(nodeSetContext0);
      CoreFunction coreFunction2 = new CoreFunction(0, (Expression[]) null);
      nodeSetContext0.getSingleNodePointer();
      // Undeclared exception!
      try { 
        coreFunction2.functionString(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "z~K_X_>x|E\\*oh";
      Integer.getInteger("z~K_X_>x|E*oh");
      QName qName0 = new QName("Jbn>)p!`Ti&Iz/zMO", "");
      EvalContext evalContext0 = null;
      NodePointer.newChildNodePointer((NodePointer) null, qName0, "");
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      coreFunction1.getArgumentCount();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, (Expression) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      QName qName0 = new QName("unknownFunction0()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(46, (Expression[]) null);
      QName qName0 = new QName(".0", ".0");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5564), (Expression[]) null);
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.UnionContext");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreFunction1.functionRound(rootContext1);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2147483648()(unknownFunction-5564()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreOperationMultiply0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(155, expressionArray0);
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(155);
      Step step0 = new Step(155, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[4]);
      expressionPath0.createContextForStep(predicateContext0, (-5295), (NodeTest) null);
      coreFunction0.computeValue((EvalContext) null);
      assertEquals(155, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction((-766), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-766));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-766()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 28;
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(189, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer.getInteger("z~K_X_>x|E*oh");
      NodePointer nodePointer0 = null;
      QName qName0 = new QName("Jbn>)p!`Ti&Iz/zMO", "");
      EvalContext evalContext0 = null;
      NodePointer.newChildNodePointer((NodePointer) null, qName0, "");
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(274, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-884), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-2933), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Expression[] expressionArray1 = new Expression[3];
      Long long0 = new Long(46);
      Constant constant0 = new Constant(long0);
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-280), processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = null;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = null;
      expressionArray2[3] = null;
      expressionArray2[4] = null;
      expressionArray2[5] = (Expression) coreOperationEqual0;
      expressionArray2[6] = null;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray2[7] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray2[7]);
      expressionArray2[8] = (Expression) coreOperationSubtract0;
      Step step1 = new Step(3241, processingInstructionTest0, expressionArray2);
      stepArray0[1] = step1;
      QName qName1 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step2 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-280), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray1, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[1], expressionArray2[2]);
      expressionArray0[2] = (Expression) coreOperationSubtract1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[0], expressionArray2[6]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3563));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(1335, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[1]);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CoreFunction coreFunction0 = new CoreFunction(239, expressionArray0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction1 = new CoreFunction(239, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-5520), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("Ra]", "[%!E65.qlD$6lD>");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionTrue(rootContext0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.UnionContext");
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-5520()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5564), (Expression[]) null);
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.UnionContext");
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(23, coreFunction1.getFunctionCode());
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      int int0 = (-3288);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(46, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-2933), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("urr", "[%!E65.qlD$6lD>");
      NodePointer.newChildNodePointer((NodePointer) null, qName0, "c5b+,%1~_d,.");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "[%!E65.qlD$6lD>");
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2147483648()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], constant0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[2], coreOperationLessThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationNotEqual1, expressionArray0[1]);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000001 div org.apache.commons.jxpath.ri.compiler.VariableReference@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 != org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000001 div org.apache.commons.jxpath.ri.compiler.VariableReference@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      NodePointer.newChildNodePointer(variablePointer0, (QName) null, coreOperationLessThanOrEqual0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "not");
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction0.getArgumentCount();
      CoreFunction coreFunction1 = new CoreFunction(1153, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(1153, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5520), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      NodePointer nodePointer0 = null;
      QName qName0 = new QName("Ra]", "[%!E65.qlD$6lD>");
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("", "n9~SoA;i~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-280), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(":0j*|3_C");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      nodeSetContext0.getCurrentNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 < (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5564), (Expression[]) null);
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.UnionContext");
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step((-208), nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      step0.isContextDependent();
      Step step1 = new Step((-208), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-5564), nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-5564), nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-208), nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 < (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[20];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Double double0 = Double.valueOf((double) 13);
      Constant constant0 = new Constant(double0);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = (-5564);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-5564), (Expression[]) null);
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.UnionContext");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-5564()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(46, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(":0j*|3_C");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(239, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002) + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) + org.apache.commons.jxpath.ri.compiler.Constant@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 < org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(":0j*|3_C");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5520), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("Ra]", "[%!E65.qlD$6lD>");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionTrue(rootContext0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.UnionContext");
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      EvalContext evalContext0 = rootContext0.getConstantContext(selfContext0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, false, nodeNameTest0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-5520()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(":0j*|3_C");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 < (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(46, (Expression[]) null);
      coreFunction0.getArgumentCount();
      boolean boolean0 = true;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(467);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getContextNodeList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5564), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionTrue(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-5564()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, (Expression[]) null, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, locationPath0);
      String string0 = "org.apache.commons.jxpath.ri.compiler.VariableReference";
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.VariableReference", "org.apache.commons.jxpath.ri.compiler.VariableReference");
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      QName qName1 = new QName("org.apache.commons.jxpath.ri.compiler.VariableReference", "org.apache.commons.jxpath.ri.compiler.VariableReference");
      VariableReference variableReference1 = new VariableReference(qName1);
      expressionArray0[3] = (Expression) variableReference1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], variableReference0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      VariableReference variableReference2 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference2;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-760), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3563));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, processingInstructionTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.toString();
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("unknownFunction0()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      Step step0 = new Step((-748), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step1;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-3575), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(1071, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-3575), nodeNameTest0, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = 328;
      Constant constant0 = new Constant("");
      CoreFunction coreFunction0 = new CoreFunction(328, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      SelfContext selfContext0 = new SelfContext(descendantContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.toString();
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("unknownFunction0()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      Step step0 = new Step((-748), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-3575), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(1071, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-3575), nodeNameTest0, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(908, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(908, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(46, (Expression[]) null);
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      String string0 = "a~+:Z5YD'!Ol%";
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(":0j*|3_C");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 < (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[5];
      Constant constant0 = new Constant("");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(45, expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      assertNull(expression0);
      
      expressionArray1[1] = null;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1487), (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(2468, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionArray1[2] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[2], expressionPath0);
      expressionArray1[3] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[4] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[3], coreFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[4], coreOperationGreaterThanOrEqual0);
      assertEquals(45, coreFunction0.getFunctionCode());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer.getInteger("z~K_X_>x|E*oh");
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(328, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction328()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5564), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("R]", "[%!E65.qlD$6lD>");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionTrue(rootContext0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.UnionContext");
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      EvalContext evalContext0 = rootContext0.getConstantContext(selfContext0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-5564()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3563));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, processingInstructionTest0, true);
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expression0, expression0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(1738, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction1;
      Constant constant0 = new Constant("w_#+FQ}GFz");
      expressionArray0[4] = (Expression) constant0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("Exception trying to remove all for xpath ", "Could not allocate a NodePointer for object of ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "9`@:");
      Step step0 = new Step((-945), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1738, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-945), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-945), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step6 = new Step((-945), processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(1164, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[3], coreFunction0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[5]);
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray0);
      assertEquals(2, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1112), expressionArray0);
      coreFunction0.getArgumentCount();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1111));
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getContextNodeList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("descendant");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2269), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) unionContext0);
      UnionContext unionContext1 = new UnionContext(evalContextArray0[2], evalContextArray0);
      Locale locale0 = Locale.FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, unionContext1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, evalContextArray0[1], nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      UnionContext unionContext2 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(unionContext2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2269()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("0");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1228), expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("cz13m-f'");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("E(&}T|;,cLSz5iuhn}!");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1948), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("%L+Q<Vp(Z&@sva[jm");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nameAttributeTest0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      QName qName1 = new QName(" VBn0c");
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName1, variablePointer1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[1], nodePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ''
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, (Expression[]) null, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, locationPath0);
      String string0 = "org.apache.commons.jxpath.ri.compiler.VariableReference";
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.VariableReference", "org.apache.commons.jxpath.ri.compiler.VariableReference");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference1;
      VariableReference variableReference2 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference2;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], variableReference1);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      VariableReference variableReference3 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference3;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      coreOperationNegate0.computeContextDependent();
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-760), expressionArray0);
      coreFunction0.computeContextDependent();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("", "last");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-301), nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-301), nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-2510), nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-301), nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        expressionPath0.createContextForStep(attributeContext0, (-1104), nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }
}
